<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perqin&#39;s Blog</title>
  <subtitle>Maintaining...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.perqin.com/"/>
  <updated>2016-08-21T16:07:50.160Z</updated>
  <id>https://blog.perqin.com/</id>
  
  <author>
    <name>Perqin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tutorials For Girlfriend 0: What is HTTP</title>
    <link href="https://blog.perqin.com/2016/08/22/tutorials-for-girlfriend-0-what-is-http/"/>
    <id>https://blog.perqin.com/2016/08/22/tutorials-for-girlfriend-0-what-is-http/</id>
    <published>2016-08-21T16:07:50.000Z</published>
    <updated>2016-08-21T16:07:50.160Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Solve repairing problem on dual-boot Windows and Ubuntu PC</title>
    <link href="https://blog.perqin.com/2016/08/21/solve-repairing-problem-on-dual-boot-windows-and-ubuntu-pc/"/>
    <id>https://blog.perqin.com/2016/08/21/solve-repairing-problem-on-dual-boot-windows-and-ubuntu-pc/</id>
    <published>2016-08-21T15:43:05.000Z</published>
    <updated>2016-08-21T15:43:05.744Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>加快墙内网速提升Ubuntu使用效率的TIPS</title>
    <link href="https://blog.perqin.com/2016/08/09/tips-to-save-your-time-on-ubuntu/"/>
    <id>https://blog.perqin.com/2016/08/09/tips-to-save-your-time-on-ubuntu/</id>
    <published>2016-08-08T17:03:50.000Z</published>
    <updated>2016-08-08T17:33:47.131Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知（？），在国内想要访问某些网站是很慢的，然而也许是误伤的缘故，很多不在此列表的网站访问速度也很慢，shadowsocks的配置方法我已经在<a href="/2016/04/18/ubuntu-reinstallation-series-shadowsocks-configurations/">重装Ubuntu系列：Shadowsocks配置</a>里面提到过，这里再对Ubuntu做一些简单的配置，充分利用已有的资源。</p>
<h1 id="使用npm镜像"><a href="#使用npm镜像" class="headerlink" title="使用npm镜像"></a>使用npm镜像</h1><p>之前从学校回家之后，网络莫名抽风，<code>npm install</code>死活卡着不动，万般无奈之下去谷歌了一下npm的镜像，发现过内有两个镜像，淘宝提供的和cnpm提供的。后者似乎进行了负载均衡，国内用户会通过淘宝的镜像下载（不是很清楚，详见<a href="https://cnpmjs.org/" target="_blank" rel="external">官网</a>），因此选择了它。<br>配置方法还是很简单的，直接在Home目录下新建一个<code>.npmrc</code>的文件，并写入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registry=http://r.cnpmjs.org/</div></pre></td></tr></table></figure></p>
<p>然后重新打开命令行即可。<br>值得一提的是，cnpm还提供了一个<code>cnpm</code>包，用于自动从cnpm镜像下载，不过好像和npm的表现不太一样，所以最终没有用它。</p>
<h1 id="使用教育网apt-get镜像"><a href="#使用教育网apt-get镜像" class="headerlink" title="使用教育网apt-get镜像"></a>使用教育网apt-get镜像</h1><p>这个就不多解释了，直接发车。打开Dash面板搜索<code>Software and Updates</code>，然后打开<code>Ubuntu Software</code>标签页下的<code>Download from:</code>列表，选择<code>&#39;Other...</code>，从弹出的对话框中列表里的China里选择一个即可。</p>
<h1 id="使用国内云服务器和HA-Proxy做Shadowsocks中继"><a href="#使用国内云服务器和HA-Proxy做Shadowsocks中继" class="headerlink" title="使用国内云服务器和HA-Proxy做Shadowsocks中继"></a>使用国内云服务器和HA-Proxy做Shadowsocks中继</h1><p>校园网的环境真是尿崩啊……ping我US的Shadowsocks服务器居然丢包达到了25%，谷歌一番之后，发现了神器HA-Proxy，它可以作为TCP和HTTP的中继，于是我尝试在我的国内云服务器ping我的Shadowsocks服务器，发现延迟在200ms左右，不丢包。从我本地ping国内云服务器，延迟10ms以内，不丢包。可以，很强势！于是，方案浮出水面：在国内云服务器上安装HA-Proxy，将A端口转发到Shadowsocks服务器的B端口，然后将本地的Shadowsocks服务器IP改为国内云服务器IP，端口改为A。</p>
<ul>
<li><p>在国内云服务器安装HA-Proxy</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install haproxy</div></pre></td></tr></table></figure>
</li>
<li><p>修改国内云服务器上的<code>/etc/haproxy/haproxy.cfg</code>，将<code>defaults</code>内的<code>mode</code>改为<code>tcp</code>，并在后面添加前后端配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">frontend ss-in</div><div class="line">	bind *:A</div><div class="line">	default_backend ss-out</div><div class="line"></div><div class="line">backend ss-out</div><div class="line">	server server1 1.2.3.4:B maxconn 20480</div></pre></td></tr></table></figure>
</li>
</ul>
<p>   其中1.2.3.4就是你的Shadowsocks服务器IP。</p>
<ul>
<li><p>保存编辑，重启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service haproxy restart</div></pre></td></tr></table></figure>
</li>
</ul>
<p>客户端的配置略去，需要注意如果有多个端口的话，上述配置文件可以省略端口B。另外，HA-Proxy不支持UDP中继，这可能会造成一些影响，因为Shadowsocks默认开启UDP代理，这可能导致UDP包被丢弃，等我遇到坑了再来田- -</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知（？），在国内想要访问某些网站是很慢的，然而也许是误伤的缘故，很多不在此列表的网站访问速度也很慢，shadowsocks的配置方法我已经在&lt;a href=&quot;/2016/04/18/ubuntu-reinstallation-series-shadowsocks-co
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="https://blog.perqin.com/tags/shadowsocks/"/>
    
      <category term="Ubuntu" scheme="https://blog.perqin.com/tags/ubuntu/"/>
    
      <category term="npm" scheme="https://blog.perqin.com/tags/npm/"/>
    
      <category term="HA-Proxy" scheme="https://blog.perqin.com/tags/ha-proxy/"/>
    
  </entry>
  
  <entry>
    <title>重装Ubuntu系列：Shadowsocks配置</title>
    <link href="https://blog.perqin.com/2016/04/18/ubuntu-reinstallation-series-shadowsocks-configurations/"/>
    <id>https://blog.perqin.com/2016/04/18/ubuntu-reinstallation-series-shadowsocks-configurations/</id>
    <published>2016-04-17T17:52:00.000Z</published>
    <updated>2016-08-08T16:31:43.292Z</updated>
    
    <content type="html"><![CDATA[<p>说实话Ubuntu（版本<code>14.04 LTS</code>）的重装成本比Windows高太多了，一方面是自己不熟悉，另一方面也不如Windows只要exe和msi就能搞定，然而搞崩Ubuntu或者改动分区之后又不得不重装（妈蛋重装系统和重搭博客是我干得最多的事！！），往往有些配置有没有记下来，于是有了写这个系列的想法。<br>作为本系列的第一蛋，自然要先把科学上网的问题解决，因为已经有了VPS，所以只需要搞定客户端的问题。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://www.ihunter.me/Ubuntu%2014.04%20VPS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEShadowsocks%E7%9A%84%E6%96%B9%E6%B3%95.html" target="_blank" rel="external">Ubuntu 14.04 VPS安装配置Shadowsocks的方法</a></li>
<li><a href="https://github.com/snachx/gfwlist2privoxy" target="_blank" rel="external">snachx/gfwlist2privoxy</a></li>
<li><a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="external">gfwlist/gfwlist</a></li>
<li><a href="http://askubuntu.com/questions/18802/how-to-correctly-add-a-custom-daemon-to-init-d" target="_blank" rel="external">10.04 - How to correctly add a custom daemon to init.d? - Ask Ubuntu</a></li>
</ul>
<h1 id="安装Shadowsocks-python客户端"><a href="#安装Shadowsocks-python客户端" class="headerlink" title="安装Shadowsocks-python客户端"></a>安装Shadowsocks-python客户端</h1><p>事实上编译<code>libev</code>版本的也是可行的，但是实在麻烦，这里图方便就用了python版本的实现。<br>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install python-gevent python-pip python-m2crypto</div><div class="line">sudo pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>至此Shadowsocks就安装好了。</p>
<h1 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h1><p>Shadowsocks的python版本同时安装了客户端和服务器端，分别是<code>sslocal</code>和<code>ssserver</code>。<br>在<code>/etc/shadowsocks/</code>新建一个文件<code>sslocal.json</code>（其实放哪里无所谓，但是配置文件一般放在<code>/etc</code>里面），输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;server&quot;:&quot;1.2.3.4&quot;,</div><div class="line">  &quot;server_port&quot;:5678,</div><div class="line">  &quot;local_port&quot;:1080,</div><div class="line">  &quot;password&quot;:&quot;passfoobar&quot;,</div><div class="line">  &quot;timeout&quot;:600,</div><div class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>server</code>是服务器地址，<code>server_port</code>是服务器端口，<code>local_port</code>是本地端口，一般默认就是<code>1080</code>，<code>password</code>是密码，<code>timeout</code>是超时时间（并不知道有什么用- -），<code>method</code>是加密方式，默认就是<code>aes-256-cfb</code>。</p>
<h1 id="运行Shadowsocks"><a href="#运行Shadowsocks" class="headerlink" title="运行Shadowsocks"></a>运行Shadowsocks</h1><p>在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sslocal -c /etc/shadowsocks/sslocal.json -d start</div></pre></td></tr></table></figure></p>
<p>之后Shadowsocks就作为守护进程在后台运行了，参数c指定了配置文件，d参数要求运行守护（后台）进程。这里需要注意的是必须用sudo运行，否则会无法读取配置文件。</p>
<h1 id="安装与配置Privoxy"><a href="#安装与配置Privoxy" class="headerlink" title="安装与配置Privoxy"></a>安装与配置Privoxy</h1><p>运行了Shadowsocks之后你会发现即使给浏览器设置了代理端口，依然无法翻墙，这是因为Ubuntu 14.04本身不支持<code>socks5</code>协议，而python实现的Shadowsocks本身只有这个协议，因此在看了Windows上C#版本的Shadowsocks实现的源码之后想到了解决方法：使用Privoxy在<code>localhost:8123</code>运行一个HTTP代理，然后转发到1080端口上去，然后将浏览器的代理设置到8123端口就行啦！<br>事实上使用Privoxy还有一个好处，那就是可以依托Privoxy强大的action文件进行局部代理，Windows上是通过pac文件实现的，但是Privoxy不支持pac文件，怎么办呢？<br>庆幸的是，GitHub上有一个项目<code>gfwlist2privoxy</code>可以把GFWList文件转换成Privoxy的action文件，而GFWList是一个开源项目，收集更新被墙的域名列表。于是解决方法也出来了：从gfwlist下载最新的gfwlist文件，然后用gfwlist2privoxy转换成action文件即可！<br>废话说完，开始配置，首先下载Privoxy：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install privoxy</div></pre></td></tr></table></figure></p>
<p>完成之后在这里下载<a href="https://github.com/gfwlist/gfwlist/raw/master/gfwlist.txt" target="_blank" rel="external">最新的gfwlist.txt</a>，放到个人目录里，然后安装<code>gfwlist2privoxy</code>并生成action文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo pip install gfwlist2privoxy</div><div class="line">sudo gfwlist2privoxy -i ~/gfwlist.txt -f /etc/privoxy/gfwlist.action -p &quot;127.0.0.1:1080&quot; -t socks5</div></pre></td></tr></table></figure></p>
<p>接下来修改Privoxy的配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/privoxy/config</div></pre></td></tr></table></figure></p>
<p>首先指定监听地址：<br><img src="set-privoxy-listen-address.png" alt="Set Privoxy listen address"><br>然后增加action文件：<br><img src="add-privoxy-action-file.png" alt="Add Privoxy action file"><br>最后重启Privoxy服务，只要没有报错就大功告成！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service privoxy restart</div></pre></td></tr></table></figure></p>
<h1 id="给浏览器配置代理"><a href="#给浏览器配置代理" class="headerlink" title="给浏览器配置代理"></a>给浏览器配置代理</h1><p>火狐浏览器的设置里就可以配置，直接修改即可：<br><img src="set-proxy-for-firefox.png" alt="Set proxy for Firefox"><br>至于Chromium浏览器，是直接使用系统设置的，这里可以直接在Ubuntu的网络设置里修改，进入<code>System Settings</code> - <code>Network</code> - <code>Network proxy</code>，设置完成后点击<code>Apply to system wide</code>即可。<br><img src="set-system-proxy.png" alt="Set system proxy"><br>另一种方法是在.bashrc文件末尾加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export http_proxy=http://localhost:8123</div><div class="line">export https_proxy=http://localhost:8123</div></pre></td></tr></table></figure></p>
<p>之后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>更新环境即可。</p>
<h1 id="让Shadowsocks开机自启动"><a href="#让Shadowsocks开机自启动" class="headerlink" title="让Shadowsocks开机自启动"></a>让Shadowsocks开机自启动</h1><p>这里一切都接近完美，但是仍然有个问题：每次开机需要手动启动Shadowsocks，能不能把Shadowsocks也变成service呢？当然可以，只需要在<code>/etc/init.d/</code>里面增加一个脚本即可。这个目录里有个<code>skeleton</code>文件，是模板文件，我已经进行了修改，虽然没有输出，但是能够正常启动，从<a href="https://gist.github.com/perqin/2867f8fac6dbbf2514b7471095233668/raw/84207cb3a4fbf702df828504b643c5b65a77c7ab/sslocal" target="_blank" rel="external">这里</a>下载这个文件到个人目录，然后更新服务列表启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo cp ~/sslocal /etc/init.d/sslocal</div><div class="line">sudo chmod a+x /etc/init.d/sslocal</div><div class="line">sudo update-rc.d sslocal defaults 97 03</div><div class="line">sudo service sslocal start</div></pre></td></tr></table></figure></p>
<h1 id="还不够完美"><a href="#还不够完美" class="headerlink" title="还不够完美"></a>还不够完美</h1><p>到这里我们已经能够无痛翻墙，但是还有两个问题：</p>
<ul>
<li>服务自启动脚本没有输出，不能确定运行状态；</li>
<li>无法自动更新gfwlist和更新用户规则</li>
</ul>
<p>这两个以后我会解决后另行发文记录，嘿嘿！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说实话Ubuntu（版本&lt;code&gt;14.04 LTS&lt;/code&gt;）的重装成本比Windows高太多了，一方面是自己不熟悉，另一方面也不如Windows只要exe和msi就能搞定，然而搞崩Ubuntu或者改动分区之后又不得不重装（妈蛋重装系统和重搭博客是我干得最多的事！！
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="https://blog.perqin.com/tags/shadowsocks/"/>
    
      <category term="Ubuntu" scheme="https://blog.perqin.com/tags/ubuntu/"/>
    
      <category term="Privoxy" scheme="https://blog.perqin.com/tags/privoxy/"/>
    
      <category term="GFW" scheme="https://blog.perqin.com/tags/gfw/"/>
    
      <category term="gfwlist" scheme="https://blog.perqin.com/tags/gfwlist/"/>
    
      <category term="翻墙" scheme="https://blog.perqin.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>魅族魅蓝2解锁bootloader并刷入AOSP ROM</title>
    <link href="https://blog.perqin.com/2016/04/14/unlock-bootloader-and-flash-aosp-for-meizu-m2-mini/"/>
    <id>https://blog.perqin.com/2016/04/14/unlock-bootloader-and-flash-aosp-for-meizu-m2-mini/</id>
    <published>2016-04-13T17:16:53.000Z</published>
    <updated>2016-08-08T16:31:43.296Z</updated>
    
    <content type="html"><![CDATA[<p>俄罗斯论坛<a href="http://4pda.ru/forum/index.php" target="_blank" rel="external">4pda</a>的一些大神成功的解锁了bootloader，我把教程翻译成了英文并完成了刷机，记录如下。</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol>
<li>本教程需要一定计算机操作基础知识。</li>
<li>文章中提供的资源均来自Google Drive文件分享。</li>
</ol>
<h1 id="原出处"><a href="#原出处" class="headerlink" title="原出处"></a>原出处</h1><ol>
<li>解锁bootloader：<a href="http://4pda.ru/forum/index.php?showtopic=683361&amp;st=5300#entry45261414" target="_blank" rel="external">http://4pda.ru/forum/index.php?showtopic=683361&amp;st=5300#entry45261414</a></li>
<li>第三方recovery.img下载：<a href="http://4pda.ru/forum/index.php?showtopic=683361&amp;st=5280#entry45259035" target="_blank" rel="external">http://4pda.ru/forum/index.php?showtopic=683361&amp;st=5280#entry45259035</a></li>
</ol>
<h1 id="0-前提"><a href="#0-前提" class="headerlink" title="0. 前提"></a>0. 前提</h1><ol>
<li>手机已经获取root权限。</li>
<li>数据必须备份。</li>
</ol>
<h1 id="1-解锁bootloader"><a href="#1-解锁bootloader" class="headerlink" title="1. 解锁bootloader"></a>1. 解锁bootloader</h1><ol>
<li>安装手机的驱动（在Windows10下直接插入手机就会自动安装），下载adb工具，将adb.exe加入到环境变量。<br><img src="" alt=""></li>
<li>下载脚本unlock_bootloader.sh并拷贝到手机里（如内置存储的根目录）。</li>
<li>下载<a href="">Terminal 1.0.70</a>和<a href="">BusyBox + Free.ver.33.build.183</a>并安装。</li>
<li>运行BusyBox并授权root权限，点击“Install System”。</li>
<li>安装完成并重启手机之后，打开Terminal，输入<code>su</code>提权，授权root权限后进入到保存unlock_bootloader.sh的目录，输入<code>sh unlock_bootloader.sh</code>运行脚本。</li>
<li>运行成功之后，打开Windows的命令行工具，将手机连接电脑并打开USB调试，在命令行中输入<code>adb reboot bootloader</code>。</li>
<li>手机重启进入bootloader模式之后在命令行中输入<code>fastboot oem unlock</code>进行解锁，手机会提示你继续操作将失去保修，按<code>音量+</code>键确定。<br><img src="fastboot-oem-unlock.png" alt="fastboot oem unlock"></li>
<li>完成后手机会卡死而命令行中有成功信息，此时长按手机电源键强制重启，一旦显示出MEIZU的字样时立刻同时按住<code>电源</code>键和<code>音量+</code>键直到进入魅族原生Recovery。</li>
<li>进入之后勾选“清除数据”之后选择“执行”，数据清除后选择“重启”，这个操作相当于重置系统，手机会重启并显示魅族小气球，这个动画将会持续10-20分钟，请耐心等待。</li>
</ol>
<h1 id="2-刷入第三方Recovery"><a href="#2-刷入第三方Recovery" class="headerlink" title="2. 刷入第三方Recovery"></a>2. 刷入第三方Recovery</h1><ol>
<li>进入系统之后确认root权限并重新启用USB调试，Windows中重新打开命令行并输入<code>adb reboot bootloader</code>，手机重启并再次进入bootloader模式。</li>
<li>俄罗斯论坛大神提供了多个Recovery，我在这里选的是英文版的Materialised主题的Recovery。</li>
<li>下载Recovery到计算机上后命令行进入到该位置并输入“fastboot flash recovery recovery.img”，其中recovery.img即为你下载的Recovery文件的名字。<br><img src="flash-recovery.png" alt="fastboot flash recovery recovery.img"></li>
<li>刷写完成后长按电源键重启即可。</li>
</ol>
<h1 id="3-刷入AOSP-ROM"><a href="#3-刷入AOSP-ROM" class="headerlink" title="3. 刷入AOSP ROM"></a>3. 刷入AOSP ROM</h1><ol>
<li>下载<a href="">AOSP.zip</a>并放入手机内置存储中。</li>
<li>手机重启，一旦显示出MEIZU的字样时立刻同时按住<code>电源</code>键和<code>音量+</code>键直到进入第三方Recovery。</li>
<li>使用第三方Recovery选择刷机包刷入并清除相关数据（Darvik、cache等）。</li>
<li>重启手机，享受原生Android吧！</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;俄罗斯论坛&lt;a href=&quot;http://4pda.ru/forum/index.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4pda&lt;/a&gt;的一些大神成功的解锁了bootloader，我把教程翻译成了英文并完成了刷机，记录如下。&lt;/p&gt;
&lt;h1
    
    </summary>
    
    
      <category term="bootloader" scheme="https://blog.perqin.com/tags/bootloader/"/>
    
      <category term="AOSP" scheme="https://blog.perqin.com/tags/aosp/"/>
    
      <category term="Android" scheme="https://blog.perqin.com/tags/android/"/>
    
      <category term="ROM" scheme="https://blog.perqin.com/tags/rom/"/>
    
      <category term="魅族" scheme="https://blog.perqin.com/tags/%E9%AD%85%E6%97%8F/"/>
    
      <category term="魅蓝2" scheme="https://blog.perqin.com/tags/%E9%AD%85%E8%93%9D2/"/>
    
  </entry>
  
</feed>
