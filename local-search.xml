<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>日本旅游日志</title>
    <link href="/2023/12/21/japan-trip-2023/"/>
    <url>/2023/12/21/japan-trip-2023/</url>
    
    <content type="html"><![CDATA[<p>18、19年的时候去过两次日本，后来就是三年疫情，直到今年七月广州领区才重新开放了签证办理，憋了三年的我拉上了水月、山风、潜水艇三个小伙伴，安排了国庆假期的日本之旅。正好有朋友找我抄这趟旅游的作业，那么就顺便写下这篇博客且作回忆。</p><h2 id="出行准备"><a href="#出行准备" class="headerlink" title="出行准备"></a>出行准备</h2><p>既然也是作业，旅游规划期间的攻略也得写一写，不感兴趣的读者可以往下翻翻~</p><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>这次旅游我们是四人精锐小队，因此在住宿上优先选择了独栋民宿，基本上人均可以控制在400以内。东京繁华地区周边的住宿价格要高不少，可以在这里适当提高预算，或者寻找胶囊公寓、青旅等廉价方案。我们这次在东京住的公寓就相当小，有限的房间里还要堆满行李，体验实在不算好。</p><p>在寻找住宿的时候，最好提前把要去的景点规划好，然后事先搜索交通是否便利。在京都住的时候，我们选择了一个距离京都站不远、附近也有地铁站的地方，但实际旅游的时候发现由于线路原因，最近的那个地铁站根本用不上，而京都站也基本只有长途移动的时候需要去，结果那几天跑景点多走了很多冤枉路。</p><p>关于住宿预订的网站，我们综合看下来Agoda是价格比较低的，Booking和爱彼迎也可以看看。</p><h3 id="机票"><a href="#机票" class="headerlink" title="机票"></a>机票</h3><p>机票是旅游开支的大头，选择廉航可以便宜不少钱，但是务必要确定好行程再购买，大多数廉航都不允许退改签。一开始因为请假不顺利又担心机票价格越来越贵，我心急先买了27号的，事后为了和小伙伴对齐出发日期，含泪改签Orz</p><p>另外，除非是热门节假日，机票的价格往往波动很大，并不需要特意提前太早购买，可以等出发前一个月甚至半个月再买，同时关注廉航的特惠机票信息，香港快运航空时不时就会有便宜的机票。</p><p>香港快运上的指定座位可以不买，值机的时候早点到场、和小伙伴一起值机，就可以坐到一块儿了。</p><h3 id="交通卡和JR"><a href="#交通卡和JR" class="headerlink" title="交通卡和JR"></a>交通卡和JR</h3><p>日本的轨道交通非常发达，准备一张交通卡（日本那边都叫IC卡）会很方便。日本的交通卡有ICOCA、SUICA（西瓜卡）和PASMO，这三家在使用上是互通的，不论是在关西还是关东游玩，随便选择一种就可以。虽然SUICA和PASMO都说不再出售实体卡了，但淘宝上应该都还能买到，大概（。如果旅游的景点集中在一些地方的话，也可以购买旅游日票，在谷歌地图上可以查到地铁票价，只要规划一下具体的跑点方案就可以知道日票是否划算了。所以提前规划好要去的地方真的非常有用（</p><p>如果需要长距离移动，例如从京都跑去东京，就需要坐JR了，也就是日本的高铁。日本的高铁由七家公司运营，也都支持网上提前购票，这些在网上有很多攻略，这里就不赘述啦。关于取票倒是可以提一下，不同的平台可能取票方式不同，我在smart-ex上购票后，网站上说可以通过二维码取实体票，也可以把票直接关联到IC卡上。但是当时我在京都站找到的取票机却怎么也取不出票，人工窗口又一大堆人排队，最后是关联了票到IC卡上然后顺利出入站。当然，也可以不这么折腾，去到了再买票，据说当场买票一般也都买得到。</p><h3 id="手机应用"><a href="#手机应用" class="headerlink" title="手机应用"></a>手机应用</h3><h4 id="谷歌地图、JapanTransitPlanner"><a href="#谷歌地图、JapanTransitPlanner" class="headerlink" title="谷歌地图、JapanTransitPlanner"></a>谷歌地图、JapanTransitPlanner</h4><p>谷歌地图大家都知道了，但谷歌地图查询地铁换乘的时候给出的信息比较抽象。日本地铁同一条线路往往有很多不同分线，始发和终点站、停靠站都可能不同，因此可能也在不同的站台上车。然而谷歌地图上不显示分线名字，在一些大站经常找不到换乘的路线，这里就可以用后面提到的JapanTransitPlanner查询的信息作为补充。另外，在涉及换乘时，谷歌地图只会显示总票价，而后者会显示每段的票价，如果遇到需要出站换乘的话就能有个准备。不过后者的起终点只能搜索站点名，不能搜索任意地址，因此两个app只能互为补充。</p><p>另外，使用谷歌地图的时候要注意。日本部分线路会出现在不同区间叫不同名字的情况，例如下图的新宿线会突然变成京王新线，但是左侧的线条只改变了颜色，没有断开，说明是不需要下车换乘的，老老实实呆在车里就好。听说还有些线路，开到一半会把列车断成两半，分别驶往不同目的地，太神秘了……</p><p><img src="/google-maps-lines.png"></p><h4 id="食べログ（tabelog）"><a href="#食べログ（tabelog）" class="headerlink" title="食べログ（tabelog）"></a>食べログ（tabelog）</h4><p>相当于日本的大众点评，不过是付费订阅的，可以在出发前一个月内下载好然后点免费试用，记得取消订阅即可。</p><p>这个网站的评分制度和国内不同，3.5分就是数一数二的好店了，我们当时顺着3.0分的店找过去都要排大队。不过实际用起来这个app也不是很好用，因为它只会搜索指定地图区域内排名靠前的店，如果去了其中一家发现不满意，另一家可能又很远，要就近找吃的还是得用谷歌地图。</p><p>在日本最常用的应用大概就是以上了，我们在旅游过程中就没有怎么用过其他的app了。也许你还需要下载一些翻译app，谷歌翻译、DeepL都可以~</p><h3 id="现金"><a href="#现金" class="headerlink" title="现金"></a>现金</h3><p>在出发前，我以防万一取了超多现金，但在日本的大部分地方都不会特别依赖现金，很多店都支持信用卡支付（建议准备Visa或MasterCard的），便利店还支持微信支付（但是店员一般不知道WeChat为何物，我们得说QR code他们才懂）。必须用现金的场景基本只有IC卡充值、路边的饮料贩卖机、洗衣店和街机厅，以及很少数的饭店。基本上按照IC卡的花费再加上1w的备用就够了，IC卡一般一天会刷掉1000日元。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>出国旅游还需要准备流量卡或移动WiFi，18年那次我们就是用的移动WiFi，但是很不方便分头行动，所以这次我们各自买了流量卡。一般这些流量卡要比国内的漫游套餐便宜。</p><p>这次旅游还发现了一个神器——一次性内裤和袜子。贴身内衣用一次性的会方便不少！日抛还会有奇妙的满足感wwww</p><p>还有一个经验是带一些垃圾袋，日本街头几乎没有垃圾桶。</p><p>碎碎念了这么多旅游前的准备，终于可以进入正题——为期十天的日本之旅。</p><p>本文中的图片基本都是用我的索尼手机拍的，宇治那一天还有些相机拍摄的照片。这次出行还带了个玩具级的胶片相机，虽然废片率高得我头皮发麻，但也算有几张能看的~</p><h2 id="Day1-大阪"><a href="#Day1-大阪" class="headerlink" title="Day1-大阪"></a>Day1-大阪</h2><p>第一天几乎都是在路上度过，早上七点我们就从家里出发，过境到香港机场，坐香港快运抵达大阪，当晚在大阪住下。</p><p>品尝日本美食也是我们此程的一大任务，而我们的第一餐便是大阪烧。正如前文所说，我们用tabelog试着搜索了好几家大阪烧的店，来回跑了几家，门口都是排长队，而我们觉得日本当地小店就足够正宗，不需要特意挑高分餐厅，因此最终我们望着路边的招牌走进了一家大阪烧餐厅。大阪烧很好吃！</p><p><img src="/okonomiyaki.jpg" alt="大阪烧"></p><p>吃完之后，我们在附近逛了逛。道顿堀是出名的商业街，虽然我们提前请了三天假，但已经能在街上看到举着小旗、操着乡音的旅游团了。</p><p>在其中一家书店看到了アイドル的立牌。从店里的商品陈列看，アイドル、孤独摇滚都非常火。</p><p><img src="/20230926_213937.JPG"></p><p>在店门口看到了アイドル的扭蛋机，我当场抽了两发，直接出我帽子老婆！</p><p><img src="/20230926_224654.JPG"></p><h2 id="Day2-大阪、京都"><a href="#Day2-大阪、京都" class="headerlink" title="Day2-大阪、京都"></a>Day2-大阪、京都</h2><p>由于前一天晚上太晚睡了，我们第二天十点才醒来，出门后直接吃午饭了。后来的几天我们发现日本几乎没有早餐店，大部分日本人都是在家里吃早餐的，如果要在外面吃早餐就只能跑便利店了。</p><p>今天的午饭是蛋包饭。和国内的蛋包饭、滑蛋饭做法不同，日本的蛋包饭会把鸡蛋做得刚刚熟、还有些像液体的状态：</p><p><img src="/omuraisu.jpg"></p><p>下午我们在浪速日本桥附近瞎逛，这边也有一大片二次元门店，像Animate、蜜瓜以及大量卡牌店。当然，也有最近很火的MyGO：</p><p><img src="/osaka-mygo.jpg"></p><p>晚上我们在京都住下。日本晚上人烟稀少，尽管我们的住处距离京都站只有两公里不到，但晚上八点左右路上已经几乎看不到人了，路边的店面也几乎全部结束营业了。我们京都的民宿挑选得非常失败，附近便利店和地铁站都不太近。倒是附近有个永旺购物中心，我们过去逛了逛超市，意外地还看到一家琴行：</p><p><img src="/instrument-shop.jpg"></p><h2 id="Day3-京都：吹响吧，上低音号"><a href="#Day3-京都：吹响吧，上低音号" class="headerlink" title="Day3-京都：吹响吧，上低音号"></a>Day3-京都：吹响吧，上低音号</h2><p>今天是完整待在京都的第一天。</p><p>出发前往巡礼的路上，我们看到一个电话亭，这在国内是几乎绝迹的事物了，想到名侦探柯南里的经典画面，我们很有兴趣地拍了起来。</p><p>这是一位被小兰甩了而极度难过的新一（不是：</p><p><img src="/DSC06024.JPG"></p><p>19年那次，我报了公司年度旅游的关西团，在自由活动那天跑到了岚山巡礼春物，也去宇治那边看了京阿尼遭遇纵火的小黄楼。然而因为时间不够，当时未能巡礼京吹，这次得以弥补遗憾。</p><p>京吹的圣地巡礼地点集中在京阪电车的几个连续站点上，六地藏、木幡、黄壁、宇治站都有点可以去。如果会在这条线路上来回跑的话可以去买京阪电车的日票，最便宜的只要1100日元。</p><p>每个巡礼点车站都摆放了京吹的立牌：</p><p><img src="/ufooniamu.jpg"></p><p>放学回家路上、六地藏站前的人行横道路口：</p><p><img src="/cross.png"></p><p><img src="/cross-2.jpg"></p><p>京阿尼的小黄楼：</p><p><img src="/IMG_0136.JPG"></p><p>巡礼路上还有意外惊喜。本来我们打算坐公交爬上菟道高校，也就是动画中的北宇治高校的原型，但路上意外发现一家点心店门口有京吹角色的牌子。按照门口的指引，我们找到了位于不远处、正在营业的新店，没想到这家店就是动画中吹奏部常买的栗子馒头的点心店的原型！店里摆满了动画粉丝送的画，我们在里面买了一些点心吃，味道蛮不错：</p><p><img src="/20230928_151328.JPG"></p><p><img src="/1.jpg"></p><p>接下来我们乘坐公交到达了菟道高校校门前。这里的公交车半小时才有一班，而且有些站点找不到站牌，对于来旅游的我们来说不太友好。动画里久美子她们可是每天都要步行两公里到黄壁站坐地铁，真是脚力惊人（</p><p><img src="/image-20231221202327509.png"></p><p><img src="/20230928_160329.JPG"></p><p>当我们到达高校门口的时候，时间正好接近四点，不一会儿学校响起了下课铃，学生陆陆续续从学校里出来，我们跟着这群学生走下坡道，路过附近的小公园，从半坡俯瞰宇治。</p><p><img src="/2.jpg"></p><p>宇治桥，久美子大喊うまくなりたい的地方。</p><p><img src="/image-20231221203256546.png"></p><p><img src="/IMG_0182.JPG"></p><p>京吹巡礼当然少不了大吉山。虽然今天天公不作美，六点前后下起了毛毛雨，但我们还是吃着抹茶冰淇淋出发了。刚到山脚，就看到了提醒游客不要晚上登山的警示牌wwwww你们这些二次元真会给人添麻烦呢。</p><p><img src="/IMG_20230928_172526.jpg"></p><p>当然，我们也无视了警告，打着伞背着相机沿着山路往上爬。</p><p>大吉山海拔并不高，山道的坡度也不算陡，而且比较宽，并不用担心不小心摔下山。但大吉山并没有专门为旅游进行改造和维护，别说登山阶梯，连围栏都没有，山道是完全的碎石山路，我们穿着运动鞋依然需要留意脚下，小心跌倒，而且没有路灯，上山时天还没有黑，下山时就已经伸手不见五指了。我一边往上爬一边感叹久美子和丽奈穿着高跟鞋、背着乐器、打着手电就爬上来了，她们对对方有充分的信任，才能够这样夜爬大吉山，高黄万岁！！！（发疯</p><p><img src="/IMG_20230928_173207.jpg"></p><p><img src="/image-20231221202918866.png"></p><p><img src="/3.jpg"></p><p>从大吉山下来后，我们经过宇治桥前往附近的萨莉亚。日本的萨莉亚和国内的几乎没有不同，我们进来的时候还看到了高中生在里面写作业，和动画里的家庭餐厅一样~</p><p><img src="/20230928_185627.JPG"></p><p>吃完晚饭，我拖着他们跑去久世桥的BOOKOFF。之前我一直想买轻音的MUSIC HISTORY’S BOX，这是个包含十二张CD的超大专辑，包含了过往的全部收录曲。BOOKOFF是日本一家连锁中古书店，店里除了漫画小说，还有各种光盘。在其官网可以搜索到一些中古商品的库存，我正是借此找上了这家分店。</p><p>与记忆中18年在秋叶原逛过的BOOKOFF相比，这家BOOKOFF并不算大。我先自己找了找，动画周边光盘的架子只有很小一排，上面显然没有我要的东西。于是我把库存网页拿给店员看，店员也来到我们已经找过的地方，自然也是一无所获。我看着架子上的专辑，向店员补充道，这个专辑包含了十二枚光盘，店员反应过来：这是个相当大的玩意儿。于是把我们领到了另一个架子上。店员还在寻找的时候，我留意到底下的架子有一个盒子露出可爱的花纹，我抽出来之后发现正是我要找的专辑！旁边的店员小姐姐们看到后也高兴地说着“おめでとう”，太可爱了！</p><p><img src="/20230928_205125.JPG"></p><p>从BOOKOFF离开，回到了京都的酒店。今天是背着我的相机出门拍的第一天，也是最后一天，背着相机对我来说果然还是太辛苦了（</p><h2 id="Day4-京都：千恋万花、玉子市场"><a href="#Day4-京都：千恋万花、玉子市场" class="headerlink" title="Day4-京都：千恋万花、玉子市场"></a>Day4-京都：千恋万花、玉子市场</h2><p>今天的安排交给了同行的水月桑。</p><p>我们先前往二年坂、三年坂。今天已经是国内国庆长假第一天，这里游客人挤人，和前几天完全不同的光景。后来我才知道这附近有著名景点清水寺www。这附近还很适合带手信，沿路有很多小饰品和点心的店，我也在这里买了一些给朋友的手信。</p><p><img src="/4.jpg"></p><p>在游览的路上唐突看到一家广东料理：</p><p><img src="/5.jpg"></p><p>从二三年坂出来经过花见小路，意外的是大中午的花见小路一个人也没有，空荡荡的，不像是个景点。看来游客们也觉得烈日当空的花见小路没有一丁点儿氛围，19年那次我跟团来的时候正好下着小雨，倒是很有意境。</p><p>白川筋的大和桥边：</p><p><img src="/20230929_134253.JPG"></p><p>两点不到，千恋万花的巡礼就结束了，于是我们临时打算去看看玉子市场里的商店街。玉子市场商店街的原型是出町桝形商店街。在去商店街的路上会经过鸭川，这里的乌龟石头正是饼哥向玉子表白的地方：</p><p><img src="/image-20231221204315713.png"></p><p><img src="/20230929_142707.JPG"></p><p>胶片机拍下的难得一张能看的照片：</p><p><img src="/000045.JPG"></p><p>商店街的入口：</p><p><img src="/image-20231221203928207.png"></p><p><img src="/20230929_145058.JPG"></p><p>在出发前，我事先缓存了玉子市场，在来程的飞机上补了一部分玉子市场。如今走进商店街，好像真的踏进了玉子市场动画里。商店街里面的店铺都是非常日常的店，杂货店、花店、瓜果粮油等。商店街真是日本独有的奇妙风景，小小的一条街道里麻雀虽小五脏俱全，若是住在附近，日常所需都能在商店街里的店铺得到满足，商店街的拱形顶棚遮风挡雨，像是从繁忙的都市里凭空挡出一个小世界。路过这些店铺，仿佛能看到玉子从商店街这头走到那头、被邻里关心照顾的场景。</p><p><img src="/20230929_145318.JPG"></p><p><img src="/20230929_145703.JPG"></p><p>这里当然也少不了动画粉丝们留下的痕迹：</p><p><img src="/20230929_145545.JPG"></p><p><img src="/20230929_152202.JPG"></p><p>晚上，我们回到京都站，山风提到京都站开设了一家京阿尼快闪店。</p><p><img src="/20230929_184630.JPG"></p><p>当初我跑去宇治的时候正是那场事故发生后不久，在那附近的官方周边店也因此没有开门，这次在这家快闪店看到了好多周边，有感觉到京阿尼正在一点点恢复。</p><p>在店的正中央就摆设了久美子的上低音号和丽奈的小号的原型乐器。</p><p><img src="/20230929_185618.JPG"></p><p><img src="/20230929_185630.JPG"></p><p>店里挂满了精美的插画。</p><p><img src="/20230929_185103.JPG"></p><p><img src="/20230929_190556.JPG" alt="病入高黄"></p><p><img src="/20230929_185059.JPG"></p><p>当然，官方谷子的价格并不便宜，最后我咬咬牙买了冰菓的画集和两件京吹的衣服。</p><h2 id="Day5-京都、箱根：轻音少女"><a href="#Day5-京都、箱根：轻音少女" class="headerlink" title="Day5-京都、箱根：轻音少女"></a>Day5-京都、箱根：轻音少女</h2><p>第五天，我们离开住了三天的京都。</p><p>今天的行程强度很高，我们需要中午巡礼完轻音少女，然后赶JR到箱根。从京都站到丰乡小学校需要先坐到彦根，然后坐近江铁道线到丰乡站。</p><p>去往彦根的列车上人挺多，坐在旁边的伙伴看到一位有些年纪的叔叔，就给他让了座。谁知他落座之后，突然操着中文和我搭话。我并不是擅长聊天的类型，但意外能和日本人聊天也蛮有兴致，于是和他聊了起来。他问我们是不是游客、从哪里来日本、这几天都玩过了哪些地方，得知我们从京都过来后就问我们有没有去伏见稻荷大社、清水寺这些热门的景点；我也得知这位大叔曾经在中国工作了七年，期间因为出差跑过好几个城市，甚至都比我去过的城市多了。在大叔下车后，伙伴开玩笑说，果然中文没办法加密通话。</p><p>我们来到彦根后，意外地发现地铁站外有个旅游案内所，便好奇地进去看了看，原来彦根有挺多日本历史人文相关的旅游景点。因为出站看了一眼旅游案内所，我们错过了当前这班近江铁道线路，一看时刻表我们才发现这条线路是旅游观光线路，一个小时发一班！不得已我们只好顺势在这个站的便利店里解决了午饭。</p><p>近江铁道定位是观光线路，列车车厢里甚至专门有一个角落放置自行车，中间就有一个女生把自行车也推上了列车。从丰乡站下车，会马上看到一个面包店，KON要素开始出现。</p><p><img src="/20230930_121300.JPG"></p><p>这个面包店就像我们在巡礼菟道高校时遇到的点心店一样，里面挂满了KON的海报和其他周边，还有一把吉太。</p><p><img src="/20230930_121349.JPG"></p><p><img src="/20230930_121401.JPG"></p><p>我们拜托店长寄存我们的行李，然后前往丰乡小学校，这一路上不仅见不到人，连房子都不是挨在一块儿的了。看来丰乡是个普通的农村，尽管滋贺县有做旅游开发，但我想除了KON巡礼外大概不会有游客跑到这个地方来吧www</p><p>经过丰乡小学校的新址后，就来到了巡礼地点。此时小学校的外墙正在翻新维护，在走进去的路上马上看到了熟悉的雕像。</p><p><img src="/20230930_123300.JPG"></p><p><img src="/image-20231221200458979.png"></p><p><img src="/20230930_123506.JPG"></p><p>走廊、楼梯都和动画里一模一样。</p><p><img src="/image-20231221201014240.png"></p><p><img src="/20230930_123727.JPG"></p><p><img src="/image-20231221200257518.png"></p><p><img src="/20230930_124839.JPG"></p><p>社团活动室旁边的门则通往音乐室。</p><p><img src="/image-20231221200658034.png"></p><p><img src="/20230930_124346.JPG"></p><p>活动室里摆放着五小只喝茶吃点心的桌子。</p><p><img src="/20230930_124540.JPG"></p><p>而另一头，是阿梓喵观看学姐们演奏《相遇天使》的地方。</p><p><img src="/image-20231221201215584.png"></p><p><img src="/20230930_124713.JPG"></p><p>旁边还有一个小房间，摆上了所有乐器的原型。</p><p><img src="/20230930_124927.JPG"></p><p>呃，还有……</p><p><img src="/20230930_125916.JPG" alt="为什么把蓝白碗套在电风扇上啦！"></p><p>从学校主楼出来后右转，还有一栋小楼，里面摆满了KON出过的各种各样的周边，还有一些丰乡小学校的纪念品。</p><p><img src="/20230930_130556.JPG"></p><p><img src="/20230930_130621.JPG"></p><p><img src="/20230930_130714.JPG"></p><p>和阿梓喵说再见，我们匆忙从面包店取回了行李，赶往米原站乘坐JR高铁了。</p><p><img src="/20230930_132108.JPG"></p><p>到达小田原站后，我们幸运地吃到了我念叨了许久的鳗鱼饭。</p><p><img src="/20230930_173752.JPG"></p><p>我们晚上住在大平台，按照攻略我们要乘坐桃源台线公交前往，然而这趟公交坐得并不是很顺利。上车之后，公交车晃晃悠悠沿着盘山公路上升，在只有双向两车道的公路上安稳地前进，司机看起来也蛮年轻的，心里不禁佩服司机的车技如此熟练。大平台附近有两个公交站，“大平台”站和“大平台站”站，后者对应的是登山缆车的大平台站，而我们要去的是大平台。而大平台站的前一个车站是出山，这两个站之间的站距相当长，在摇摇晃晃中我放松了警惕，当我听到大平台站的到站播报后不久，才意识到下一站就是我们的目的地了，我匆忙按下下车按钮，但为时已晚，车子经过了大平台，我们只好在下一站宫之下站下车。这个站同时也是登山缆车的大平台站的下一站，因此和大平台之间的距离也相当远，不可能靠脚力前往，我们只好走到马路对面，等待下山的公交车。</p><p>我们走入酒店之后，习惯性地来了一句私密马赛的起手式，结果老板娘突然开始飙中文，原来她是台湾人。在日本玩了四五天，已经默认和周围的人都要用日语沟通了，突然和同行伙伴之外的人用中文对话还有些不太习惯。正好逮到一个会说中文的，我们问出了一个我们好奇了几天的问题：日本人吃什么早餐。老板娘说日本人一般都是在家吃早餐的，和国内吃的东西也大差不差，但总之基本不会出门找店吃，所以我们这几天几乎见不到早餐店。</p><p>酒店房间是相当元祖的和室布置，睡觉的时候需要拉开壁橱拿出床垫和被子放在榻榻米上，甚至房间的大灯也是动画中见到的方形、垂着一根拉绳开关的灯，虽然拉了一下发现拉绳只是装饰www酒店内还带有温泉，也因此没人需要交150日元的温泉税，不过这个温泉是室内的，大概只是水源确实是来自温泉水，泡起来感觉就和泡澡堂差不多，加上我本来就对泡澡兴趣不大，所以整体感受就比较一般了。</p><h2 id="Day6-箱根、镰仓：EVA、孤独摇滚"><a href="#Day6-箱根、镰仓：EVA、孤独摇滚" class="headerlink" title="Day6-箱根、镰仓：EVA、孤独摇滚"></a>Day6-箱根、镰仓：EVA、孤独摇滚</h2><p>我们来箱根当然不只是为了泡温泉，这里是EVA第三新东京市的巡礼点，同行的山风是EVA厨，但我并没有看过EVA（日常开除二籍），就跟着他逛了一圈。</p><p>前往桃源台的便利店已经开始出现EVA元素了。</p><p><img src="/20231001_111703.JPG"></p><p>在酒店的时候老板娘很热情地给我们介绍了箱根旅游的玩法，用三次元的玩法的话能玩够一天，但是我们还打算去看日落中的江之岛，因此像海盗船之类的游玩项目我们都没有碰，只是浅浅看了一眼。</p><p><img src="/20231001_122928.JPG"></p><p>在桃源台有一个纪念品商店，除了EVA相关的周边外还有很多奇奇怪怪的东西。</p><p><img src="/20231001_120628.JPG"></p><p><img src="/20231001_120640.JPG"></p><p>像是令人倍感下头的胸模饮料：</p><p><img src="/20231001_121026.JPG"></p><p>以及一些奇奇怪怪的纪念品：</p><p><img src="/20231001_120946.JPG"></p><p><img src="/20231001_121951.JPG"></p><p>在桃源台没有停留太久，我们就出发前往镰仓。</p><p>18年的时候我来过镰仓，当时只是为了来看一眼“雪之下街道”，看看被渡航老贼拿来取名字的这个地方是什么样的，那一次我们租了自行车，本来打算去江之岛上看看，但正当我们环海骑行的时候，天却开始下起小雨，所以当时并没有去成。五年过去，再度来到镰仓的时候，探访江之岛已经变成孤独摇滚圣地巡礼了。</p><p>来到镰仓后，最先让我眼前一亮的是穿行在城市街道中的电车。没想到会直接将铁轨铺设到公路上，电车和汽车并排行驶，井水不犯河水，我从窗外看着两旁的汽车擦着电车驶过。晚上拍了一张照片：</p><p><img src="/20231001_193101.JPG"></p><p>到住处放下行李后，便出发前往江之岛。尴尬的是这次没能找到租自行车的地方，我们只好步行前往。</p><p><img src="/image-20231221201443047.png"></p><p><img src="/20231001_162414.JPG"></p><p>登岛的桥入口处可以看到动画里的大楼。</p><p><img src="/image-20231221201558594.png"></p><p><img src="/20231001_163826.JPG"></p><p>从入口过桥登岛，行人需要靠右，我们一开始走的是左边，人行道走着走着断了- -</p><p>江之岛上熙熙攘攘，这就是国庆假期热门景点的含金量，我们登岛不久后就意外走散、分成两组了。我和潜水艇分别买了张鱿鱼仙贝，边吃边走，走到了台阶前，然后和屑凉一样，买了观光电梯的门票。观光电梯里平平无奇，就是普通的电扶梯，边上用屏幕放着深海游鱼的动态图案。</p><p>在半路的寺附近投币抽了个签，是个吉签，关键字是美，看来接下来是吉你太美的一年。</p><p><img src="/20231001_172231.JPG"></p><p>我和潜水艇出了观光电梯之后，没有再付费登塔远眺，在塔底的休息区喂了一阵蚊子，就楼梯下山了，从这里可以俯瞰镰仓夜景，景色还是蛮不错的。</p><p><img src="/20231001_180110.JPG"></p><h2 id="Day7：东京"><a href="#Day7：东京" class="headerlink" title="Day7：东京"></a>Day7：东京</h2><p>终于来到东京！</p><p>今天中午我们找了一家川菜馆，店长不出意外地会说中文，甚至他和厨师也是用中文对话的，在这里我们总算是吃到了蛮有辣味的麻婆豆腐。不过翻看菜单，会发现也有挺多针对日本口味本土化的菜。</p><p><img src="/20231002_123531.JPG"></p><p><img src="/20231002_123823.JPG"></p><p><img src="/20231002_124140.JPG"></p><p><img src="/20231002_125307.JPG"></p><p><img src="/20231002_125832.JPG"></p><p>抵达秋叶原后，我们找了一家甜品店，我一直想在日本尝一尝动画里那样一整杯都是水果的水果芭菲，然而一直都没有顺利吃到。这家甜品店也只有阳光玫瑰葡萄的巴菲，而且价格相当不便宜。</p><p><img src="/20231002_163836.JPG"></p><p>一走出秋叶原站，就看到了MyGO的广告。</p><p><img src="/20231002_165815.JPG"></p><p>原的浓度也是相当地高。</p><p><img src="/20231002_170232.JPG"></p><p><img src="/20231002_170319.JPG"></p><p><img src="/20231002_171156.JPG"></p><p>跑去BIC CAMERA的时候遇到了麻衣桑的立牌。</p><p><img src="/20231002_171419.JPG"></p><p>正好另一位群友也在日本，晚上我们便相约吃了个饭，吃完之后我们跑去体验了卡拉OK。作为国内纯K的常客，当然要试一试日本的KTV。群友帮忙开了包厢，进入房间后发现和动画里的布局几乎一模一样。而国内昏暗的KTV包厢不同，日本的K光线还挺阳间的，甚至感觉可以在这里写作业（不是。不过这里最大的问题在于几乎所有的歌曲都是没有原唱的！虽然曲库比国内全得多，但点歌系统难用得像是上世纪产物，几乎所有歌曲都没有伴奏，甚至还是MIDI版本的伴奏，不是原曲的编曲，只有极少数非常火的歌会收录无法消除人声的演唱会版本。没了原唱领着，我直接哑火，一点儿也唱不出来了。 </p><p><img src="/20231002_205254.JPG"></p><p>唱完K，今天的行程也基本结束，我最后跑去秋叶原站打卡了啤酒烧烤的三周年广告，位置非常好找，进入二楼就能看到。</p><p><img src="/20231002_223109.JPG"></p><h2 id="Day08：东京：中野MANDARAKE、御茶之水"><a href="#Day08：东京：中野MANDARAKE、御茶之水" class="headerlink" title="Day08：东京：中野MANDARAKE、御茶之水"></a>Day08：东京：中野MANDARAKE、御茶之水</h2><p>在日本呆了一周，我已经慢慢习惯了日语环境，一个人跑出去玩也没有什么心理负担了，大家刚到秋叶原，便分头行动了。</p><p>我早上跑去了中野的MANDARAKE，听朋友说这里有很多中古店。由于来得太早，还有蛮多小一些的店没有开门，我在比较大的几家店里转了转，这里有中古店，也不乏全新品的店，小说、漫画、画集都有。</p><p>现在的转生花样已经这么多了吗：</p><p><img src="/20231003_121253.JPG"></p><p>几乎每家店都会有一个区域摆放近期动画化的热门作品。MF GHOST是头文字D作者的新作，也是10月新番，人在日本的时候还没有开始看，回国后开始追才发现动画剧情设定在箱根和镰仓，不知不觉就完成了一些巡礼。</p><p><img src="/20231003_122027.JPG"></p><p>除了书，这里还有一些汽车模型店，就是价格感人。</p><p><img src="/20231003_124420.JPG"></p><p>下午和潜水艇来到了御茶之水，乐器人的天堂！</p><p><img src="/20231003_134801.JPG"></p><p><img src="/20231003_135207.JPG"></p><p>在其中一家店里看到了番茄炒蛋！虽然是中古，但是这个标价非常眼熟呢（</p><p><img src="/20231003_135544.JPG"></p><p>其中一家店有贝斯专门馆，进来后可以看到好几面墙的贝斯！口水要流下来了。</p><p><img src="/20231003_142548.JPG"></p><p><img src="/20231003_142558.JPG"></p><p>我突发奇想，搜索了一下ESP，搜到一家Workshop，前去造访发现是一家非常小的门店。这家店深处还有一个高端琴区域，我很识相地没有迈入。我和潜水艇看了一会儿，就有一个会中文的店员过来搭话了，我很认真地报上了预算和需求，幸好店里并没有很符合我审美和钱包的琴，不然可就不好收场了（</p><p><img src="/20231003_150013.JPG"></p><p>后来和朋友聊了才知道，附近有一家BIG BOSS才是ESP的大本营，难怪这家角落的Workshop这么小。</p><p>潜水艇也在这边买到了口琴，下午也过去了大半，我们又回到了秋叶原。距离饭点还有点时间，我找到了GIGO娃娃机馆消磨时间。我兑换了5000日元的硬币，在一堆娃娃机里，找到一台有帽子玩偶的娃娃机作为我的第一个目标。就像国内的机器一样，这里的夹子也是软趴趴的，夹了几次都上不来，突然这时候走来一个帅气的店员小哥，指着机器里的帽子玩偶问我是不是想要这个，我点点头，他掏出钥匙打开了机器，把一个帽子玩偶放在了掉落口的边缘，然后给我做出“请享用吧”的动作。接下来再夹几次，玩偶就被夹子扒拉了下来。小哥人真好！</p><p><img src="/20231003_155541.JPG"></p><p>此时还剩下不少硬币，我找到了之前朋友大展身手的啤酒烧烤豆豆眼娃娃机，败完了剩下的所有硬币。说好的很好夹呢！我把硬币全部用完也没有夹出来一只，抽卡沉船的感觉不是太好呢（</p><p>离开娃娃机后就是匆忙的代购时间。先是在ANIMATE的啤酒烧烤区稍微买了点儿，吃完饭之后我又脱离队伍跑去蜜瓜，帮朋友带了水魔的本子，顺带把春物的妄言录和其他几卷缺的新卷买了。接着跑到SUNDRUG，帮朋友找洗面奶，本以为洗面奶很好买，但没想到这几天跑了松本清、堂吉诃德都没有找到，在SUNDRUG自然最后也是没有买到。让本阴湿宅男跑去药妆店买东西实在是地狱难度了，我完全理解不了药妆店里的字符哪些是品牌、哪些是品类，前一个柜台还是浅色的瓶瓶罐罐，一转角就变成了浓艳色彩的口红专柜。此时临近闭店，除了一个忙碌的收银员外也找不到其他可以寻求帮忙的店员了，在里面迷茫了十几分钟后只能抓起醒目的EVE止痛药（也是帮朋友买的）灰溜溜地去买单了。</p><p>因为正好在池袋附近，而且之前还答应帮另外的朋友看看手办，所以九点时分我来到了池袋。</p><p><img src="/20231003_204359.JPG"></p><p>此时大部分的店其实都快要关门了，我找到其中一栋楼的手办区，找了一会儿也没有找到目标。倒是看到了大量水魔的胶。</p><p><img src="/20231003_205924.JPG"></p><p><img src="/20231003_205930.JPG"></p><p>另外的惊喜是，在秋叶原不知为何没有找到的四驱车，在这里看到了一整个的专柜！</p><p><img src="/20231003_204844.JPG"></p><p>纠结了很久之后，我抱着一盒音速冲锋满意地离开。</p><h2 id="Day9-新宿、池袋：言叶之庭、MyGO"><a href="#Day9-新宿、池袋：言叶之庭、MyGO" class="headerlink" title="Day9-新宿、池袋：言叶之庭、MyGO!!!!!"></a>Day9-新宿、池袋：言叶之庭、MyGO!!!!!</h2><p>日本之旅的倒数第二天，小伙伴都出去附近觅食了，我起得晚了些，收拾好出门时发现今天的天气也不太好，地上还有下过雨的痕迹，只穿一件短袖出门凉飕飕的。</p><p>今天早上的目的地是池袋的朗玩，开mai！因为来得太早了，一个人都没有。</p><p><img src="/20231004_100314.JPG"></p><p>日本的mai只需要100日元一局，经历了前两天夹娃娃的惨剧后这个价格简直相当于不要钱，而且这里的曲库也很新，甚至有啤酒烧烤的书下曲。在这里爽打了一个小时后，似乎该和小伙伴汇合吃午饭了，我只能开溜。</p><p>午饭我们在新宿站附近的地下商场解决，吃了一个荞麦面，但没想到我点的是冷的，不习惯吃冷食的我硬着头皮赶紧吃完了。</p><p>新宿站附近的新宿御苑是言叶之庭的圣地巡礼点。这个公园同时也是日本园林的参观景点，因此虽然下着小雨，仍然有不少游客前来游览，其内的景色也确实不错，不过我们并没有完整地逛完，所以并没有感受到日本园林的魅力。</p><p><img src="/20231004_122924.JPG"></p><p>顺便当了一把模特，给潜水艇拍了一张。</p><p><img src="/image-20231221203654206.png"></p><p><img src="/DSC_2629.jpg"></p><p><img src="/20231004_124723.JPG"></p><p>从新宿御苑出来，我们往池袋跑，进行本次旅途的最后一站圣地巡礼：MyGO圣地巡礼。</p><p>MyGO的圣地巡礼主要集中在池袋、Sunshine大楼和飞鸟山公园。</p><p>首先是初华和祥子见面的小桥。看动画的时候以为是某处小河上的普通小桥，实际来巡礼时才知道这是池袋站相连的购物中心顶楼的空中花园。</p><p><img src="/image-20231221205251067.png"></p><p><img src="/20231004_133923.JPG"></p><p><img src="/20231004_134031.JPG"></p><p><img src="/20231004_134006.JPG"></p><p>主视觉图中的那个路口：</p><p><img src="/1280px-It's_MyGO_KV2.png"></p><p><img src="/20231004_134819.JPG"></p><p>这附近有一个娃娃机的店，进来上楼就可以看到MyGO的立牌。</p><p><img src="/20231004_135257.JPG"></p><p>而动画中的RING live house，实际上是一家优衣库。正好冷得不行，我进去买了两件卫衣套上出来了。</p><p><img src="/image-20231221204852562.png"></p><p><img src="/20231004_135515.JPG"></p><p>另一张视觉图里的斑马线：</p><p><img src="/1280px-It's_MyGO_KV.jpg"></p><p><img src="/20231004_150837.JPG"></p><p>池袋附近的巡礼点基本走完，在路上甚至看到了一些国内能看到的店：</p><p><img src="/20231004_151127.JPG"></p><p>正好大家都走累了，我们就在附近找了一家甜品咖啡厅稍作休息。这家店叫コメダ珈琲店，我们点的点心味道很不错、价格也合适，推荐！</p><p><img src="/20231004_153907.JPG"></p><p>吃完之后，我忍不住走进了池袋的ANIMATE，这家A店有整整9层楼，非常能逛，昨天在秋叶原没有买尽兴，这次直接狂热购入，顺便在群里突击开了扫街，帮群友也买了一堆东西。</p><p>当我们从A店出来，天又开始下起小雨，但我们还需要去买个大号的行李箱，还得吃晚饭，剩下的巡礼点看起来是注定来不及跑了。我们勉强撑着伞跑到了Sunshine大楼，找到了顶楼的水族馆。按照攻略，水族馆和星象馆是在一起的，但是当我们来到入口的时候已经找不到MyGO的立牌了，入口的样子也和动画中不同了，巡礼大失败！我们勉强从建筑中走出，绕过半个停车场，来到了anon英国留学失败的事情被暴露的地方。</p><p><img src="/image-20231221205728698.png"></p><p><img src="/IMG_20231004_180926.jpg"></p><p>继续走几步就能看到斜楼梯，也就是灯宝和爱音手牵手从水族馆中跑出来后见到rikki的地方（扭曲之魂开始复苏</p><p>此时我的手机已经电量告急，相机都无法启动，大家还提着A店买的东西撑着伞，手忙脚乱地拍下几张照片后，MyGO的巡礼就此结束了。</p><p><img src="/image-20231221210402074.png"></p><p><img src="/IMG_20231004_181118.jpg"></p><p>这之后，山风和水月先行前往群友推荐的寿喜烧店，我独自跑去那附近的药妆店，打算最后一次帮朋友找一找洗面奶，自然也是无功而返，在附近的堂吉诃德帮另外的朋友找香烟也没找到，看来注定有些任务无法交付了。</p><p>这时候水月他们发来消息，说那家店不是我们想象中的寿喜烧，建议我们另外找吃的，而潜水艇也买好了行李箱正在过来，于是我们一合计，找到了附近一家“寿喜烧自助”。</p><p>这家店进来后还需要排队半个多小时，这也是我们来日本吃的那么多顿里第一次排队等位。等轮到我们后，我们翻着菜单，最后竟然点了个鸳鸯锅。后知后觉的我后来才意识到来寿喜烧自助餐厅点了个鸳鸯锅是否有点离谱了，不过当时我们完全不觉得有问题，爽吃牛肉。</p><p>这家店也是我们见过的最IoT的店，店里的餐品都是通过机器人自动送达座位的，这在国内早已普及了，但我们这几天吃的饭馆很少有这样大的店面，所以直到这顿才有这样的待遇。</p><p><img src="/20231004_210759.JPG"></p><p>由于受胃食管反流折磨，我吃到八分饱就塞不下去了，潜水艇直接表示“没事我还能吃”，又咵咵狂点，而且真的全都吃完了！</p><p>这顿和牛火锅自助人均只要三百多人民币，得到了我和潜水艇的一致好评。</p><h2 id="Day10：返程"><a href="#Day10：返程" class="headerlink" title="Day10：返程"></a>Day10：返程</h2><p>这十天的日本旅程就像学生时代的寒暑假，刚开始放的时候觉得假期好漫长，但最后几天却像是只要眨眨眼日历就要翻过一页。</p><p>就像第一天一样，最后一天也是从睁眼开始就在交通中度过。早上十点醒来，在地铁口吃了一顿松屋，然后乘坐Skyliner快线前往成田机场。Skyliner从日暮里站到机场必须购买特急券，特急券和车票是分开算的，我在一脸懵逼中让工作人员帮我充值了IC卡，然后刷卡进站，当我从机场出站后，IC卡里正好不足100日元了。</p><p>机场的餐厅自然不能便宜，我们转了一圈，最后还是投向吉野家的怀抱。顺带一提，从我到日本就心心念念的超豪华水果巴菲最后竟然是在机场才得以看到，可惜这个价格让我望而却步。</p><p><img src="/20231005_140315.JPG"></p><p>到达香港机场时已是七点半，从机场返回内地可以乘坐轮渡，但是对于有托运行李的旅客，需要提前一个半小时落地，因此我可能要在机场等待一个多小时。此时的我荒唐地认为自行乘坐地铁到罗湖最终会比在这里干等更快回到家，而这成为这趟旅途令人不堪回首的句号。</p><p>潜水艇在秋叶原买的28寸特价行李箱里装满了我们四个人的几乎所有周边，这其中还有漫画小说、麻将谷子这样密度大的东西，最后的重量达到了25kg。而这个箱子将由我独自带回家。大概特价行李箱的品质并不能太过依赖，但我还在港铁里奔走的时候，我就发现这个行李箱的轮子有些不堪重负了，时不时就会卡住。而此时的我还背着塞满的东西的双肩包和一个无处放置只能挂在身上的相机包，这样一副模样从机场一路换乘到罗湖口岸过关，过关之后我已身心俱疲，尽管只要坐上一号线就能直达我家，但我还是选择打车，十一点瘫坐在后座上，后悔自己选择了这个最折磨自己的方案。</p><p>回家后的第二天，开始整理小伙伴们和我自己的购物成果。</p><p>KON的专辑，满满十二张CD，其中还包含两本画册：</p><p><img src="/20231006_134236.JPG"></p><p>其他的东西铺满了我的小桌子：</p><p><img src="/20231006_142406.JPG"></p><p>四驱车也在次日晚上拼完：</p><p><img src="/20231006_233242.JPG"></p><p>以及在京都站购买的病入高黄线稿衣服：</p><p><img src="/20231008_235051.JPG"></p><p>回国之后，由于各种杂事缠身，这篇游记迟迟没有动笔，到此刻写完已经是十二月中旬，翻看之前的照片回想当时的所见所闻，这是一趟非常充实、令我相当满意的旅行。在规划路线的时候，我一度以为自己已经失去了对动画的热情，翻动这两年看过的动画清单却不怎么能提起圣地巡礼的兴趣，甚至担心这趟旅行没有内容可以填充，但实际的旅途中仍然被迫特种兵，塞满了时间表也不能说毫无遗憾，在书写这篇长文的时候才发现那些买买买的片段才是最为乏善可陈的，不论是日本当地的美食、圣地巡礼的打卡景点和一路上顺带体验到的风土人情都令我觉得不虚此行。</p><p>此后的新番也变得更令人期待了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qiankun微应用项目中的路由拦截</title>
    <link href="/2022/08/23/intercept-route-in-qiankun-project/"/>
    <url>/2022/08/23/intercept-route-in-qiankun-project/</url>
    
    <content type="html"><![CDATA[<p>在应用了qiankun的微应用架构项目中，路由的处理有时候会出问题。我们部门的项目使用了qiankun框架，父应用使用的是Vue 2 + Vue Router，子应用使用的是React + React Router。</p><h2 id="路由跳转拦截"><a href="#路由跳转拦截" class="headerlink" title="路由跳转拦截"></a>路由跳转拦截</h2><p>在父应用中，一个非常常见的场景是路由拦截，也就是在用户有未保存的内容的时候跳转到其他路由，需要阻止用户并弹出提示。</p><p>在Vue项目中，我们直接使用Vue Router提供的<code>beforeRouteLeave</code>钩子，在其中拦截即可。然而如果是子应用需要拦截，那么就没那么容易了，毕竟子应用里无法干预父应用里的路由组件。因此，我们在子应用中通过props传入的回调通知父应用自己的拦截请求，在父应用中拦截。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Main app (Vue)</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">shouldConfirmBeforeNavigate</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">shouldConfirmBeforeNavigate</span>) &#123;<br>      <span class="hljs-comment">// Show confirm dialog...</span><br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">registerMicroApps</span>([<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;child-app&#x27;</span>,<br>        <span class="hljs-attr">props</span>: &#123;<br>          <span class="hljs-attr">onEditStateChange</span>: <span class="hljs-function">(<span class="hljs-params">unsaved: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">shouldConfirmBeforeNavigate</span> = unsaved;<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-comment">// Other config...</span><br>      &#125;,<br>    ]);<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="子应用白屏问题"><a href="#子应用白屏问题" class="headerlink" title="子应用白屏问题"></a>子应用白屏问题</h2><p>考虑如下场景：应用使用hash模式路由，路由A对应子应用中的某个页面，路由B对应非子应用的父应用某个页面，用户当前进入A并进入了编辑态，然后点击父应用中的某个<code>&lt;a&gt;</code>标签跳转到了路由B。此时父应用的Vue Router会监听<code>hashchange</code>事件，阻止页面跳转，并弹出确认弹窗。然而此时我们会发现容器内的子应用区域变成了白屏。</p><p>出现这个问题的原因在于，子应用中的React Router也监听了<code>hashchange</code>事件，在用户点击<code>&lt;a&gt;</code>标签的时候，虽然父应用中的Vue Router进行了拦截，但浏览器的地址栏仍然已经变成了路由B的路径，对应的<code>hashchange</code>事件也已经被发出并被子应用监听了。子应用中没有路由B对应的页面，因此会渲染成白屏。</p><h2 id="解决路由拦截"><a href="#解决路由拦截" class="headerlink" title="解决路由拦截(&lt;router-link&gt;)"></a>解决路由拦截(<code>&lt;router-link&gt;</code>)</h2><p>要解决上述问题，就需要在拦截路由的时候不要发出<code>hashchange</code>事件，而最快的办法就是使用Vue Router提供的<code>&lt;router-link&gt;</code>组件。使用该组件后，用户点击时如果需要拦截路由，Vue Router会阻止URL中hash的变更和<code>hashchange</code>事件的触发。那么Vue Router是怎么实现的呢？我们来看看<code>&lt;router-link&gt;</code>组件的源码（以3.4.3版本为例，代码摘录有省略）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/components/link.js</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;RouterLink&#x27;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">to</span>: &#123;<br>      <span class="hljs-attr">type</span>: toTypes,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-attr">tag</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;a&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// Omitted...</span><br>  &#125;,<br>  render (<span class="hljs-attr">h</span>: <span class="hljs-title class_">Function</span>) &#123;<br>    <span class="hljs-keyword">const</span> router = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span><br>    <span class="hljs-keyword">const</span> current = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span><br>    <span class="hljs-keyword">const</span> &#123; location, route, href &#125; = router.<span class="hljs-title function_">resolve</span>(<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span>,<br>      current,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">append</span><br>    )<br><br>    <span class="hljs-comment">// Omitted</span><br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = e =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">guardEvent</span>(e)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">replace</span>) &#123;<br>          router.<span class="hljs-title function_">replace</span>(location, noop)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          router.<span class="hljs-title function_">push</span>(location, noop)<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> on = &#123; <span class="hljs-attr">click</span>: guardEvent &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">event</span>)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">event</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        on[e] = handler<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      on[<span class="hljs-variable language_">this</span>.<span class="hljs-property">event</span>] = handler<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">data</span>: any = &#123; <span class="hljs-attr">class</span>: classes &#125;<br><br>    <span class="hljs-comment">// Omitted...</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span> === <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>      data.<span class="hljs-property">on</span> = on<br>      data.<span class="hljs-property">attrs</span> = &#123; href, <span class="hljs-string">&#x27;aria-current&#x27;</span>: ariaCurrentValue &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// Omitted...</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>, data, <span class="hljs-variable language_">this</span>.<span class="hljs-property">$slots</span>.<span class="hljs-property">default</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">guardEvent</span> (e) &#123;<br>  <span class="hljs-comment">// don&#x27;t redirect with control keys</span><br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">metaKey</span> || e.<span class="hljs-property">altKey</span> || e.<span class="hljs-property">ctrlKey</span> || e.<span class="hljs-property">shiftKey</span>) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// don&#x27;t redirect when preventDefault called</span><br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">defaultPrevented</span>) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// don&#x27;t redirect on right click</span><br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">button</span> !== <span class="hljs-literal">undefined</span> &amp;&amp; e.<span class="hljs-property">button</span> !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span><br>  <span class="hljs-comment">// don&#x27;t redirect if `target=&quot;_blank&quot;`</span><br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">currentTarget</span> &amp;&amp; e.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">getAttribute</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = e.<span class="hljs-property">currentTarget</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;target&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/\b_blank\b/i</span>.<span class="hljs-title function_">test</span>(target)) <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-comment">// this may be a Weex event which doesn&#x27;t have this method</span><br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">preventDefault</span>) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>()<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可见默认情况下<code>&lt;router-link&gt;</code>渲染出来的也是一个<code>&lt;a&gt;</code>标签，但是这个<code>&lt;a&gt;</code>标签被点击时，触发的默认行为在<code>guardEvent</code>中被<code>preventDefault</code>了，正是这个调用阻止了URL的改变和<code>hashchange</code>事件的触发。后续的逻辑就是调用<code>VueRouter</code>实例的<code>replace</code>或<code>push</code>函数手动跳转了。</p><h2 id="子应用内路由跳转问题"><a href="#子应用内路由跳转问题" class="headerlink" title="子应用内路由跳转问题"></a>子应用内路由跳转问题</h2><p>上述方法带来了一个新的问题：在子应用内无法跳转路由了。</p><p>考虑这样的场景：父应用上有两个<code>&lt;router-link&gt;</code>，分别对应子应用内的路由A和B。当前用户在路由A，用户点击<code>&lt;router-link&gt;</code>跳转到了路由B。此时我们会发现，子应用内仍然是路由A的页面！</p><p>这个问题在qiankun已经有对应的<a href="https://github.com/umijs/qiankun/issues/1199">issue</a>，其原因为：当使用Vue Router提供的API来跳转路由时（这也是<code>&lt;router-link&gt;</code>内的实现方式），Vue Router会判断当前浏览器是否支持HTML5 Browser History API，如果支持，那么就不会通过修改Location href的方式修改hash，而是直接调用对应的<code>pushState</code>、<code>replaceState</code>函数来跳转路由，而这种跳转方式虽然会修改地址栏URL，但是不会触发<code>hashchange</code>事件！</p><p>原issue中也有人给出了<a href="https://github.com/umijs/qiankun/issues/1199#issuecomment-818740774">解决方案</a>：</p><blockquote><p>目前可用的解决方案：</p><ol><li>将 vue 主应用中的 Link 超链方式替换成原生的 a 标签，从而触发浏览器的 hashchange</li><li>主应用手动监听路由变更，同时手动触发 hashchange 事件</li><li>主应用跟子应用都改用 browser history 模式</li></ol></blockquote><p>显然，根据前面的描述，我们不可能再用回原生的<code>&lt;a&gt;</code>标签；而我们的项目目前也无法突然迁移到Browser History API，因此只有第二条路可以走，实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// SiderMenu.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">watch</span>: &#123;<br>    $route(route, oldRoute) &#123;<br>      <span class="hljs-keyword">if</span> (route.<span class="hljs-property">fullPath</span> !== oldRoute?.<span class="hljs-property">fullPath</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; href &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>;<br>        <span class="hljs-keyword">const</span> baseUrl = href.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;#&#x27;</span>) !== -<span class="hljs-number">1</span> ? href.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, href.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;#&#x27;</span>)) : href;<br>        <span class="hljs-keyword">const</span> oldURL = <span class="hljs-string">`<span class="hljs-subst">$&#123;baseUrl&#125;</span>#<span class="hljs-subst">$&#123;oldRoute?.fullPath || <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>`</span>;<br>        <span class="hljs-keyword">const</span> newURL = <span class="hljs-string">`<span class="hljs-subst">$&#123;baseUrl&#125;</span>#<span class="hljs-subst">$&#123;route.fullPath || <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>`</span>;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">dispatchEvent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashChangeEvent</span>(<span class="hljs-string">&#x27;hashchange&#x27;</span>, &#123; oldURL, newURL &#125;));<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="EXTRA：使用slot的场景"><a href="#EXTRA：使用slot的场景" class="headerlink" title="EXTRA：使用slot的场景"></a>EXTRA：使用slot的场景</h2><p>到这里，qiankun场景下的路由拦截问题已经解决完毕，但对我手里这个项目来说，到上面这一步还没有结束。</p><p>我们有一个路由页面，<code>&lt;router-link&gt;</code>上使用的路由是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name: &#x27;route-books&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    params: &#123; shelfId: &#x27;0&#x27; &#125;,</span></span><br><span class="hljs-string"><span class="hljs-tag">  &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span>Books<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到点击时<code>shelfId</code>参数会设置为<code>0</code>，而实际上，该路由对应的页面组件在<code>created</code>的时候就会执行初始化逻辑，获取到当前用户的shelfId，然后修改当前路由的<code>shelfId</code>参数。如果用户停留在这个页面的时候再点击一次链接会怎样？会把URL里的<code>shelfId</code>参数重新修改为<code>0</code>！根据Vue Router的文档，<a href="https://v3.router.vuejs.org/guide/essentials/dynamic-matching.html#reacting-to-params-changes">路由仅有参数变化的时候，组件是不会销毁重建的</a>。这就意味着此时<code>created</code>中的初始化逻辑不会被重新执行，而该组件中又有很多其它地方的逻辑会直接从<code>$route.params.shelfId</code>中获取shelfId，这就会带来问题。</p><p>其中一种解决方式当然是按照上述文档中推荐的，去监听参数变更、重新调用接口拉取用户的shelfId，但用户只是点击了一下当前路由就触发一次请求未免有些浪费，因此我们选择的是直接屏蔽重复的路由跳转。</p><p>如何屏蔽重复的路由跳转呢？</p><p>如果没有使用scoped slot，那么直接在<code>&lt;router-link&gt;</code>组件内部的<code>&lt;a&gt;</code>标签中增加<code>click</code>事件监听并<code>preventDefault</code>即可，<code>&lt;router-link&gt;</code>组件会自动追加他自带的<code>click</code>事件到后面。<code>&lt;router-link&gt;</code>的逻辑如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/components/link.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  render () &#123;<br>    <span class="hljs-comment">// Omitted...</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span> === <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>      data.<span class="hljs-property">on</span> = on<br>      data.<span class="hljs-property">attrs</span> = &#123; href, <span class="hljs-string">&#x27;aria-current&#x27;</span>: ariaCurrentValue &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// find the first &lt;a&gt; child and apply listener and href</span><br>      <span class="hljs-keyword">const</span> a = <span class="hljs-title function_">findAnchor</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$slots</span>.<span class="hljs-property">default</span>)<br>      <span class="hljs-keyword">if</span> (a) &#123;<br>        <span class="hljs-comment">// in case the &lt;a&gt; is a static node</span><br>        a.<span class="hljs-property">isStatic</span> = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">const</span> aData = (a.<span class="hljs-property">data</span> = <span class="hljs-title function_">extend</span>(&#123;&#125;, a.<span class="hljs-property">data</span>))<br>        aData.<span class="hljs-property">on</span> = aData.<span class="hljs-property">on</span> || &#123;&#125;<br>        <span class="hljs-comment">// transform existing events in both objects into arrays so we can push later</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> event <span class="hljs-keyword">in</span> aData.<span class="hljs-property">on</span>) &#123;<br>          <span class="hljs-keyword">const</span> handler = aData.<span class="hljs-property">on</span>[event]<br>          <span class="hljs-keyword">if</span> (event <span class="hljs-keyword">in</span> on) &#123;<br>            aData.<span class="hljs-property">on</span>[event] = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(handler) ? handler : [handler]<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// append new listeners for router-link</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> event <span class="hljs-keyword">in</span> on) &#123;<br>          <span class="hljs-keyword">if</span> (event <span class="hljs-keyword">in</span> aData.<span class="hljs-property">on</span>) &#123;<br>            <span class="hljs-comment">// on[event] is always a function</span><br>            aData.<span class="hljs-property">on</span>[event].<span class="hljs-title function_">push</span>(on[event])<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            aData.<span class="hljs-property">on</span>[event] = handler<br>          &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> aAttrs = (a.<span class="hljs-property">data</span>.<span class="hljs-property">attrs</span> = <span class="hljs-title function_">extend</span>(&#123;&#125;, a.<span class="hljs-property">data</span>.<span class="hljs-property">attrs</span>))<br>        aAttrs.<span class="hljs-property">href</span> = href<br>        aAttrs[<span class="hljs-string">&#x27;aria-current&#x27;</span>] = ariaCurrentValue<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// doesn&#x27;t have &lt;a&gt; child, apply listener to self</span><br>        data.<span class="hljs-property">on</span> = on<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>, data, <span class="hljs-variable language_">this</span>.<span class="hljs-property">$slots</span>.<span class="hljs-property">default</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此我们这样写就可以：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name: &#x27;route-books&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    params: &#123; shelfId: &#x27;0&#x27; &#125;,</span></span><br><span class="hljs-string"><span class="hljs-tag">  &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;(e) =&gt; $route.name === &#x27;route-books&#x27; &amp;&amp; e.preventDefault()&quot;</span>&gt;</span>Books<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而如果使用了scoped slot，那么就需要手动处理点击逻辑了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name: &#x27;route-books&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    params: &#123; shelfId: &#x27;0&#x27; &#125;,</span></span><br><span class="hljs-string"><span class="hljs-tag">  &#125;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; href, isActive, isExactActive, route, navigate &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;href&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">      &#x27;router-link-active&#x27;: isActive || $route.name == &#x27;route-books&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">      &#x27;router-link-exact-active&#x27;: isExactActive,</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#125;&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;(e) =&gt; &#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">      if (&#x27;route-books&#x27; !== this.$route.name) &#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">        navigate(e);</span></span><br><span class="hljs-string"><span class="hljs-tag">      &#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">      e.preventDefault();</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#125;&quot;</span></span><br><span class="hljs-tag">  &gt;</span>Books<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要注意，点击事件中：</p><ul><li>必须调用<code>e.preventDefault()</code>，因为我们的<code>click</code>事件是放在<code>&lt;a&gt;</code>标签的，如前面解释的，需要用这种方式屏蔽<code>hashchange</code>事件；</li><li>调用<code>e.preventDefault()</code>必须在<code>navigate</code>调用之后，否则在<code>guardEvent</code>中会被拦截掉。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在Windows上编译Leaf Android</title>
    <link href="/2021/05/04/build-leaf-android-on-windows/"/>
    <url>/2021/05/04/build-leaf-android-on-windows/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/eycorsican/leaf">Leaf</a>是一款使用Rust编写的跨平台代理框架，作者同时也提供了Android上运行的demo工程。最近半个月，经过不懈努力，我总算也把Leaf在我的手机上跑起来了，这里记录下中间遇到的各种坑（当然，会省略大量瞎搜索、瞎看代码的过程）。</p><h2 id="在Windows上交叉编译Leaf"><a href="#在Windows上交叉编译Leaf" class="headerlink" title="在Windows上交叉编译Leaf"></a>在Windows上交叉编译Leaf</h2><h3 id="bindgen编译时libclang缺失：其一"><a href="#bindgen编译时libclang缺失：其一" class="headerlink" title="bindgen编译时libclang缺失：其一"></a>bindgen编译时libclang缺失：其一</h3><p>Leaf作者推荐在Linux机器上编译Leaf，而我平时用Windows笔记本多一些，因此尝试并最终摸索出了在Windows上编译的方法。</p><p>首先，安装Rust工具链、Android SDK和Android NDK，添加<code>aarch64-linux-android</code>和<code>x86_64-linux-android</code>target，这里不赘述。</p><p>安装完毕之后，参考作者提供的<code>build.sh</code>，我们首先需要设置交叉编译的target对应的linker和ar工具的路径。这些工具都来自于NDK，注意虽然作者给出的来自Mozilla的教程中提到这些工具需要使用NDK中的<code>make_standalone_toolchain.py</code>工具来生成，但2021年的我们可以安装r19或更高版本的NDK，这些版本的NDK中已经有了针对每个API预编译的工具链，以API 23为例，我需要指定以下环境变量：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$Env:CARGO_TARGET_AARCH64_LINUX_ANDROID_AR</span> = <span class="hljs-string">&#x27;C:\Users\Perqin\AppData\Local\Android\Sdk\ndk\21.1.6352462\toolchains\llvm\prebuilt\windows-x86_64\bin\aarch64-linux-android-ar.exe&#x27;</span><br><span class="hljs-variable">$Env:CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER</span> = <span class="hljs-string">&#x27;C:\Users\Perqin\AppData\Local\Android\Sdk\ndk\21.1.6352462\toolchains\llvm\prebuilt\windows-x86_64\bin\aarch64-linux-android23-clang.cmd&#x27;</span><br></code></pre></td></tr></table></figure><p>需要注意工具的后缀（exe和cmd），谷歌在Windows版本的NDK中同时放了Windows和Linux的clang可执行程序。</p><blockquote><p>关于API级别的选择，这里应该选择你的Android项目的minSdkVersion，也就是最低支持版本的NDK，这样才能保证不会链接到高版本Android上才有定义的函数和变量。</p></blockquote><p>接下来运行编译命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cargo build <span class="hljs-params">--target</span> aarch64-linux-android <span class="hljs-params">--no-default-features</span> <span class="hljs-params">--features</span> <span class="hljs-string">&quot;leaf/default-ring&quot;</span> <span class="hljs-params">--release</span><br></code></pre></td></tr></table></figure><p>不出意外的话此时编译会失败，报找不到libclang的错误。</p><p>这是因为Leaf使用了<a href="https://github.com/rust-lang/rust-bindgen">bindgen</a>来生成bindings，而bindgen依赖clang提供的libclang动态链接库来解析c&#x2F;cpp文件里的内容。</p><p>在Linux中打开NDK的LLVM工具链，会发现libclang是存在的：</p><p><img src="/image-20210504223012028.png"></p><p>而Windows版本的NDK里居然没有：</p><p><img src="/image-20210504223158768.png"></p><p>我在NDK的仓库里提了<a href="https://github.com/android/ndk/issues/1491">issue</a>，得到的答复是：Linux上的libclang是送你的，我们本来就不准备提供这些玩意儿。</p><p><strong>如果你只是需要顺利编译的话，不需要跟着我踩下面的坑，你可以直接跳过下面的配置部分，阅读《bindgen编译时libclang缺失：其二》章节。</strong></p><p>好在Clang本身就是支持交叉编译的，因此我们只需要自己安装一套就行了。我一开始安装的是Visual Studio里的版本，安装后将其lib路径指定到<code>LIBCLANG_PATH</code>中即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$Env:LIBCLANG_PATH</span> = <span class="hljs-string">&#x27;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\Llvm\x64\lib&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意选择x64目录下的。</p></blockquote><p>但是谷歌在NDK里带的Clang还有一定程度的魔改，其实主要是增加了Android相关target的支持，也就是默认指定了一些include路径，而VS中提供的Clang当然没有这些配置，因此我们需要将这些配置也加上。</p><p>我们可以先运行NDK中的clang，随便编译一个文件，带上<code>-v</code>参数看看它带了什么路径：</p><p><img src="/image-20210504224300456.png"></p><p>然后我们就可以通过<code>BINDGEN_EXTRA_CLANG_ARGS</code>这个环境变量将需要额外指定给Clang的参数带进去。在编译Leaf的时候实际上只用到了<code>&lt;android/log.h&gt;</code>，所以不需要那么多路径，我这里是这样指定的（其中<code>ndkLlvmRoot</code>变量的值是NDK中LLVM工具链的路径）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$Env:BINDGEN_EXTRA_CLANG_ARGS</span> = <span class="hljs-string">&quot;--target=aarch64-linux-android23 -isystem &#x27;<span class="hljs-variable">$ndkLlvmRoot</span>\sysroot\usr\include&#x27; -isystem &#x27;<span class="hljs-variable">$ndkLlvmRoot</span>\lib64\clang\11.0.5\include&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p>到这里就可以在Windows上顺利编译出libleafandroid.so了。</p><h3 id="修复Leaf在Windows下不构建lwip"><a href="#修复Leaf在Windows下不构建lwip" class="headerlink" title="修复Leaf在Windows下不构建lwip"></a>修复Leaf在Windows下不构建lwip</h3><p>在编译成功拿到libleafandroid.so之后，我放进Android项目里跑起来，结果发现一运行就崩溃了，报找不到符号<code>ip_addr_any_type</code>。</p><p>在Leaf的代码中搜索之后，发现这个符号是在lwip项目的代码中声明的。</p><p>我先跑到<a href="https://github.com/eycorsican/aleaf/actions/runs/747697441">Leaf的GitHub Actions</a>中拿到作者编译的libleafandroid.so，惊奇地发现这份so是可以运行的。</p><p>于是，我装上WSL2，在WSL2中配置好构建环境，又编译了一次，发现WSL中编译的so也是可以运行的。</p><p>在构建target产出目录中摸索的时候，我终于发现了其中的不同：在我的<code>target\aarch64-linux-android\release\build\leaf-f624836c6ef73483\out</code>目录中，只有一个<code>mobile_bindings.rs</code>文件，但根据Leaf的<a href="https://github.com/eycorsican/leaf/blob/10e600d27db13d0aada6917c3df9ad4afec5cf40/leaf/build.rs"><code>build.rs</code></a>文件，这个目录中还需要产出liblwip.a等lwip库的编译产出物才对。</p><p>在这个过程中，我也稍微了解了一下Rust的构建流程（虽然我完全不会Rust来着）：</p><p><img src="/rust-build.png"></p><p>如图所示，某些Rust库会有一个build.rs文件，这个文件是用于构建这个库的，里面的代码会以开发者的<strong>本地机器</strong>为目标平台编译，并运行编译后的可执行文件来提前构建一些外部依赖。例如Leaf需要在编译它自身的Rust源码之前先编译好lwip等其他语言写的库，就需要在build.rs中进行编译。</p><p>而我遇到的文件就在于此，在旧的build.rs中使用了cfg选项来条件编译，作者应该是希望仅Android目标编译lwip：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[cfg(all(</span><br><span class="hljs-meta">    feature = <span class="hljs-string">&quot;inbound-tun&quot;</span>,</span><br><span class="hljs-meta">    any(</span><br><span class="hljs-meta">        target_os = <span class="hljs-string">&quot;ios&quot;</span>,</span><br><span class="hljs-meta">        target_os = <span class="hljs-string">&quot;android&quot;</span>,</span><br><span class="hljs-meta">        target_os = <span class="hljs-string">&quot;macos&quot;</span>,</span><br><span class="hljs-meta">        target_os = <span class="hljs-string">&quot;linux&quot;</span></span><br><span class="hljs-meta">    )</span><br><span class="hljs-meta">))]</span><br>&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">os</span> = env::<span class="hljs-title function_ invoke__">var</span>(<span class="hljs-string">&quot;CARGO_CFG_TARGET_OS&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">if</span> os == <span class="hljs-string">&quot;ios&quot;</span> || os == <span class="hljs-string">&quot;android&quot;</span> || os == <span class="hljs-string">&quot;linux&quot;</span> || os == <span class="hljs-string">&quot;macos&quot;</span> &#123;<br>        <span class="hljs-title function_ invoke__">compile_lwip</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> env::<span class="hljs-title function_ invoke__">var</span>(<span class="hljs-string">&quot;BINDINGS_GEN&quot;</span>).<span class="hljs-title function_ invoke__">is_ok</span>()<br>        &amp;&amp; (os == <span class="hljs-string">&quot;ios&quot;</span> || os == <span class="hljs-string">&quot;android&quot;</span> || os == <span class="hljs-string">&quot;linux&quot;</span> || os == <span class="hljs-string">&quot;macos&quot;</span>)<br>    &#123;<br>        <span class="hljs-title function_ invoke__">generate_lwip_bindings</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而如前所述，build.rs是在我的Windows上运行的，并不是目标平台的代码，因此在其中使用cfg的target_os来条件编译就会出错了。在Linux平台上能成功的原因嘛，则是上面的判断条件歪打正着地匹配上了Linux……</p><p>于是我给作者提了一个PR（关联<a href="https://github.com/eycorsican/leaf/issues/169">issue</a>），解决了这个问题之后再编译得到的so终于可以正常运行了。</p><h2 id="在Gradle项目中集成Rust构建"><a href="#在Gradle项目中集成Rust构建" class="headerlink" title="在Gradle项目中集成Rust构建"></a>在Gradle项目中集成Rust构建</h2><h3 id="接入rust-android-gradle插件"><a href="#接入rust-android-gradle插件" class="headerlink" title="接入rust-android-gradle插件"></a>接入rust-android-gradle插件</h3><p>到此为止，我们只是手动完成了so的编译，但这意味着每次我们将代码修改之后都需要手动编译一次so，然后再启动Android编译。自然而然地，我希望能够把Cargo构建任务放进Gradle项目中。而我们也已经有了这样的插件：<a href="https://github.com/mozilla/rust-android-gradle">rust-android-gradle</a>。</p><p>然而不幸的是，这个插件已经停止更新很久了，无法支持我项目中使用的AGP 4.1.3。</p><p>幸运的是，作者收到了<a href="https://github.com/mozilla/rust-android-gradle/issues/53">群众的呼声</a>，又回坑了，并且已经在他的fork上完成了一版修改。于是，我拉取了它<a href="https://github.com/ncalexan/rust-android-gradle/tree/citest">修改后的插件代码</a>，在IDEA中打开并构建出jar，放进了我的项目中，配置如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// build.gradle</span><br>buildscript &#123;<br>    dependencies &#123;<br>        classpath files(<span class="hljs-string">&#x27;./gradle-plugins/org.mozilla.rust-android-gradle-plugin-0.8.6.jar&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// app/build.gradle</span><br>plugins &#123;<br>    <span class="hljs-comment">// ...</span><br>    id <span class="hljs-string">&#x27;org.mozilla.rust-android-gradle.rust-android&#x27;</span><br>&#125;<br><br>android &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// Rust build configuration!</span><br>cargo &#123;<br>    module  = <span class="hljs-string">&quot;../leaf-android&quot;</span><br>    libname = <span class="hljs-string">&quot;leafandroid&quot;</span><br>    targets = [<span class="hljs-string">&quot;arm64&quot;</span>, <span class="hljs-string">&quot;x86_64&quot;</span>]<br>    prebuiltToolchains = <span class="hljs-literal">true</span><br>    profile = <span class="hljs-string">&#x27;release&#x27;</span><br>    features &#123;<br>        noDefaultBut(<span class="hljs-string">&quot;leaf/default-ring&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Build leaf during building app</span><br>tasks.whenTaskAdded &#123; task -&gt;<br>    <span class="hljs-keyword">if</span> ((task.name == <span class="hljs-string">&#x27;javaPreCompileDebug&#x27;</span> || task.name == <span class="hljs-string">&#x27;javaPreCompileRelease&#x27;</span>)) &#123;<br>        task.dependsOn <span class="hljs-string">&#x27;cargoBuild&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>各参数的使用可以直接查阅插件文档，同时需要注意安装正确版本的NDK，因为rust-android-gradle插件会读取你所使用的<a href="https://developer.android.com/studio/projects/install-ndk#default-ndk-per-agp">AGP版本对应的默认NDK版本</a>，如果你没有强制指定的话，就需要按照这个版本对应关系下载好对应的NDK。</p><p>这回可以顺利编译了，我启动了Gradle任务，并开始翻阅插件文档，因为前面提到的libclang问题在这里肯定也得再解决一下才行。</p><p>可谁知使用插件之后，编译顺利完成了？！</p><h3 id="bindgen编译时libclang缺失：其二"><a href="#bindgen编译时libclang缺失：其二" class="headerlink" title="bindgen编译时libclang缺失：其二"></a>bindgen编译时libclang缺失：其二</h3><p>如前所述，Windows上构建的时候是找不到libclang.dll的，为什么编译成功了呢？</p><h4 id="Q1：bindgen怎么找到了libclang-dll"><a href="#Q1：bindgen怎么找到了libclang-dll" class="headerlink" title="Q1：bindgen怎么找到了libclang.dll"></a>Q1：bindgen怎么找到了libclang.dll</h4><p>bindgen依赖<a href="https://github.com/KyleMayes/clang-sys">clang-sys</a>这个库来查找和链接libclang动态库，回顾一下前面的Rust构建流程，leaf在编译Rust源码之前，会运行leaf-build-script.exe，这里面会调用bindgen，因此会把bindgen编译成libbindgen.dll，而bindgen运行时又依赖clang-sys，因此clang-sys源码中的<code>build/*.rs</code>也会被编译为libclang-sys.dll后在我的Windows机器上运行。</p><p>捋清楚前面的逻辑之后，我们看clang-sys中<a href="https://github.com/KyleMayes/clang-sys/blob/master/build/common.rs">查找libclang的代码</a>（省略了部分逻辑）：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// Returns the paths to and the filenames of the `libclang` static or dynamic</span><br><span class="hljs-comment">/// libraries matching the supplied filename patterns.</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">search_libclang_directories</span>(files: &amp;[<span class="hljs-type">String</span>], variable: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;(PathBuf, <span class="hljs-type">String</span>)&gt; &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// Search the `bin` and `lib` directories in directory provided by</span><br>    <span class="hljs-comment">// `llvm-config --prefix`.</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(output) = <span class="hljs-title function_ invoke__">run_llvm_config</span>(&amp;[<span class="hljs-string">&quot;--prefix&quot;</span>]) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">directory</span> = Path::<span class="hljs-title function_ invoke__">new</span>(output.<span class="hljs-title function_ invoke__">lines</span>().<span class="hljs-title function_ invoke__">next</span>().<span class="hljs-title function_ invoke__">unwrap</span>()).<span class="hljs-title function_ invoke__">to_path_buf</span>();<br>        found.<span class="hljs-title function_ invoke__">extend</span>(<span class="hljs-title function_ invoke__">search_directories</span>(&amp;directory.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&quot;bin&quot;</span>), files));<br>        found.<span class="hljs-title function_ invoke__">extend</span>(<span class="hljs-title function_ invoke__">search_directories</span>(&amp;directory.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&quot;lib&quot;</span>), files));<br>        found.<span class="hljs-title function_ invoke__">extend</span>(<span class="hljs-title function_ invoke__">search_directories</span>(&amp;directory.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&quot;lib64&quot;</span>), files));<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// Determine the `libclang` directory patterns.</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">directories</span> = <span class="hljs-keyword">if</span> <span class="hljs-built_in">cfg!</span>(<span class="hljs-title function_ invoke__">any</span>(target_os = <span class="hljs-string">&quot;freebsd&quot;</span>, target_os = <span class="hljs-string">&quot;linux&quot;</span>)) &#123;<br>        DIRECTORIES_LINUX<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">cfg!</span>(target_os = <span class="hljs-string">&quot;macos&quot;</span>) &#123;<br>        DIRECTORIES_MACOS<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">cfg!</span>(target_os = <span class="hljs-string">&quot;windows&quot;</span>) &#123;<br>        DIRECTORIES_WINDOWS<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        &amp;[]<br>    &#125;;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码有两个重要的逻辑：运行llvm-config和检查target_os。</p><p>前面提到过Leaf在Linux上是可以顺利编译的，查看作者提供的<a href="https://github.com/eycorsican/aleaf/blob/master/app/src/main/rust/leaf-android/build.sh">编译脚本</a>可以发现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=&quot;$NDK_HOME/toolchains/llvm/prebuilt/$HOST_OS-$HOST_ARCH/bin/&quot;:$PATH<br></code></pre></td></tr></table></figure><p>作者将NDK中的LLVM工具链放进了环境变量里。这使clang-sys查找过程中可以顺利运行<code>llvm-config --prefix</code>命令，打印出NDK中LLVM的安装路径，并顺着这个路径找到谷歌白给的libclang.so加以使用，这就是Linux可以正常编译的原因。</p><p>然而这对Windows来说没有意义，因为Windows上NDK里的LLVM缺胳膊少腿。于是我们需要后面的逻辑。如前所述，这里的<code>target_os</code>自然是<code>windows</code>，因此我们会在<code>DIRECTORIES_WINDOWS</code>里找：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// `libclang` directory patterns for Windows.</span><br><span class="hljs-keyword">const</span> DIRECTORIES_WINDOWS: &amp;[&amp;<span class="hljs-type">str</span>] = &amp;[<br>    <span class="hljs-string">&quot;C:\\LLVM\\lib&quot;</span>,<br>    <span class="hljs-string">&quot;C:\\Program Files*\\LLVM\\lib&quot;</span>,<br>    <span class="hljs-string">&quot;C:\\MSYS*\\MinGW*\\lib&quot;</span>,<br>    <span class="hljs-comment">// LLVM + Clang can be installed as a component of Visual Studio.</span><br>    <span class="hljs-comment">// https://github.com/KyleMayes/clang-sys/issues/121</span><br>    <span class="hljs-string">&quot;C:\\Program Files*\\Microsoft Visual Studio\\*\\BuildTools\\VC\\Tools\\Llvm\\**\\bin&quot;</span>,<br>];<br></code></pre></td></tr></table></figure><p>接下来就是本篇最大乌龙……</p><p>事情是这样子的：</p><ol><li>我安装了NDK，编译时发现找不到libclang，这是因为NDK中缺了libclang；</li><li>我在VS中安装了Clang，编译时还是找不到libclang，这是因为上面的路径和我VS中LLVM的路径对不上（原因不明，但这不重要）；</li><li>我手动把VS中Clang的路径指定给<code>LIBCLANG_PATH</code>环境变量，终于可以找到了，此时我处于好奇，还随手去llvm.org下载了原味LLVM 12，但是<strong>被我安装到非默认位置</strong>了，导致clang-sys按照上面的常量找没找到；</li><li>我最终通过环境变量解决了编译问题，并发现我所使用的NDK r22里的LLVM是11.0.5的，于是去下载了一个原味LLVM 11.1.0，并<strong>安装到了默认位置</strong>，想以此验证这个LLVM版本也是跑得通的；</li><li>我开始配置rust-android-gradle插件，插件编译的时候直接取到了我的原味LLVM 11.1.0。</li></ol><p>好家伙，当初为了这个问题我还特地拉AOSP里的NDK源码尝试编译，折腾大半个月白折腾了……</p><h4 id="Q2：isystem参数如何被指定的？"><a href="#Q2：isystem参数如何被指定的？" class="headerlink" title="Q2：isystem参数如何被指定的？"></a>Q2：<code>isystem</code>参数如何被指定的？</h4><p>如前所说，指定<code>LIBCLANG_PATH</code>环境变量还不够，还需要指定一些额外的Clang参数，否则Windows版本的LLVM是不知道去NDK目录里找头文件的。但是为什么rust-gradle-plugin里编译的时候成功了呢？</p><p>首先，<a href="https://github.com/mozilla/rust-android-gradle/blob/master/plugin/src/main/kotlin/com/nishtahir/CargoBuildTask.kt#L207">插件</a>中为我们指定了CLANG_PATH环境变量，指向了我们NDK中的CLANG可执行程序：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// CargoBuildTask.kt</span><br><span class="hljs-comment">// Set CLANG_PATH in the environment, so that bindgen (or anything</span><br><span class="hljs-comment">// else using clang-sys in a build.rs) works properly, and doesn&#x27;t</span><br><span class="hljs-comment">// use host headers and such.</span><br><span class="hljs-keyword">val</span> shouldConfigure = cargoExtension.getFlagProperty(<br>    <span class="hljs-string">&quot;rust.autoConfigureClangSys&quot;</span>,<br>    <span class="hljs-string">&quot;RUST_ANDROID_GRADLE_AUTO_CONFIGURE_CLANG_SYS&quot;</span>,<br>    <span class="hljs-comment">// By default, only do this for non-desktop platforms. If we&#x27;re</span><br>    <span class="hljs-comment">// building for desktop, things should work out of the box.</span><br>    toolchain.type != ToolchainType.DESKTOP<br>)<br><span class="hljs-keyword">if</span> (shouldConfigure) &#123;<br>    environment(<span class="hljs-string">&quot;CLANG_PATH&quot;</span>, cc)<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，bindgen<a href="https://github.com/rust-lang/rust-bindgen/blob/master/src/lib.rs#L2193">有一段逻辑</a>会尝试解析需要include的路径：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">detect_include_paths</span>(options: &amp;<span class="hljs-keyword">mut</span> BindgenOptions) &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">clang</span> = <span class="hljs-keyword">match</span> clang_sys::support::Clang::<span class="hljs-title function_ invoke__">find</span>(<br>        <span class="hljs-literal">None</span>,<br>        &amp;clang_args_for_clang_sys,<br>    ) &#123;<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-keyword">return</span>,<br>        <span class="hljs-title function_ invoke__">Some</span>(clang) =&gt; clang,<br>    &#125;;<br><br>    debug!(<span class="hljs-string">&quot;Found clang: &#123;:?&#125;&quot;</span>, clang);<br><br>    <span class="hljs-comment">// Whether we are working with C or C++ inputs.</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">is_cpp</span> = <span class="hljs-title function_ invoke__">args_are_cpp</span>(&amp;options.clang_args) ||<br>    options<br>    .input_header<br>    .<span class="hljs-title function_ invoke__">as_ref</span>()<br>    .<span class="hljs-title function_ invoke__">map_or</span>(<span class="hljs-literal">false</span>, |i| <span class="hljs-title function_ invoke__">file_is_cpp</span>(&amp;i));<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">search_paths</span> = <span class="hljs-keyword">if</span> is_cpp &#123;<br>        clang.cpp_search_paths<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        clang.c_search_paths<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(search_paths) = search_paths &#123;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">path</span> <span class="hljs-keyword">in</span> search_paths.<span class="hljs-title function_ invoke__">into_iter</span>() &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(path) = path.<span class="hljs-title function_ invoke__">into_os_string</span>().<span class="hljs-title function_ invoke__">into_string</span>() &#123;<br>                options.clang_args.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&quot;-isystem&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>());<br>                options.clang_args.<span class="hljs-title function_ invoke__">push</span>(path);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">detect_include_paths</span>(&amp;<span class="hljs-keyword">mut</span> options);<br></code></pre></td></tr></table></figure><p>如上所示，bindgen会查找clang可执行程序，并运行它，得到c、cpp的头文件搜索路径，并追加到参数里。而这个<code>clang_sys::support::Clang::find</code>里的实现，正是使用到了<code>CLANG_PATH</code>这个插件注入的环境变量，取到了NDK里的clang可执行程序，解析到了需要的头文件目录！</p><p>因为以上的原因，我们不再需要手动指定环境变量，插件就能为我们完成构建了。</p><h2 id="解决stopLeaf崩溃"><a href="#解决stopLeaf崩溃" class="headerlink" title="解决stopLeaf崩溃"></a>解决stopLeaf崩溃</h2><p>在完成编译顺利运行之后，我又遇到了新的问题：调用<code>stopLeaf</code>之后，应用会崩溃，而日志中就只有两行：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">--------- beginning of crash<br><span class="hljs-number">2021-05-04</span> <span class="hljs-number">17</span>:<span class="hljs-number">34:35.688</span> <span class="hljs-number">29209-29279</span>/com.perqin.bamboo <span class="hljs-keyword">A</span>/libc: fdsan: attempted to close file descriptor <span class="hljs-number">111</span>, expected to be unowned, actually owned by ParcelFileDescriptor <span class="hljs-number">0</span>xec55a51<br><span class="hljs-number">2021-05-04</span> <span class="hljs-number">17</span>:<span class="hljs-number">34:35.689</span> <span class="hljs-number">29209-29279</span>/com.perqin.bamboo <span class="hljs-keyword">A</span>/libc: Fatal signal <span class="hljs-number">6</span> (SIGABRT), code -<span class="hljs-number">1</span> (SI_QUEUE) in tid <span class="hljs-number">29279</span> (Thread-<span class="hljs-number">4</span>), pid <span class="hljs-number">29209</span> (m.perqin.bamboo)<br></code></pre></td></tr></table></figure><p>这个111文件描述符的确是我从Java层传递给Leaf的，但是Leaf在哪里关闭了它呢？我摸索了一天才找到答案。</p><p>从Java层传入的配置文件，被解析之后放入了这个结构体中，而这个文件描述符也被放到了fd成员里：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// leaf:src/config/internal/config.rs</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TunInboundSettings</span> &#123;<br>    <span class="hljs-comment">// message fields</span><br>    <span class="hljs-keyword">pub</span> fd: <span class="hljs-type">i32</span>,<br>    <span class="hljs-keyword">pub</span> auto: <span class="hljs-type">bool</span>,<br>    <span class="hljs-keyword">pub</span> name: ::std::string::<span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> address: ::std::string::<span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> gateway: ::std::string::<span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> netmask: ::std::string::<span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> mtu: <span class="hljs-type">i32</span>,<br>    <span class="hljs-keyword">pub</span> fake_dns_exclude: ::protobuf::RepeatedField&lt;::std::string::<span class="hljs-type">String</span>&gt;,<br>    <span class="hljs-keyword">pub</span> fake_dns_include: ::protobuf::RepeatedField&lt;::std::string::<span class="hljs-type">String</span>&gt;,<br>    <span class="hljs-comment">// special fields</span><br>    <span class="hljs-keyword">pub</span> unknown_fields: ::protobuf::UnknownFields,<br>    <span class="hljs-keyword">pub</span> cached_size: ::protobuf::CachedSize,<br>&#125;<br></code></pre></td></tr></table></figure><p>而后被放入了Configuration对象中，用于构造AsyncDevice：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// leaf:src/proxy/tun/inbound.rs</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(<br>    inbound: Inbound,<br>    dispatcher: Arc&lt;Dispatcher&gt;,<br>    nat_manager: Arc&lt;NatManager&gt;,<br>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;Runner&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">settings</span> = TunInboundSettings::<span class="hljs-title function_ invoke__">parse_from_bytes</span>(&amp;inbound.settings)?;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cfg</span> = <span class="hljs-keyword">if</span> settings.fd &gt;= <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cfg</span> = tun::Configuration::<span class="hljs-title function_ invoke__">default</span>();<br>        cfg.<span class="hljs-title function_ invoke__">raw_fd</span>(settings.fd);<br>        cfg<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> settings.auto &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;;<br><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tun</span> = tun::<span class="hljs-title function_ invoke__">create_as_async</span>(&amp;cfg).<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在构造中，这个fd也被通过<code>Fd::new</code>包装到了<code>platform::posix::Fd</code>对象里：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// rust-tun:src/platform/android/device.rs</span><br><span class="hljs-keyword">use</span> crate::platform::posix::&#123;<span class="hljs-keyword">self</span>, Fd&#125;;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Device</span> &#123;<br>    <span class="hljs-comment">/// Create a new `Device` for the given `Configuration`.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(config: &amp;Configuration) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">fd</span> = <span class="hljs-keyword">match</span> config.raw_fd &#123;<br>            <span class="hljs-title function_ invoke__">Some</span>(raw_fd) =&gt; raw_fd,<br>            _ =&gt; <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(Error::InvalidConfig),<br>        &#125;;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">device</span> = &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">tun</span> = Fd::<span class="hljs-title function_ invoke__">new</span>(fd).<span class="hljs-title function_ invoke__">map_err</span>(|_| io::Error::<span class="hljs-title function_ invoke__">last_os_error</span>())?;<br><br>            Device &#123;<br>                queue: Queue &#123; tun: tun &#125;,<br>            &#125;<br>        &#125;;<br>        <span class="hljs-title function_ invoke__">Ok</span>(device)<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而Fd这个对象实现了Drop这个trait，并且会调用libc关闭这个文件描述符：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// rust-tun:src/platform/posix/fd.rs</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Fd</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span> &gt;= <span class="hljs-number">0</span> &#123;<br>                libc::<span class="hljs-title function_ invoke__">close</span>(<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而在leaf代码中，通过<code>select_all</code>并行执行了多个Future，当我们调用stopLeaf的时候，其中用于监听shutdown信号的Future就是完成，并导致<code>select_all</code>完成：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">start</span>(rt_id: RuntimeId, opts: StartOptions) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), Error&gt; &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">tasks</span>: <span class="hljs-type">Vec</span>&lt;Runner&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">runners</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">// ...</span><br>    tasks.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">pin</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">move</span> &#123;<br>        futures::future::<span class="hljs-title function_ invoke__">join_all</span>(runners).<span class="hljs-keyword">await</span>;<br>    &#125;));<br><br>    <span class="hljs-comment">// Monitor shutdown signal.</span><br>    tasks.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">pin</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">move</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span> = shutdown_rx.<span class="hljs-title function_ invoke__">recv</span>().<span class="hljs-keyword">await</span>;<br>    &#125;));<br><br>    RUNTIME_MANAGER<br>        .<span class="hljs-title function_ invoke__">lock</span>()<br>        .<span class="hljs-title function_ invoke__">map_err</span>(|_| Error::RuntimeManager)?<br>        .<span class="hljs-title function_ invoke__">insert</span>(rt_id, runtime_manager);<br><br>    rt.<span class="hljs-title function_ invoke__">block_on</span>(futures::future::<span class="hljs-title function_ invoke__">select_all</span>(tasks));<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>于是可以推测，在<code>select_all</code>完成之后，除了shutdown这个Future完成了，其他Future（包括正在持有fd的Future，在runners中）以及关联的变量就都离开了作用域，Rust判断他们可以被Drop了，于是就drop了。这也是为什么我打日志后发现在<code>rt.block_on(futures::future::select_all(tasks));</code>这行发生了crash。</p><p>这个文件描述符在Java层是通过<code>VpnService.Builder.establish</code>方法返回的ParcelFileDescriptor对象中获得的。我们会看到他的注释中明确说明需要app主动关闭这个文件描述符：</p><p><img src="/index.png"></p><p>而要让native来负责关闭的话，就需要调用<code>detachFd</code>，在Java层主动释放对文件描述符的拥有权。调用这个方法之后，stopLeaf果然不会奔溃了。</p><p>稍微深究一下ParcelFileDescriptor的实现就会发现，在构造对象的时候我们就声明了拥有权（<code>IoUtils.setFdOwner(mFd, this)</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ParcelFileDescriptor</span><span class="hljs-params">(FileDescriptor fd, FileDescriptor commChannel)</span> &#123;<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;FileDescriptor must not be null&quot;</span>);<br>    &#125;<br>    mWrapped = <span class="hljs-literal">null</span>;<br>    mFd = fd;<br>    IoUtils.setFdOwner(mFd, <span class="hljs-built_in">this</span>);<br><br>    mCommFd = commChannel;<br>    <span class="hljs-keyword">if</span> (mCommFd != <span class="hljs-literal">null</span>) &#123;<br>        IoUtils.setFdOwner(mCommFd, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    mGuard.open(<span class="hljs-string">&quot;close&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而常规情况下，在Java层关闭时调用的<code>close</code>会关闭这个fd（<code>IoUtils.closeQuietly(mFd)</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeWithStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> status, String msg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mClosed) <span class="hljs-keyword">return</span>;<br>    mClosed = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (mGuard != <span class="hljs-literal">null</span>) &#123;<br>        mGuard.close();<br>    &#125;<br>    <span class="hljs-comment">// Status MUST be sent before closing actual descriptor</span><br>    writeCommStatusAndClose(status, msg);<br>    IoUtils.closeQuietly(mFd);<br>    releaseResources();<br>&#125;<br></code></pre></td></tr></table></figure><p>但如果我们调用<code>detachFd</code>呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">detachFd</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (mWrapped != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> mWrapped.detachFd();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (mClosed) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Already closed&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">fd</span> <span class="hljs-operator">=</span> IoUtils.acquireRawFd(mFd);<br>        writeCommStatusAndClose(Status.DETACHED, <span class="hljs-literal">null</span>);<br>        mClosed = <span class="hljs-literal">true</span>;<br>        mGuard.close();<br>        releaseResources();<br>        <span class="hljs-keyword">return</span> fd;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见我们仅仅是把这个ParcelFileDescriptor关闭了，但并没有真正关闭fd。</p><p>我们再去cs.android.com搜索<code>IoUtils.setFdOwner</code>的实现：</p><p><img src="/image-20210505004002025.png"></p><p>在注释里我们看到了……哟，这不是fdsan吗？<del>几天不见，这么拉了</del></p><p>可见fdsan这个玩意儿就是负责维护文件描述符的拥有权管理，如果一个文件描述符被一个Java对象指定了拥有，随后又在native层被关闭，fdsan就能马上检测到这里可能存在误关闭。</p><p>谷歌搜索一下fdsan：</p><p><img src="/image-20210505004251692.png"></p><p>可知fdsan是Android 10才被引入的，而Android 11上发生了行为变更，在10的时候检测到误关闭时只会打印警告，但是11上会直接崩溃。</p><p>而我手上的索尼Xperia 5 ii<del>（非异形屏带3.5mm耳机孔你值得拥有）</del>正好前阵子升级到了Android 11，因此遇到了这个问题，而作者的设备大概还不是Android 11，所以没有复现。</p><h2 id="FIN"><a href="#FIN" class="headerlink" title="FIN"></a>FIN</h2><p>作为995的社畜，难得五一连休尽情地折腾了一把side project，真是太爽了，感觉没什么用的知识又增加了不少www</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从Flutter编译错误到给Flutter贡献代码</title>
    <link href="/2021/03/21/from-flutter-build-failure-to-pr/"/>
    <url>/2021/03/21/from-flutter-build-failure-to-pr/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter国际化"><a href="#Flutter国际化" class="headerlink" title="Flutter国际化"></a>Flutter国际化</h1><p><a href="https://flutter.dev/docs/development/accessibility-and-localization/internationalization">Flutter的官方文档</a>中给出了Flutter应用的国际化和本地化流程。</p><p>简而言之，Flutter的国际化依赖代码生成。以JSON格式在指定文件中定义国际化的资源，然后通过Flutter提供的工具动态生成Flutter代码，随后便可以在应用中使用这些代码中的变量。</p><p>在根目录（注意<a href="https://github.com/flutter/flutter/issues/75977">不是lib目录下</a>www）下的l10n.yaml中配置本地化配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">arb-dir:</span> <span class="hljs-string">lib/l10n</span><br><span class="hljs-attr">template-arb-file:</span> <span class="hljs-string">app_en.arb</span><br><span class="hljs-attr">output-localization-file:</span> <span class="hljs-string">app_localizations.dart</span><br></code></pre></td></tr></table></figure><p>然后在lib&#x2F;l10n中添加各语言的本地化资源文件，其中作为模板的app_en.arb如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;appName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fandori&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@appName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;information&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Information&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@information&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;characters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Characters&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@characters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Cards&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@cards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>而其它语言文件就不需要<code>@</code>开头的描述性字段了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;appName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Fandori&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;information&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;信息&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;characters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;角色&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;卡牌&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在pubspec.yaml中启用本地化：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">flutter_localizations:</span><br>    <span class="hljs-attr">sdk:</span> <span class="hljs-string">flutter</span><br>  <span class="hljs-attr">intl:</span> <span class="hljs-string">^0.16.1</span><br><span class="hljs-attr">flutter:</span><br>  <span class="hljs-attr">generate:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这之后每次运行<code>flutter pub get</code>时，都会触发本地化资源的生成。</p><h1 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h1><p>众所周知，<a href="https://flutter.dev/docs/development/data-and-backend/json#is-there-a-gsonjacksonmoshi-equivalent-in-flutter">Flutter禁止了反射</a>。因此，JSON序列化也需要使用代码生成来实现。</p><p>在pubspec.yaml中添加JSON序列化相关的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dependencies:</span><br>  <span class="hljs-attr">json_annotation:</span> <span class="hljs-string">^3.1.1</span><br><span class="hljs-attr">dev_dependencies:</span><br>  <span class="hljs-attr">build_runner:</span> <span class="hljs-string">^1.11.1</span><br>  <span class="hljs-attr">json_serializable:</span> <span class="hljs-string">^3.5.1</span><br></code></pre></td></tr></table></figure><p>然后定义需要支持JSON序列化、反序列化的Model类：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;<br><br><span class="hljs-keyword">part</span> <span class="hljs-string">&#x27;get_band.g.dart&#x27;</span>;<br><br><span class="hljs-meta">@JsonSerializable</span>()<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Band</span> </span>&#123;<br>  <span class="hljs-built_in">int</span> bandId;<br>  <span class="hljs-built_in">String</span> bandName;<br>  <span class="hljs-built_in">String</span> introductions;<br><br>  Band(<br>    <span class="hljs-keyword">this</span>.bandId,<br>    <span class="hljs-keyword">this</span>.bandName,<br>    <span class="hljs-keyword">this</span>.introductions,<br>  );<br><br>  <span class="hljs-keyword">factory</span> Band.fromJson(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; json) =&gt; _$BandFromJson(json);<br><br>  <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; toJson() =&gt; _$BandToJson(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于任意文件<code>some_file.dart</code>中使用<code>JsonSerializable</code>注解标记的类<code>SomeClass</code>，<code>json_serializable</code>会在<code>some_file.g.dart</code>中生成用于序列化的<code>_$SomeClassToJson</code>和用于反序列化的<code>$_SomeClassFromJson</code>方法。</p><p>只需要运行<code>flutter pub run build_runner build</code>就可以生成上述<code>.g.dart</code>文件。</p><h1 id="build-runner与flutter-generate的冲突"><a href="#build-runner与flutter-generate的冲突" class="headerlink" title="build_runner与flutter_generate的冲突"></a>build_runner与flutter_generate的冲突</h1><p>如果你使用的是1.24以前（不含1.24）的Flutter版本，那么在你运行build_runner的时候，便会遇到这样的错误：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Bad state: Unable to generate <span class="hljs-keyword">package</span> graph, no <span class="hljs-regexp">/home/</span>perqin<span class="hljs-regexp">/Workspaces/</span>fandori<span class="hljs-regexp">/.dart_tool/</span>flutter_gen/pubspec.yaml found.<br></code></pre></td></tr></table></figure><p>完整的错误现场可以看GitHub上<a href="https://github.com/flutter/flutter/issues/75333">另一位老哥发的issue</a>。</p><p>这个未被找到的文件位于项目根目录下的<code>.dart_tool/flutter_gen/</code>。查看目录下的文件就会发现，这里面就是Flutter本地化工具生成的代码存放处。</p><p>于是我产生了两个疑问：</p><ul><li>build_runner为什么会检查这个目录下面有没有pubspec.yaml？</li><li>Flutter为什么没有在这个目录下生成pubspec.yaml？</li></ul><h1 id="探索build-runner"><a href="#探索build-runner" class="headerlink" title="探索build_runner"></a>探索build_runner</h1><p>你可以在Flutter安装目录下的.pub-cache\hosted\pub.dartlang.org中找到build_runner的源码（如果你使用了Flutter China的镜像的话，你要在hosted目录下找pub.flutter-io.cn目录）。</p><p>顺着错误栈，我们找到了build_runner入口的第一行代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// build_runner:build_runner.dart</span><br>Future&lt;<span class="hljs-keyword">void</span>&gt; main(<span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt; args) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-comment">// Use the actual command runner to parse the args and immediately print the</span><br>  <span class="hljs-comment">// usage information if there is no command provided or the help command was</span><br>  <span class="hljs-comment">// explicitly invoked.</span><br>  <span class="hljs-keyword">var</span> commandRunner =<br>      BuildCommandRunner([], <span class="hljs-keyword">await</span> PackageGraph.forThisPackage());<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在进行后续逻辑之前，build_runner会先获取我们项目的包依赖图（Package Graph）。顺着错误栈找下去吧（中文注释是我加上去的）：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// build_runner_core:src/package_graph/package_graph.dart</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PackageGraph</span> </span>&#123;<br>  <span class="hljs-comment">/// <span class="language-markdown">Creates a [PackageGraph] for the package in which you are currently</span></span><br>  <span class="hljs-comment">/// <span class="language-markdown">running.</span></span><br>  <span class="hljs-keyword">static</span> Future&lt;PackageGraph&gt; forThisPackage() =&gt;<br>      <span class="hljs-comment">// 读取项目的PackageGraph</span><br>      PackageGraph.forPath(p.current);<br><br>  <span class="hljs-comment">/// <span class="language-markdown">Creates a [PackageGraph] for the package whose top level directory lives</span></span><br>  <span class="hljs-comment">/// <span class="language-markdown">at [packagePath] (no trailing slash).</span></span><br>  <span class="hljs-keyword">static</span> Future&lt;PackageGraph&gt; forPath(<span class="hljs-built_in">String</span> packagePath) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 读取PackageConfig，Flutter会把项目的包依赖信息放在PackageConfig里</span><br>    <span class="hljs-keyword">final</span> packageConfig =<br>        <span class="hljs-keyword">await</span> findPackageConfig(Directory(packagePath), recurse: <span class="hljs-keyword">false</span>);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 通过PackageConfig解析包依赖</span><br>    <span class="hljs-keyword">final</span> packageDependencies = _parsePackageDependencies(<br>        packageConfig.packages.where((p) =&gt; p.name != rootPackageName));<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">/// <span class="language-markdown">Read the pubspec for each package in [packages] and finds it&#x27;s</span></span><br><span class="hljs-comment">/// <span class="language-markdown">dependencies.</span></span><br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;&gt; _parsePackageDependencies(<br>    <span class="hljs-built_in">Iterable</span>&lt;Package&gt; packages) &#123;<br>  <span class="hljs-keyword">final</span> dependencies = &lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;&gt;&#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> package <span class="hljs-keyword">in</span> packages) &#123;<br>    <span class="hljs-comment">// 针对每个包，读取它的pubspec.yaml</span><br>    <span class="hljs-keyword">final</span> pubspec = _pubspecForPath(package.root.toFilePath());<br>    dependencies[package.name] = _depsFromYaml(pubspec);<br>  &#125;<br>  <span class="hljs-keyword">return</span> dependencies;<br>&#125;<br><br><span class="hljs-comment">/// <span class="language-markdown">Should point to the top level directory for the package.</span></span><br>YamlMap _pubspecForPath(<span class="hljs-built_in">String</span> absolutePath) &#123;<br>  <span class="hljs-keyword">var</span> pubspecPath = p.join(absolutePath, <span class="hljs-string">&#x27;pubspec.yaml&#x27;</span>);<br>  <span class="hljs-keyword">var</span> pubspec = File(pubspecPath);<br>  <span class="hljs-keyword">if</span> (!pubspec.existsSync()) &#123;<br>    <span class="hljs-comment">// .dart_tool/flutter_gen这个包也被列入了依赖，而这个包里没有pubspec.yaml，所以在这里报了错</span><br>    <span class="hljs-keyword">throw</span> StateError(<br>        <span class="hljs-string">&#x27;Unable to generate package graph, no `<span class="hljs-subst">$pubspecPath</span>` found.&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> loadYaml(pubspec.readAsStringSync()) <span class="hljs-keyword">as</span> YamlMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么为什么flutter_gen目录会被当作一个包被列入包依赖图的生成呢？package_config这个包中有答案：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// package_config:package_config.dart</span><br>Future&lt;PackageConfig&gt; findPackageConfig(Directory directory,<br>        &#123;<span class="hljs-built_in">bool</span> recurse = <span class="hljs-keyword">true</span>, <span class="hljs-keyword">void</span> onError(<span class="hljs-built_in">Object</span> error)&#125;) =&gt;<br>    discover.findPackageConfig(directory, recurse, onError ?? throwError);<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// package_config:src/discovery.dart</span><br>Future&lt;PackageConfig <span class="hljs-comment">/*?*/</span> &gt; findPackageConfig(<br>    Directory baseDirectory, <span class="hljs-built_in">bool</span> recursive, <span class="hljs-keyword">void</span> onError(<span class="hljs-built_in">Object</span> error)) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">var</span> directory = baseDirectory;<br>  <span class="hljs-keyword">if</span> (!directory.isAbsolute) directory = directory.absolute;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">await</span> directory.exists()) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// Check for $cwd/.packages</span><br>    <span class="hljs-comment">// 读取项目根目录下的.packages信息</span><br>    <span class="hljs-keyword">var</span> packageConfig = <span class="hljs-keyword">await</span> findPackagConfigInDirectory(directory, onError);<br>    <span class="hljs-keyword">if</span> (packageConfig != <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> packageConfig;<br>    <span class="hljs-keyword">if</span> (!recursive) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">// Check in parent directories.</span><br>    <span class="hljs-keyword">var</span> parentDirectory = directory.parent;<br>    <span class="hljs-keyword">if</span> (parentDirectory.path == directory.path) <span class="hljs-keyword">break</span>;<br>    directory = parentDirectory;<br>  &#125; <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们打开项目根目录下的.packages：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># generated by package:package_config at 2021-02-19 10:26:07.001909</span><br><span class="hljs-comment"># 前面省略……</span><br>flutter_gen:.dart_tool<span class="hljs-regexp">/flutter_gen/</span><br></code></pre></td></tr></table></figure><p>于是我们可以推断出事件的全貌：</p><p>Flutter的本地化工具会在.dart_tool目录下生成一个本地的Dart包：flutter_gen，并把生成的本地化代码放入其中。Flutter会把项目的依赖包列表都写入到.packages中，供包括build_runner在内的其他工具使用。</p><p>也就是说锅并不是build_runner的，而是Flutter的本地化工具的。</p><h1 id="探索Flutter-Localization"><a href="#探索Flutter-Localization" class="headerlink" title="探索Flutter Localization"></a>探索Flutter Localization</h1><p>前面提到，在运行<code>flutter pub get</code>的时候会刷新Flutter本地化代码，这句话的依据在Flutter安装目录下的packages\flutter_tools\lib\src\commands\packages.dart中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PackagesGetCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FlutterCommand</span> </span>&#123;<br>  Future&lt;<span class="hljs-keyword">void</span>&gt; _runPubGet(<span class="hljs-built_in">String</span> directory, FlutterProject flutterProject) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">if</span> (flutterProject.manifest.generateSyntheticPackage) &#123;<br>      <span class="hljs-keyword">final</span> Environment environment = Environment(<br>        artifacts: globals.artifacts,<br>        logger: globals.logger,<br>        cacheDir: globals.cache.getRoot(),<br>        engineVersion: globals.flutterVersion.engineRevision,<br>        fileSystem: globals.fs,<br>        flutterRootDir: globals.fs.directory(Cache.flutterRoot),<br>        outputDir: globals.fs.directory(getBuildDirectory()),<br>        processManager: globals.processManager,<br>        projectDir: flutterProject.directory,<br>      );<br><br>      <span class="hljs-keyword">await</span> generateLocalizationsSyntheticPackage(<br>        environment: environment,<br>        buildSystem: globals.buildSystem,<br>      );<br>      <span class="hljs-comment">// ...</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我是怎么找到这个文件的呢www</p><p>在pubspec.yaml中，有这样一个配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br>  <span class="hljs-attr">uses-material-design:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>在Flutter的GitHub仓库中搜索“uses-material-design”，过滤出Dart文件，很容易就能找到文件packages&#x2F;flutter_tools&#x2F;lib&#x2F;src&#x2F;flutter_manifest.dart，其中就包含了判断本地化是否启用的代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlutterManifest</span> </span>&#123;<br>  <span class="hljs-comment">/// <span class="language-markdown">Whether a synthetic flutter<span class="hljs-emphasis">_gen package should be generated.</span></span></span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// <span class="language-markdown"><span class="hljs-emphasis">This can be provided to the [Pub] interface to inject a new entry</span></span></span><br>  <span class="hljs-comment">/// <span class="language-markdown"><span class="hljs-emphasis">into the package_</span>config.json file which points to <span class="hljs-code">`.dart_tool/flutter_gen`</span>.</span></span><br>  <span class="hljs-comment">///</span><br>  <span class="hljs-comment">/// <span class="language-markdown">This allows generated source code to be imported using a package</span></span><br>  <span class="hljs-comment">/// <span class="language-markdown">alias.</span></span><br>  <span class="hljs-built_in">bool</span> <span class="hljs-keyword">get</span> generateSyntheticPackage =&gt; _generateSyntheticPackage ??= _computeGenerateSyntheticPackage();<br>  <span class="hljs-built_in">bool</span> _generateSyntheticPackage;<br>  <span class="hljs-built_in">bool</span> _computeGenerateSyntheticPackage() &#123;<br>    <span class="hljs-keyword">if</span> (!_flutterDescriptor.containsKey(<span class="hljs-string">&#x27;generate&#x27;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span> value = _flutterDescriptor[<span class="hljs-string">&#x27;generate&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">is</span>! <span class="hljs-built_in">bool</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value <span class="hljs-keyword">as</span> <span class="hljs-built_in">bool</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再顺着generateSyntheticPackage就能找到本地化工具的具体实现了。</p><p>回到generateLocalizationsSyntheticPackage：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// packages/flutter_tools/lib/src/dart/generate_synthetic_packages.dart</span><br>Future&lt;<span class="hljs-keyword">void</span>&gt; generateLocalizationsSyntheticPackage(&#123;<br>  <span class="hljs-meta">@required</span> Environment environment,<br>  <span class="hljs-meta">@required</span> BuildSystem buildSystem,<br>&#125;) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">final</span> BuildResult result = <span class="hljs-keyword">await</span> buildSystem.build(<br>    <span class="hljs-keyword">const</span> GenerateLocalizationsTarget(),<br>    environment,<br>  );<br><br>  <span class="hljs-keyword">if</span> (result == <span class="hljs-keyword">null</span> || result.hasException) &#123;<br>    throwToolExit(<span class="hljs-string">&#x27;Generating synthetic localizations package has failed.&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然，生成flutter_gen的逻辑就在GenerateLocalizationsTarget了：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// packages/flutter_tools/lib/src/build_system/targets/localizations.dart</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenerateLocalizationsTarget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Target</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Future&lt;<span class="hljs-keyword">void</span>&gt; build(Environment environment) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    generateLocalizations(<br>      logger: environment.logger,<br>      options: options,<br>      projectDir: environment.projectDir,<br>      dependenciesDir: environment.buildDir,<br>      localizationsGenerator: LocalizationsGenerator(environment.fileSystem),<br>    );<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// packages/flutter_tools/lib/src/localizations/gen_l10n.dart</span><br><span class="hljs-comment">/// <span class="language-markdown">Run the localizations generation script with the configuration [options].</span></span><br><span class="hljs-keyword">void</span> generateLocalizations(&#123;<br>  <span class="hljs-meta">@required</span> Directory projectDir,<br>  <span class="hljs-meta">@required</span> Directory dependenciesDir,<br>  <span class="hljs-meta">@required</span> LocalizationOptions options,<br>  <span class="hljs-meta">@required</span> LocalizationsGenerator localizationsGenerator,<br>  <span class="hljs-meta">@required</span> Logger logger,<br>&#125;) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    localizationsGenerator<br>      ..initialize(<br>        inputsAndOutputsListPath: dependenciesDir?.path,<br>        projectPathString: projectDir.path,<br>        inputPathString: inputPathString,<br>        templateArbFileName: templateArbFileName,<br>        outputFileString: outputFileString,<br>        outputPathString: options?.outputDirectory?.path,<br>        classNameString: options.outputClass ?? <span class="hljs-string">&#x27;AppLocalizations&#x27;</span>,<br>        preferredSupportedLocales: options.preferredSupportedLocales,<br>        headerString: options.header,<br>        headerFile: options?.headerFile?.toFilePath(),<br>        useDeferredLoading: options.deferredLoading ?? <span class="hljs-keyword">false</span>,<br>        useSyntheticPackage: options.useSyntheticPackage ?? <span class="hljs-keyword">true</span>,<br>        areResourceAttributesRequired: options.areResourceAttributesRequired ?? <span class="hljs-keyword">false</span>,<br>        untranslatedMessagesFile: options?.untranslatedMessagesFile?.toFilePath(),<br>      )<br>      ..loadResources()<br>      ..writeOutputFiles(logger, isFromYaml: <span class="hljs-keyword">true</span>);<br>  &#125; <span class="hljs-keyword">on</span> L10nException <span class="hljs-keyword">catch</span> (e) &#123;<br>    logger.printError(e.message);<br>    <span class="hljs-keyword">throw</span> Exception();<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalizationsGenerator</span> </span>&#123;<br>  <span class="hljs-keyword">void</span> writeOutputFiles(Logger logger, &#123; <span class="hljs-built_in">bool</span> isFromYaml = <span class="hljs-keyword">false</span> &#125;) &#123;<br>    <span class="hljs-comment">// First, generate the string contents of all necessary files.</span><br>    _generateCode();<br><br>    <span class="hljs-comment">// A pubspec.yaml file is required when using a synthetic package. If it does not</span><br>    <span class="hljs-comment">// exist, create a blank one.</span><br>    <span class="hljs-keyword">if</span> (_useSyntheticPackage) &#123;<br>      <span class="hljs-keyword">final</span> Directory syntheticPackageDirectory = _fs.directory(defaultSyntheticPackagePath);<br>      syntheticPackageDirectory.createSync(recursive: <span class="hljs-keyword">true</span>);<br>      <span class="hljs-keyword">final</span> File flutterGenPubspec = syntheticPackageDirectory.childFile(<span class="hljs-string">&#x27;pubspec.yaml&#x27;</span>);<br>      <span class="hljs-keyword">if</span> (!flutterGenPubspec.existsSync()) &#123;<br>        flutterGenPubspec.writeAsStringSync(emptyPubspecTemplate);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当时我是在GitHub上看这段代码的，很明显在writeOutputFiles中是包含了pubspec.yaml的生成逻辑的，怎么还会找不到呢？</p><p>我们切换到v1.22.6这个tag，再看<a href="https://github.com/flutter/flutter/blob/9b2d32b605630f28625709ebd9d78ab3016b2bf6/packages/flutter_tools/lib/src/localizations/gen_l10n.dart#L1003">这个文件</a>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">void</span> writeOutputFiles() &#123;<br>    <span class="hljs-comment">// First, generate the string contents of all necessary files.</span><br>    _generateCode();<br><br>    <span class="hljs-comment">// Since all validity checks have passed up to this point,</span><br>    <span class="hljs-comment">// write the contents into the directory.</span><br>    <span class="hljs-keyword">if</span> (!outputDirectory.existsSync()) &#123;<br>      outputDirectory.createSync(recursive: <span class="hljs-keyword">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Ensure that the created directory has read/write permissions.</span><br>    <span class="hljs-keyword">final</span> FileStat fileStat = outputDirectory.statSync();<br>    <span class="hljs-keyword">if</span> (_isNotReadable(fileStat) || _isNotWritable(fileStat)) &#123;<br>      <span class="hljs-keyword">throw</span> L10nException(<br>        <span class="hljs-string">&quot;The &#x27;output-dir&#x27; directory, <span class="hljs-subst">$outputDirectory</span>, doesn&#x27;t allow reading and writing.\n&quot;</span><br>        <span class="hljs-string">&#x27;Please ensure that the user has read and write permissions.&#x27;</span><br>      );<br>    &#125;<br><br>    <span class="hljs-comment">// Generate the required files for localizations.</span><br>    _languageFileMap.forEach((File file, <span class="hljs-built_in">String</span> contents) &#123;<br>      file.writeAsStringSync(contents);<br>      <span class="hljs-keyword">if</span> (_inputsAndOutputsListFile != <span class="hljs-keyword">null</span>) &#123;<br>        _outputFileList.add(file.absolute.path);<br>      &#125;<br>    &#125;);<br><br>    baseOutputFile.writeAsStringSync(_generatedLocalizationsFile);<br>    <span class="hljs-keyword">if</span> (_inputsAndOutputsListFile != <span class="hljs-keyword">null</span>) &#123;<br>      _outputFileList.add(baseOutputFile.absolute.path);<br><br>      <span class="hljs-comment">// Generate a JSON file containing the inputs and outputs of the gen_l10n script.</span><br>      <span class="hljs-keyword">if</span> (!_inputsAndOutputsListFile.existsSync()) &#123;<br>        _inputsAndOutputsListFile.createSync(recursive: <span class="hljs-keyword">true</span>);<br>      &#125;<br><br>      _inputsAndOutputsListFile.writeAsStringSync(<br>        json.encode(&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; &#123;<br>          <span class="hljs-string">&#x27;inputs&#x27;</span>: _inputFileList,<br>          <span class="hljs-string">&#x27;outputs&#x27;</span>: _outputFileList,<br>        &#125;),<br>      );<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>可见在此刻的最新版本（此时1.23以及更新的版本都还没有进入stable）上还有这个bug，而最新的master代码已经修复了。我们很容易找到<a href="https://github.com/flutter/flutter/pull/68206">对应的PR</a>，查看这个文件的改动对应的<a href="https://github.com/flutter/flutter/commit/38ebc5588b3d80b5bcce1a0a8114f96813de593f">commit</a>可以看到我们最早也要在1.24中才能收到这个修复了：</p><p><img src="/flutter-gen-bugfix-commit.png"></p><p>如果你不想等待1.24发布正式版，你也可以：</p><ul><li>手动创建pubspec.yaml文件</li><li>切换到beta channel</li></ul><h1 id="Flutter-Localization中的另一个bug"><a href="#Flutter-Localization中的另一个bug" class="headerlink" title="Flutter Localization中的另一个bug"></a>Flutter Localization中的另一个bug</h1><p>在阅读代码的过程中，我留意到GenerateLocalizationsTarget中的代码有些不对劲：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// packages/flutter_tools/lib/src/dart/generate_synthetic_packages.dart</span><br>Future&lt;<span class="hljs-keyword">void</span>&gt; generateLocalizationsSyntheticPackage(&#123;<br>  <span class="hljs-meta">@required</span> Environment environment,<br>  <span class="hljs-meta">@required</span> BuildSystem buildSystem,<br>&#125;) <span class="hljs-keyword">async</span> &#123;<br>  <span class="hljs-keyword">assert</span>(environment != <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">assert</span>(buildSystem != <span class="hljs-keyword">null</span>);<br><br>  <span class="hljs-keyword">final</span> FileSystem fileSystem = environment.fileSystem;<br>  <span class="hljs-keyword">final</span> File l10nYamlFile = fileSystem.file(<br>    fileSystem.path.join(environment.projectDir.path, <span class="hljs-string">&#x27;l10n.yaml&#x27;</span>));<br><br>  <span class="hljs-comment">// If pubspec.yaml has generate:true and if l10n.yaml exists in the</span><br>  <span class="hljs-comment">// root project directory, check to see if a synthetic package should</span><br>  <span class="hljs-comment">// be generated for gen_l10n.</span><br>  <span class="hljs-keyword">if</span> (!l10nYamlFile.existsSync()) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">final</span> YamlNode yamlNode = loadYamlNode(l10nYamlFile.readAsStringSync());<br>  <span class="hljs-keyword">if</span> (yamlNode.value != <span class="hljs-keyword">null</span> &amp;&amp; yamlNode <span class="hljs-keyword">is</span>! YamlMap) &#123;<br>    throwToolExit(<br>      <span class="hljs-string">&#x27;Expected <span class="hljs-subst">$&#123;l10nYamlFile.path&#125;</span> to contain a map, instead was <span class="hljs-subst">$yamlNode</span>&#x27;</span><br>    );<br>  &#125;<br><br>  BuildResult result;<br>  <span class="hljs-comment">// If an l10n.yaml file exists but is empty, attempt to build synthetic</span><br>  <span class="hljs-comment">// package with default settings.</span><br>  <span class="hljs-keyword">if</span> (yamlNode.value == <span class="hljs-keyword">null</span>) &#123;<br>    result = <span class="hljs-keyword">await</span> buildSystem.build(<br>      <span class="hljs-keyword">const</span> GenerateLocalizationsTarget(),<br>      environment,<br>    );<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">final</span> YamlMap yamlMap = yamlNode <span class="hljs-keyword">as</span> YamlMap;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span> value = yamlMap[<span class="hljs-string">&#x27;synthetic-package&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">is</span>! <span class="hljs-built_in">bool</span> &amp;&amp; value != <span class="hljs-keyword">null</span>) &#123;<br>      throwToolExit(<br>        <span class="hljs-string">&#x27;Expected &quot;synthetic-package&quot; to have a bool value, &#x27;</span><br>        <span class="hljs-string">&#x27;instead was &quot;<span class="hljs-subst">$value</span>&quot;&#x27;</span><br>      );<br>    &#125;<br><br>    <span class="hljs-comment">// Generate gen_l10n synthetic package only if synthetic-package: true or</span><br>    <span class="hljs-comment">// synthetic-package is null.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">bool</span> isSyntheticL10nPackage = value <span class="hljs-keyword">as</span> <span class="hljs-built_in">bool</span> ?? <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (!isSyntheticL10nPackage) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br><br>  result = <span class="hljs-keyword">await</span> buildSystem.build(<br>    <span class="hljs-keyword">const</span> GenerateLocalizationsTarget(),<br>    environment,<br>  );<br><br>  <span class="hljs-keyword">if</span> (result == <span class="hljs-keyword">null</span> || result.hasException) &#123;<br>    throwToolExit(<span class="hljs-string">&#x27;Generating synthetic localizations package has failed.&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到上述代码片段中的31、53行都调用了buildSystem.build，这不是重复调用了？？</p><p>为了确认这个问题，首先我将本地Flutter安装目录下的bin&#x2F;cache&#x2F;flutter_tools.snapshot删掉，这个文件是Flutter在运行的时候将flutter_tools这个包预先编译成的二进制文件，从而避免每次运行都需要解释执行Dart源码。因此，在修改本地代码之前，需要删掉相应的snapshot文件。</p><p>在generate_synthetic_packages.dart文件中的两个build调用前都加上print日志打印，然后观察这段代码，可以看出当<code>(yamlNode.value == null || yamlNode is YamlMap) &amp;&amp; yamlNode.value == null</code>，也就是yamlNode.value为null的时候能够触发。</p><p>在l10n.yaml中为空字符串或者null的时候，yamlNode.value为null，而进一步确认packages&#x2F;flutter_tools&#x2F;lib&#x2F;src&#x2F;localizations&#x2F;localizations_utils.dart：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart">LocalizationOptions parseLocalizationsOptions(&#123;<br>  <span class="hljs-meta">@required</span> File file,<br>  <span class="hljs-meta">@required</span> Logger logger,<br>&#125;) &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> contents = file.readAsStringSync();<br>  <span class="hljs-keyword">if</span> (contents.trim().isEmpty) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> LocalizationOptions();<br>  &#125;<br>  <span class="hljs-keyword">final</span> YamlNode yamlNode = loadYamlNode(file.readAsStringSync());<br>  <span class="hljs-keyword">if</span> (yamlNode <span class="hljs-keyword">is</span>! YamlMap) &#123;<br>    logger.printError(<span class="hljs-string">&#x27;Expected <span class="hljs-subst">$&#123;file.path&#125;</span> to contain a map, instead was <span class="hljs-subst">$yamlNode</span>&#x27;</span>);<br>    <span class="hljs-keyword">throw</span> Exception();<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可见如果l10n.yaml包含注释或者null等内容，则会抛出异常，从而在第一次build调用中就会中止。</p><p>因此我们打开l10n.yaml，清空其中的内容，然后运行<code>flutter pub get</code>，你就会看到两次build调用的日志打印了。由于这篇文章是拖延了两个月后才写的，当时的现场我懒得复原了www</p><p>事实上，只要GenerateLocalizationsTarget的实现是稳定的，那么不论重复运行多少次，应该都能生成一样的本地化相关代码，这个bug并不算严重，但是<del>为了环保</del>我还是尝试了修复。</p><p>修复办法平平无奇，这里就不贴了。</p><h1 id="将bug掩藏起来的错误的单元测试"><a href="#将bug掩藏起来的错误的单元测试" class="headerlink" title="将bug掩藏起来的错误的单元测试"></a>将bug掩藏起来的错误的单元测试</h1><p>Flutter这样大型的开源项目必然会使用单元测试高强度覆盖，以保证代码质量。上面这个bug涉及的代码也是有单元测试的，那么为什么单元测试没有测出这个问题呢？</p><p>上述文件对应的测试代码在packages&#x2F;flutter_tools&#x2F;test&#x2F;general.shard&#x2F;dart&#x2F;generate_synthetic_packages_test.dart，可以看到第一个测试用例就是l10n.yaml为空的场景：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  testWithoutContext(<span class="hljs-string">&#x27;calls buildSystem.build with blank l10n.yaml file&#x27;</span>, () &#123;<br>    <span class="hljs-comment">// ...</span><br>    expect(<br>      () =&gt; generateLocalizationsSyntheticPackage(<br>        environment: environment,<br>        buildSystem: buildSystem,<br>      ),<br>      throwsToolExit(message: <span class="hljs-string">&#x27;Generating synthetic localizations package has failed.&#x27;</span>),<br>    );<br>    <span class="hljs-comment">// [BuildSystem] should have called build with [GenerateLocalizationsTarget].</span><br>    verify(buildSystem.build(<br>      <span class="hljs-keyword">const</span> GenerateLocalizationsTarget(),<br>      environment,<br>    )).called(<span class="hljs-number">1</span>);<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我本地运行这个用例，发现这个用例居然是可以通过的！</p><p>百思不得其解之际，我在verify处和build调用处都打了断点，意外发现调用顺序如下：</p><ol><li>第一次build调用</li><li>verify</li><li>第二次build调用</li></ol><p>这就奇怪了，第二次build调用还没开始的时候，generateLocalizationsSyntheticPackage还没有执行完毕，怎么就走到verify了呢？</p><p>我随便点开了<code>throwsToolExit</code>的实现，发现<code>throwsToolExit</code>实际上返回的是<code>throwsA</code>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// packages/flutter_tools/test/src/common.dart</span><br><span class="hljs-comment">/// <span class="language-markdown">Matcher for functions that throw [ToolExit].</span></span><br>Matcher throwsToolExit(&#123; <span class="hljs-built_in">int</span> exitCode, <span class="hljs-built_in">Pattern</span> message &#125;) &#123;<br>  Matcher matcher = isToolExit;<br>  <span class="hljs-keyword">if</span> (exitCode != <span class="hljs-keyword">null</span>) &#123;<br>    matcher = allOf(matcher, (ToolExit e) =&gt; e.exitCode == exitCode);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (message != <span class="hljs-keyword">null</span>) &#123;<br>    matcher = allOf(matcher, (ToolExit e) =&gt; e.message?.contains(message) ?? <span class="hljs-keyword">false</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> throwsA(matcher);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后打开Flutter的官方文档：</p><blockquote><h1 id="throwsA-function"><a href="#throwsA-function" class="headerlink" title="throwsA function"></a>throwsA function</h1><p>This can be used to match three kinds of objects:</p><ul><li>A <a href="https://api.flutter.dev/flutter/dart-core/Function-class.html">Function</a> that throws an exception when called. The function cannot take any arguments. If you want to test that a function expecting arguments throws, wrap it in another zero-argument function that calls the one you want to test.</li><li>A <a href="https://api.flutter.dev/flutter/dart-async/Future-class.html">Future</a> that completes with an exception. Note that this creates an asynchronous expectation. The call to <code>expect()</code> that includes this will return immediately and execution will continue. Later, when the future completes, the actual expectation will run.</li><li>A <a href="https://api.flutter.dev/flutter/dart-core/Function-class.html">Function</a> that returns a <a href="https://api.flutter.dev/flutter/dart-async/Future-class.html">Future</a> that completes with an exception.</li></ul><p>In all three cases, when an exception is thrown, this will test that the exception object matches <code>matcher</code>. If <code>matcher</code> is not an instance of <a href="https://api.flutter.dev/flutter/package-matcher_matcher/Matcher-class.html">Matcher</a>, it will implicitly be treated as <code>equals(matcher)</code>.</p></blockquote><p>可以看到，如果被expect的对象是一个Future对象，那么这个expect会立刻返回，而不会等待Future执行完毕。在我们这个场景下，expect的对象不是Future，而是一个返回Future的Function，但阅读throwsA的实现会发现这种情况下expect也是会立刻返回的。</p><p>在一般情况下，使用throwsA并没有什么问题，throwsA可以保证测试用例所在的方法执行完毕后仍然保持测试用例处于未结束的状态，等待这个expect获得结果后再结束。</p><p>在在这个用例中，我们expect之后马上就调用了verify检查build被调用的次数，显然此时throwsA的这个特性就会带来问题：此时build调用次数确实为1，但后一次调用还在来的路上呢。</p><p>查阅expect的文档：</p><blockquote><p>Certain matchers, like <a href="https://pub.dev/documentation/test_api/latest/test_api/completion.html">completion</a> and <a href="https://pub.dev/documentation/test_api/latest/test_api/throwsA.html">throwsA</a>, either match or fail asynchronously. When you use <a href="https://pub.dev/documentation/test_api/latest/test_api/expect.html">expect</a> with these matchers, it ensures that the test doesn’t complete until the matcher has either matched or failed. If you want to wait for the matcher to complete before continuing the test, you can call <a href="https://pub.dev/documentation/test_api/latest/test_api/expectLater.html">expectLater</a> instead and <code>await</code> the result.</p></blockquote><p>于是可见，我们应该把测试用例改成：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-comment">// 增加async关键字，我们需要使用await</span><br>  testWithoutContext(<span class="hljs-string">&#x27;calls buildSystem.build with blank l10n.yaml file&#x27;</span>, () <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 改用expectLater，并await以保证被expect的方法已经结束并返回</span><br>    <span class="hljs-keyword">await</span> expectLater(<br>      () =&gt; generateLocalizationsSyntheticPackage(<br>        environment: environment,<br>        buildSystem: buildSystem,<br>      ),<br>      throwsToolExit(message: <span class="hljs-string">&#x27;Generating synthetic localizations package has failed.&#x27;</span>),<br>    );<br>    <span class="hljs-comment">// [BuildSystem] should have called build with [GenerateLocalizationsTarget].</span><br>    verify(buildSystem.build(<br>      <span class="hljs-keyword">const</span> GenerateLocalizationsTarget(),<br>      environment,<br>    )).called(<span class="hljs-number">1</span>);<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样修改之后，我们的测试用例就失败了，因此也就可以修改代码修复这个bug了。</p><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>throwsA会导致expect异步执行，在和verify搭配使用的时候这样的错误隐蔽又致命，但似乎Flutter和Dart的文档中都没有特别提到这一点，不知道Flutter代码中还有多少这样错误的测试用例代码呢www</p><p>另外，明明都是自动生成代码，JSON Annotation库使用的是Build Runner，但Flutter Localization使用的却是Flutter Generate，而且从代码中可以看到这块逻辑几乎完全耦合在Flutter代码中（以至于pubspec.yaml中的<code>generate</code>似乎仅仅用于本地化这个模块），为什么不把Localization也交给Build Runner来做呢？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>i18n</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android代码混淆问题处理两则</title>
    <link href="/2019/09/10/two-issues-on-android-obfuscation/"/>
    <url>/2019/09/10/two-issues-on-android-obfuscation/</url>
    
    <content type="html"><![CDATA[<p>代码混淆是Android开发的必经之路，尤其是SDK开发，启用混淆一定程度上加大了制品被逆向工程的难度，同时也能减小制品体积。</p><p>然而代码混淆之路并非一帆风顺，而且往往在运行到目标代码之前，无法确定混淆是否出了问题。本文记载两则代码混淆中遇到的问题和处理方案。</p><p>本文提及的代码可以在<a href="https://github.com/perqin/ProGuardBugTest">https://github.com/perqin/ProGuardBugTest</a>找到。</p><h2 id="ProGuard处理可选依赖错误"><a href="#ProGuard处理可选依赖错误" class="headerlink" title="ProGuard处理可选依赖错误"></a>ProGuard处理可选依赖错误</h2><p>在我维护的SDK项目中的一个版本中，我需要支持多个SDK之间不强制依赖。Base模块为基础库；Core和GUI模块均依赖Base库，但GUI模块对Core的依赖是可选的。</p><p>在实现上，我让Web对Core的依赖为<code>compileOnly</code>：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// gui/build.gradle</span><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;java-library&#x27;</span><br><br>dependencies &#123;<br>    implementation project(<span class="hljs-string">&#x27;:base&#x27;</span>)<br>    compileOnly project(<span class="hljs-string">&#x27;:core&#x27;</span>)<br>&#125;<br><br>sourceCompatibility = <span class="hljs-string">&quot;7&quot;</span><br>targetCompatibility = <span class="hljs-string">&quot;7&quot;</span><br><br></code></pre></td></tr></table></figure><p>在Base模块中有<code>Account</code>类，在Core模块中则有一个接口使用了该类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.core;<br><br><span class="hljs-keyword">import</span> com.example.base.Account;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountStore</span> &#123;<br>    Account <span class="hljs-title function_">getAccount</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来，GUI模块中有一段对Core模块的选择性调用逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.gui;<br><br><span class="hljs-keyword">import</span> com.example.core.AccountStore;<br><span class="hljs-keyword">import</span> com.example.core.CoreMain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiMain</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> HAS_CORE;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">boolean</span> hasCore;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoreMain</span>();<br>            hasCore = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError e) &#123;<br>            hasCore = <span class="hljs-literal">false</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;hasCore: &quot;</span> + hasCore);<br>        HAS_CORE = hasCore;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AccountStore</span> <span class="hljs-variable">accountStore</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccountStore</span><span class="hljs-params">(AccountStore accountStore)</span> &#123;<br>        <span class="hljs-built_in">this</span>.accountStore = accountStore;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">tryGetAccountName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (HAS_CORE) &#123;<br>            <span class="hljs-keyword">if</span> (accountStore != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> accountStore.getAccount().name;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该类通过Core中才有的<code>CoreMain</code>类来判断可选依赖的类是否存在，<code>tryGetAccountName</code>中进行了判断，如果Core模块不存在，必定不会引用到<code>AccountStore</code>接口，也不应该会出现任何问题。</p><p>接下来，我们将Base和Gui分别打包为jar并给app模块引用，注意Core未被引用。</p><p>然后我们<strong>启用代码混淆</strong>，注意添加以下规则避免混淆失败：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># ProGuard rule file</span><br>-dontwarn <span class="hljs-keyword">com</span>.example.**<br></code></pre></td></tr></table></figure><p>随后在<code>gradle.properties</code>中禁用R8（原因后面会提到）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">android.enableR8</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure><p>最后我们进行简单的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        System.out.println(<span class="hljs-string">&quot;account: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>());<br>        System.out.println(<span class="hljs-string">&quot;account name: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiMain</span>().tryGetAccountName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不出意外的话，上面这段人畜无害的代码在Android 8.0会翻车：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">2019</span>-<span class="hljs-number">09</span>-<span class="hljs-number">10</span> <span class="hljs-number">21</span>:<span class="hljs-number">56</span>:<span class="hljs-number">10.327</span> <span class="hljs-number">3667</span>-<span class="hljs-number">3667</span>/? E/AndroidRuntime: FATAL EXCEPTION: main<br>    Process: com.example.proguardbugtest, PID: <span class="hljs-number">3667</span><br>    java.lang.VerifyError: Verifier rejected <span class="hljs-keyword">class</span> com.example.proguardbugtest.MainActivity: void com.example.proguardbugtest.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MainActivity</span>.</span></span>on<span class="hljs-constructor">Create(<span class="hljs-params">android</span>.<span class="hljs-params">os</span>.Bundle)</span> failed <span class="hljs-keyword">to</span> verify: void com.example.proguardbugtest.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MainActivity</span>.</span></span>on<span class="hljs-constructor">Create(<span class="hljs-params">android</span>.<span class="hljs-params">os</span>.Bundle)</span>: <span class="hljs-literal">[<span class="hljs-number">0x3D</span>]</span> cannot access instance field java.lang.String com.example.a.a.a from <span class="hljs-keyword">object</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> Unresolved Reference: com.example.base.Account (declaration <span class="hljs-keyword">of</span> &#x27;com.example.proguardbugtest.MainActivity&#x27; appears <span class="hljs-keyword">in</span> /data/app/com.example.proguardbugtest-<span class="hljs-number">5</span>HQbNJwMRzeKoIg1ZzDmjA==/base.apk)<br>        at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Native Method)</span><br>        at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Instrumentation</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Activity(Instrumentation.<span class="hljs-params">java</span>:1173)</span><br>        at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>perform<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:2708)</span><br>        at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>handle<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:2892)</span><br>        at android.app.ActivityThread.-wrap11(Unknown Source:<span class="hljs-number">0</span>)<br>        at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread$H</span>.</span></span>handle<span class="hljs-constructor">Message(ActivityThread.<span class="hljs-params">java</span>:1593)</span><br>        at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Handler</span>.</span></span>dispatch<span class="hljs-constructor">Message(Handler.<span class="hljs-params">java</span>:105)</span><br>        at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>loop(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>java:<span class="hljs-number">164</span>)<br>        at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>java:<span class="hljs-number">6541</span>)<br>        at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke(Native Method)<br>        at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Zygote$MethodAndArgsCaller</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Zygote</span>.</span></span>java:<span class="hljs-number">240</span>)<br>        at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>java:<span class="hljs-number">767</span>)<br></code></pre></td></tr></table></figure><p>在谷歌搜索了很久，对于<code>VerifyError</code>这个简单的错误很难找到明确的答案，只能拔出Android Studio大宝剑，分析apk字节码一探究竟。</p><p>我将<code>MainActivity</code>的<code>onCreate</code>的完整字节码粘贴到下面，其中<code>########</code>开头的是我补充的注释：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span> onCreate(<span class="hljs-class">Landroid/os/Bundle;</span>)V<br><span class="hljs-keyword">    .registers</span> 5<br><br>   <span class="hljs-built_in"> invoke-super </span>&#123;p0, p1&#125;, <span class="hljs-class">Landroidx/appcompat/app/c;</span>-&gt;onCreate(<span class="hljs-class">Landroid/os/Bundle;</span>)V<br><br>   <span class="hljs-built_in"> const </span>p1, 0x7f0a001c<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0, p1&#125;, <span class="hljs-class">Lcom/example/proguardbugtest/MainActivity;</span>-&gt;setContentView(I)V<br><br>   <span class="hljs-built_in"> sget-object </span>p1, <span class="hljs-class">Ljava/lang/System;</span>-&gt;out:<span class="hljs-class">Ljava/io/PrintStream;</span><br><br>   <span class="hljs-built_in"> new-instance </span>v0, <span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;account: &quot;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v0, v1&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Ljava/lang/String;</span>)V<br><br>    <span class="hljs-comment">######## 1</span><br>   <span class="hljs-built_in"> new-instance </span>v1, <span class="hljs-class">Lcom/example/a/a;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v1&#125;, <span class="hljs-class">Lcom/example/a/a;</span>-&gt;&lt;init&gt;()V<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="hljs-class">Ljava/lang/Object;</span>)<span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v0<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, v0&#125;, <span class="hljs-class">Ljava/io/PrintStream;</span>-&gt;println(<span class="hljs-class">Ljava/lang/String;</span>)V<br><br>   <span class="hljs-built_in"> sget-object </span>p1, <span class="hljs-class">Ljava/lang/System;</span>-&gt;out:<span class="hljs-class">Ljava/io/PrintStream;</span><br><br>   <span class="hljs-built_in"> new-instance </span>v0, <span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;account name: &quot;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v0, v1&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Ljava/lang/String;</span>)V<br><br>   <span class="hljs-built_in"> new-instance </span>v1, <span class="hljs-class">Lcom/example/b/a;</span><br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v1&#125;, <span class="hljs-class">Lcom/example/b/a;</span>-&gt;&lt;init&gt;()V<br><br>   <span class="hljs-built_in"> sget-boolean </span>v2, <span class="hljs-class">Lcom/example/b/a;</span>-&gt;a:Z<br><br>   <span class="hljs-built_in"> if-eqz </span>v2,<span class="hljs-keyword"> :cond_40</span><br><br>   <span class="hljs-built_in"> iget-object </span>v2, v1, <span class="hljs-class">Lcom/example/b/a;</span>-&gt;b:<span class="hljs-class">Lcom/example/core/AccountStore;</span><br><br>   <span class="hljs-built_in"> if-eqz </span>v2,<span class="hljs-keyword"> :cond_40</span><br><br>   <span class="hljs-built_in"> iget-object </span>v1, v1, <span class="hljs-class">Lcom/example/b/a;</span>-&gt;b:<span class="hljs-class">Lcom/example/core/AccountStore;</span><br><br>    <span class="hljs-comment">######## 2</span><br>   <span class="hljs-built_in"> invoke-interface </span>&#123;v1&#125;, <span class="hljs-class">Lcom/example/core/AccountStore;</span>-&gt;getAccount()<span class="hljs-class">Lcom/example/base/Account;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v1<br><br>   <span class="hljs-built_in"> iget-object </span>v1, v1, <span class="hljs-class">Lcom/example/a/a;</span>-&gt;a:<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> goto </span>:goto_42<br><br>   <span class="hljs-keyword"> :cond_40</span><br>   <span class="hljs-built_in"> const-string </span>v1, <span class="hljs-string">&quot;&quot;</span><br><br>   <span class="hljs-keyword"> :goto_42</span><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;append(<span class="hljs-class">Ljava/lang/String;</span>)<span class="hljs-class">Ljava/lang/StringBuilder;</span><br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v0&#125;, <span class="hljs-class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="hljs-class">Ljava/lang/String;</span><br><br>   <span class="hljs-built_in"> move-result-object </span>v0<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p1, v0&#125;, <span class="hljs-class">Ljava/io/PrintStream;</span>-&gt;println(<span class="hljs-class">Ljava/lang/String;</span>)V<br><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br></code></pre></td></tr></table></figure><p>可以看到，「1」处注释的<code>new-instance</code>指令显然是要构造<code>Account</code>对象，从这里我们也可以得知<code>com.example.base.Account</code>被混淆成了<code>com.example.a.a</code>，这个也可以在ProGuard生成的mapping文件中中得到证实。</p><p>然而，「2」处注释的<code>invoke-interface</code>却出现了<code>com/example/base/Account</code>！之所以这段代码出现在了MainActivity中，是因为ProGuard进行了优化，但已经被混淆的类却以原名的形式出现在这里，这不科学。</p><p>好吧，就算这样，但我们的Core包并不存在，也不会执行到这里，不应该出现崩溃才对，而这也是为什么我前面特别提到Android 8.0了。经过验证，这段代码在Android 8.0上必定崩溃，但在我的Android Q上却稳如老狗，可以认为不同版本的Android对类的校验逻辑不同，Android 8.0的校验显然过分严格。</p><p>问题的真相调查清楚，接下来就是解决了，我们当然可以直接将<code>Account</code>加入到<code>-keep</code>规则中，但这只是治标不治本。</p><p>另一个选择则是放弃辣鸡ProGuard，转向R8。R8是谷歌开发的混淆、优化工具，用以代替ProGuard，从Android 3.4开始成为默认的混淆工具，我们只需要将前面提到的“禁用R8”的开关去掉即可。但是要注意，R8目前也未必稳定，就在不久前，我就遇到过R8对枚举类型的混淆错误导致崩溃的情况；同时R8的一些默认行为也和ProGuard不同，例如它会默认将未被<code>-keep</code>的类的包名进行重定向，即<code>com.example.app.Core</code>在ProGuard中可能会被混淆为<code>com.example.a.a</code>，但在R8中会被混淆为<code>a.a.a.a</code>，这些需要注意。</p><p>至于我，思前想后，还是觉得这样的可选依赖有些歪门邪道，风险难以控制，干脆让Gui强制依赖Core了（摊手</p><h2 id="Serializable对象混淆后不可用"><a href="#Serializable对象混淆后不可用" class="headerlink" title="Serializable对象混淆后不可用"></a><code>Serializable</code>对象混淆后不可用</h2><p>接下来的问题会在Android 7.0上翻车。</p><p>在开发中，我们有一个数据结构需要在两个Activity之间传递，于是我们直接让它实现了<code>Serializable</code>接口，简单粗暴地丢进了Intent里，谁知后来测试同学就反馈SDK在启动该Activity时在魅族手机上闪退了。</p><p>由于<del>贫穷的</del>测试组同学只反馈了这部魅族手机有问题，其他手机正常，所以我一开始以为魅族又魔改系统用力过猛，好在后来自己新建了一个Android 7.0的模拟器，竟然复现了这个问题，才有机会找到问题的真正原因。</p><p>首先，我们有这样一段简单的数据结构的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.proguardbugtest;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableMeta</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">7822771794489130246L</span>;<br><br>    <span class="hljs-keyword">private</span> String nickname;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    SerializableMeta(String nickname, <span class="hljs-type">int</span> age) &#123;<br>        <span class="hljs-built_in">this</span>.nickname = nickname;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以及这样一段启动Activity的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        findViewById(R.id.startButton).setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MainActivity.<span class="hljs-built_in">this</span>, MainActivity.class);<br>                intent.putExtra(<span class="hljs-string">&quot;meta&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializableMeta</span>(<span class="hljs-string">&quot;Perqin&quot;</span>, <span class="hljs-number">233</span>));<br>                startActivity(intent);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后，我们再简单地配置代码混淆规则：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">-keepclassmembers <span class="hljs-class"><span class="hljs-keyword">class</span> * <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> java.io.ObjectStreamField[] serialPersistentFields;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream)</span></span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream)</span></span>;<br>    java.lang.<span class="hljs-function">Object <span class="hljs-title">writeReplace</span><span class="hljs-params">()</span></span>;<br>    java.lang.<span class="hljs-function">Object <span class="hljs-title">readResolve</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上规则来自ProGuard的官方文档，但<strong>后面就会发现这里是有问题的</strong>。</p><p>最后，我们简单地启动，简单地点击按钮，然后：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2019</span>-<span class="hljs-number">09</span>-<span class="hljs-number">10</span> <span class="hljs-number">22</span>:<span class="hljs-number">56</span>:<span class="hljs-number">02.456</span> <span class="hljs-number">6516</span>-<span class="hljs-number">6516</span>/com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.proguardbugtest</span> E/AndroidRuntime: FATAL EXCEPTION: <span class="hljs-selector-tag">main</span><br>    Process: com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.proguardbugtest</span>, PID: <span class="hljs-number">6516</span><br>    java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.InternalError</span><br>        at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectStreamClass</span>.&lt;init&gt;(ObjectStreamClass<span class="hljs-selector-class">.java</span>:<span class="hljs-number">509</span>)<br>        at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectStreamClass</span><span class="hljs-selector-class">.lookup</span>(ObjectStreamClass<span class="hljs-selector-class">.java</span>:<span class="hljs-number">354</span>)<br>        at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectOutputStream</span><span class="hljs-selector-class">.writeObject0</span>(ObjectOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1165</span>)<br>        at java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectOutputStream</span><span class="hljs-selector-class">.writeObject</span>(ObjectOutputStream<span class="hljs-selector-class">.java</span>:<span class="hljs-number">346</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Parcel</span><span class="hljs-selector-class">.writeSerializable</span>(Parcel<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1521</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Parcel</span><span class="hljs-selector-class">.writeValue</span>(Parcel<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1474</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Parcel</span><span class="hljs-selector-class">.writeArrayMapInternal</span>(Parcel<span class="hljs-selector-class">.java</span>:<span class="hljs-number">723</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.BaseBundle</span><span class="hljs-selector-class">.writeToParcelInner</span>(BaseBundle<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1408</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Bundle</span><span class="hljs-selector-class">.writeToParcel</span>(Bundle<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1133</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Parcel</span><span class="hljs-selector-class">.writeBundle</span>(Parcel<span class="hljs-selector-class">.java</span>:<span class="hljs-number">763</span>)<br>        at android<span class="hljs-selector-class">.content</span><span class="hljs-selector-class">.Intent</span><span class="hljs-selector-class">.writeToParcel</span>(Intent<span class="hljs-selector-class">.java</span>:<span class="hljs-number">8655</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityManagerProxy</span><span class="hljs-selector-class">.startActivity</span>(ActivityManagerNative<span class="hljs-selector-class">.java</span>:<span class="hljs-number">3052</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Instrumentation</span><span class="hljs-selector-class">.execStartActivity</span>(Instrumentation<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1518</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Activity</span><span class="hljs-selector-class">.startActivityForResult</span>(Activity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">4224</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Activity</span><span class="hljs-selector-class">.startActivityForResult</span>(Activity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">4183</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Activity</span><span class="hljs-selector-class">.startActivity</span>(Activity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">4507</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Activity</span><span class="hljs-selector-class">.startActivity</span>(Activity<span class="hljs-selector-class">.java</span>:<span class="hljs-number">4475</span>)<br>        at com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.proguardbugtest</span>.MainActivity$<span class="hljs-number">1</span><span class="hljs-selector-class">.onClick</span>(Unknown Source)<br>        at android<span class="hljs-selector-class">.view</span><span class="hljs-selector-class">.View</span><span class="hljs-selector-class">.performClick</span>(View<span class="hljs-selector-class">.java</span>:<span class="hljs-number">5610</span>)<br>        at android<span class="hljs-selector-class">.view</span>.View<span class="hljs-variable">$PerformClick</span><span class="hljs-selector-class">.run</span>(View<span class="hljs-selector-class">.java</span>:<span class="hljs-number">22265</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Handler</span><span class="hljs-selector-class">.handleCallback</span>(Handler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">751</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Handler</span><span class="hljs-selector-class">.dispatchMessage</span>(Handler<span class="hljs-selector-class">.java</span>:<span class="hljs-number">95</span>)<br>        at android<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.Looper</span><span class="hljs-selector-class">.loop</span>(Looper<span class="hljs-selector-class">.java</span>:<span class="hljs-number">154</span>)<br>        at android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityThread</span><span class="hljs-selector-class">.main</span>(ActivityThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">6077</span>)<br>        at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Native Method)<br>        at com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.os</span>.ZygoteInit<span class="hljs-variable">$MethodAndArgsCaller</span><span class="hljs-selector-class">.run</span>(ZygoteInit<span class="hljs-selector-class">.java</span>:<span class="hljs-number">866</span>)<br>        at com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.ZygoteInit</span><span class="hljs-selector-class">.main</span>(ZygoteInit<span class="hljs-selector-class">.java</span>:<span class="hljs-number">756</span>)<br></code></pre></td></tr></table></figure><p>这个崩溃甚至只有类名，连异常消息都不给了。如果此时去分析字节码，是不会发现什么异常的。</p><p>于是，我根据错误去读源码，以下是抛出异常的代码（地址：<a href="http://androidxref.com/7.0.0_r1/xref/libcore/ojluni/src/main/java/java/io/ObjectStreamClass.java#509">http://androidxref.com/7.0.0_r1&#x2F;xref&#x2F;libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;io&#x2F;ObjectStreamClass.java#509</a>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">ObjectStreamClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; cl)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cl = cl;<br>    name = cl.getName();<br>    isProxy = Proxy.isProxyClass(cl);<br>    isEnum = Enum.class.isAssignableFrom(cl);<br>    serializable = Serializable.class.isAssignableFrom(cl);<br>    externalizable = Externalizable.class.isAssignableFrom(cl);<br><br>    Class&lt;?&gt; superCl = cl.getSuperclass();<br>    superDesc = (superCl != <span class="hljs-literal">null</span>) ? lookup(superCl, <span class="hljs-literal">false</span>) : <span class="hljs-literal">null</span>;<br>    localDesc = <span class="hljs-built_in">this</span>;<br><br>    <span class="hljs-keyword">if</span> (serializable) &#123;<br>        AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;<br>            <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">if</span> (isEnum) &#123;<br>                    suid = Long.valueOf(<span class="hljs-number">0</span>);<br>                    fields = NO_FIELDS;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (cl.isArray()) &#123;<br>                    fields = NO_FIELDS;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                suid = getDeclaredSUID(cl);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fields = getSerialFields(cl);<br>                    computeFieldOffsets();<br>                &#125; <span class="hljs-keyword">catch</span> (InvalidClassException e) &#123;<br>                    serializeEx = deserializeEx =<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInfo</span>(e.classname, e.getMessage());<br>                    fields = NO_FIELDS;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (externalizable) &#123;<br>                    cons = getExternalizableConstructor(cl);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cons = getSerializableConstructor(cl);<br>                    writeObjectMethod = getPrivateMethod(cl, <span class="hljs-string">&quot;writeObject&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; ObjectOutputStream.class &#125;,<br>                        Void.TYPE);<br>                    readObjectMethod = getPrivateMethod(cl, <span class="hljs-string">&quot;readObject&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; ObjectInputStream.class &#125;,<br>                        Void.TYPE);<br>                    readObjectNoDataMethod = getPrivateMethod(<br>                        cl, <span class="hljs-string">&quot;readObjectNoData&quot;</span>, <span class="hljs-literal">null</span>, Void.TYPE);<br>                    hasWriteObjectData = (writeObjectMethod != <span class="hljs-literal">null</span>);<br>                &#125;<br>                writeReplaceMethod = getInheritableMethod(<br>                    cl, <span class="hljs-string">&quot;writeReplace&quot;</span>, <span class="hljs-literal">null</span>, Object.class);<br>                readResolveMethod = getInheritableMethod(<br>                    cl, <span class="hljs-string">&quot;readResolve&quot;</span>, <span class="hljs-literal">null</span>, Object.class);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        suid = Long.valueOf(<span class="hljs-number">0</span>);<br>        fields = NO_FIELDS;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        fieldRefl = getReflector(fields, <span class="hljs-built_in">this</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InvalidClassException ex) &#123;<br>        <span class="hljs-comment">// field mismatches impossible when matching local fields vs. self</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalError</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (deserializeEx == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (isEnum) &#123;<br>            deserializeEx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInfo</span>(name, <span class="hljs-string">&quot;enum type&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cons == <span class="hljs-literal">null</span>) &#123;<br>            deserializeEx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInfo</span>(name, <span class="hljs-string">&quot;no valid constructor&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; fields.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (fields[i].getField() == <span class="hljs-literal">null</span>) &#123;<br>            defaultSerializeEx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInfo</span>(<br>                name, <span class="hljs-string">&quot;unmatched serializable field(s) declared&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>追溯<code>getReflector</code>下去，最终我们定位到抛出异常的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ObjectStreamField[] matchFields(ObjectStreamField[] fields,<br>                                                   ObjectStreamClass localDesc)<br>        <span class="hljs-keyword">throws</span> InvalidClassException<br>    &#123;<br>        ObjectStreamField[] localFields = (localDesc != <span class="hljs-literal">null</span>) ?<br>            localDesc.fields : NO_FIELDS;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Even if fields == localFields, we cannot simply return localFields</span><br><span class="hljs-comment">         * here.  In previous implementations of serialization,</span><br><span class="hljs-comment">         * ObjectStreamField.getType() returned Object.class if the</span><br><span class="hljs-comment">         * ObjectStreamField represented a non-primitive field and belonged to</span><br><span class="hljs-comment">         * a non-local class descriptor.  To preserve this (questionable)</span><br><span class="hljs-comment">         * behavior, the ObjectStreamField instances returned by matchFields</span><br><span class="hljs-comment">         * cannot report non-primitive types other than Object.class; hence</span><br><span class="hljs-comment">         * localFields cannot be returned directly.</span><br><span class="hljs-comment">         */</span><br><br>        ObjectStreamField[] matches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>[fields.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; fields.length; i++) &#123;<br>            <span class="hljs-type">ObjectStreamField</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> fields[i], m = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; localFields.length; j++) &#123;<br>                <span class="hljs-type">ObjectStreamField</span> <span class="hljs-variable">lf</span> <span class="hljs-operator">=</span> localFields[j];<br>                <span class="hljs-keyword">if</span> (f.getName().equals(lf.getName())) &#123;<br>                    <span class="hljs-keyword">if</span> ((f.isPrimitive() || lf.isPrimitive()) &amp;&amp;<br>                        f.getTypeCode() != lf.getTypeCode())<br>                    &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(localDesc.name,<br>                            <span class="hljs-string">&quot;incompatible types for field &quot;</span> + f.getName());<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (lf.getField() != <span class="hljs-literal">null</span>) &#123;<br>                        m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>(<br>                            lf.getField(), lf.isUnshared(), <span class="hljs-literal">false</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>(<br>                            lf.getName(), lf.getSignature(), lf.isUnshared());<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (m == <span class="hljs-literal">null</span>) &#123;<br>                m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>(<br>                    f.getName(), f.getSignature(), <span class="hljs-literal">false</span>);<br>            &#125;<br>            m.setOffset(f.getOffset());<br>            matches[i] = m;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matches;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，对<code>fields</code>和<code>localFields</code>进行比较的时候，当两个成员变量中至少有一个是基本类型，并且他们的变量名相同但类型不同的时候，就会抛出异常。</p><p>此时，我们再次拔出大宝剑，会看到<code>SerializableMeta</code>的两个成员变量名字是相同的：</p><p><img src="/fields-with-the-same-name.png"></p><p>查阅这个类在Android 6.0的代码（<a href="http://androidxref.com/6.0.1_r10/xref/libcore/luni/src/main/java/java/io/ObjectStreamClass.java">http://androidxref.com/6.0.1_r10&#x2F;xref&#x2F;libcore&#x2F;luni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;io&#x2F;ObjectStreamClass.java</a>）后发现，这个类在旧版本中甚至没有<code>matchFields</code>方法，应该是进行了较大的重构或更新；而查阅Android 7.1的代码（<a href="http://androidxref.com/7.1.1_r6/xref/libcore/ojluni/src/main/java/java/io/ObjectStreamClass.java">http://androidxref.com/7.1.1_r6&#x2F;xref&#x2F;libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;io&#x2F;ObjectStreamClass.java</a>），会发现谷歌爸爸很快就修复了这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// Android-changed: We can have fields with a same name and a different type.</span><br><span class="hljs-keyword">if</span> (f.getName().equals(lf.getName()) &amp;&amp;<br>  f.getSignature().equals(lf.getSignature())) &#123;<br>  <span class="hljs-keyword">if</span> (lf.getField() != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>实际上，Android和JVM都允许成员变量名称相同，混淆为尽可能相同的名字可以减小体积并增大阅读难度。</p><p>但<strong>实际上ProGuard默认并不会启用如此激进的混淆方式</strong>（写这篇文章的时候我艰难地尝试复现而不断失败……）。在我的GitHub代码上会看到我在混淆的规则中藏了一条：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-overloadaggressively</span><br></code></pre></td></tr></table></figure><p>查阅文档之后就会知道，启用这个选项后，才会导致成员变量被混淆为同样的名字。</p><p>继续搜索，发现<a href="https://sourceforge.net/p/proguard/bugs/274/">这篇帖子</a>，有人反馈了这个问题，作者表示：我并不太想给JRE的错误实现擦屁股，在代码里硬编码绕过这个问题（I’m not really eager to hard-code a workaround for what looks like a bug in the JRE implementation of serialization, but I’ll consider it.）。</p><p>最后是对于该问题的解决，移除<code>-overloadaggressively</code>当然有效，但如果这个规则来自某个依赖库的Consumer ProGuard规则的话，就不那么好用了。而另一个方法是使用<code>-useuniqueclassmembernames</code>，这个选项会避免生成同名成员，但带来的副作用就是增大体积，另外，<a href="https://sourceforge.net/p/proguard/bugs/413/">这篇帖子</a>也提到这个选项不只是刚好关掉了<code>-overloadaggressively</code>，还有其他副作用。</p><p>因此，最后我选择了RTFM：重新看了一下ProGuard官方文档中<a href="https://www.guardsquare.com/en/products/proguard/manual/examples#serializable">关于Serializable的规则建议</a>。使用它提供的完整规则后，会发现Serializable中的变量都被保留并不再导致问题出现了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>ProGuard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin将只读lambda表达式作为监听器使用的坑</title>
    <link href="/2017/06/27/kotlin-issue-on-adding-lambda-as-listener/"/>
    <url>/2017/06/27/kotlin-issue-on-adding-lambda-as-listener/</url>
    
    <content type="html"><![CDATA[<p>谷歌爸爸在今年的I&#x2F;O大会上公布Kotlin成为官方支持的Android开发语言，于是我也学习了一个，并试着用Kotlin写了一个监听剪切板的应用。谁知上架商店之后没几天就发现出现了玄学的bug。</p><p>我的应用有一个开关，可以开启或关闭一个Service，这个Service在开启的时候会把剪切板的监听器添加到<code>ClipboardManager</code>，而在停止的时候则会移除该监听器。奇怪的事情是，添加是可以的，移除却失败了。</p><p>百思不得其解之下，我开始查看<code>ClipboardManager</code>的源码，其中添加和移除监听器的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPrimaryClipChangedListener</span><span class="hljs-params">(OnPrimaryClipChangedListener what)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mPrimaryClipChangedListeners) &#123;<br>        <span class="hljs-keyword">if</span> (mPrimaryClipChangedListeners.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                getService().addPrimaryClipChangedListener(<br>                        mPrimaryClipChangedServiceListener, mContext.getOpPackageName());<br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>            &#125;<br>        &#125;<br>        mPrimaryClipChangedListeners.add(what);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removePrimaryClipChangedListener</span><span class="hljs-params">(OnPrimaryClipChangedListener what)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (mPrimaryClipChangedListeners) &#123;<br>        mPrimaryClipChangedListeners.remove(what);<br>        <span class="hljs-keyword">if</span> (mPrimaryClipChangedListeners.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                getService().removePrimaryClipChangedListener(<br>                        mPrimaryClipChangedServiceListener);<br>            &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>                <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而这个<code>mPrimaryClipChangedListeners</code>不过是个<code>ArrayList</code>而已。</p><p>如果排除了这是Android系统的bug，那么唯一的解释就是：移除监听器的时候传递的对象和一开始添加的监听器并不是同一个！（请自行脑补名侦探柯南BGM）</p><p>那么就让我们来看看这个Service被编译成什么样子了吧。下面是原来的Kotlin代码（省略了业务逻辑，只保留几个Log）：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyListenerService</span> : <span class="hljs-type">Service</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBind</span><span class="hljs-params">(p0: <span class="hljs-type">Intent</span>?)</span></span>: IBinder? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStartCommand</span><span class="hljs-params">(intent: <span class="hljs-type">Intent</span>?, flags: <span class="hljs-type">Int</span>, startId: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        clipboardManager.addPrimaryClipChangedListener(onPrimaryClipChangedListener)<br>        <span class="hljs-keyword">return</span> START_STICKY<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onDestroy()<br>        clipboardManager.removePrimaryClipChangedListener(onPrimaryClipChangedListener)<br>    &#125;<br><br>    <span class="hljs-keyword">val</span> clipboardManager <span class="hljs-keyword">by</span> lazy &#123; getSystemService(Context.CLIPBOARD_SERVICE) <span class="hljs-keyword">as</span> ClipboardManager &#125;<br>    <span class="hljs-keyword">val</span> onPrimaryClipChangedListener = &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;Clip Item count: &quot;</span> + clipboardManager.primaryClip.itemCount)<br>        <span class="hljs-built_in">Unit</span><br>    &#125;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">val</span> TAG = <span class="hljs-string">&quot;CopyListenerService&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我的<code>onPrimaryClipChangedListener</code>只是一个纯洁的lambda表达式而已。</p><p>我们点击菜单<code>Tools - Kotlin - Show Kotlin Bytecode</code>，右边会多出一个编辑器，我们点击那个编辑器顶部的<code>Decompile</code>按钮，左边的编辑器就多了一个<code>CopyListenerService.decompiled.java</code>的文件。由于是反编译的，所以非常丑而且还有很多IDE飘红，不过这不影响我们找出元凶。下面是反编译结果，巨长：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3.java</span><br><span class="hljs-keyword">package</span> com.perqin.copyshare;<br><br><span class="hljs-keyword">import</span> android.content.ClipboardManager.OnPrimaryClipChangedListener;<br><span class="hljs-keyword">import</span> kotlin.Metadata;<br><span class="hljs-keyword">import</span> kotlin.jvm.functions.Function0;<br><span class="hljs-keyword">import</span> kotlin.jvm.internal.Intrinsics;<br><br><span class="hljs-meta">@Metadata(</span><br><span class="hljs-meta">   mv = &#123;1, 1, 6&#125;,</span><br><span class="hljs-meta">   bv = &#123;1, 0, 1&#125;,</span><br><span class="hljs-meta">   k = 3</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnPrimaryClipChangedListener</span> &#123;<br>   <span class="hljs-comment">// $FF: synthetic field</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Function0 function;<br><br>   CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3(Function0 var1) &#123;<br>      <span class="hljs-built_in">this</span>.function = var1;<br>   &#125;<br><br>   <span class="hljs-comment">// $FF: synthetic method</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrimaryClipChanged</span><span class="hljs-params">()</span> &#123;<br>      Intrinsics.checkExpressionValueIsNotNull(<span class="hljs-built_in">this</span>.function.invoke(), <span class="hljs-string">&quot;invoke(...)&quot;</span>);<br>   &#125;<br>&#125;<br><span class="hljs-comment">// CopyListenerService.java</span><br><span class="hljs-keyword">package</span> com.perqin.copyshare;<br><br><span class="hljs-keyword">import</span> android.app.Service;<br><span class="hljs-keyword">import</span> android.content.ClipboardManager;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.content.ClipboardManager.OnPrimaryClipChangedListener;<br><span class="hljs-keyword">import</span> android.os.IBinder;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> kotlin.Lazy;<br><span class="hljs-keyword">import</span> kotlin.LazyKt;<br><span class="hljs-keyword">import</span> kotlin.Metadata;<br><span class="hljs-keyword">import</span> kotlin.TypeCastException;<br><span class="hljs-keyword">import</span> kotlin.Unit;<br><span class="hljs-keyword">import</span> kotlin.jvm.functions.Function0;<br><span class="hljs-keyword">import</span> kotlin.jvm.internal.DefaultConstructorMarker;<br><span class="hljs-keyword">import</span> kotlin.jvm.internal.PropertyReference1Impl;<br><span class="hljs-keyword">import</span> kotlin.jvm.internal.Reflection;<br><span class="hljs-keyword">import</span> kotlin.reflect.KProperty;<br><span class="hljs-keyword">import</span> org.jetbrains.annotations.NotNull;<br><span class="hljs-keyword">import</span> org.jetbrains.annotations.Nullable;<br><br><span class="hljs-meta">@Metadata(</span><br><span class="hljs-meta">   mv = &#123;1, 1, 6&#125;,</span><br><span class="hljs-meta">   bv = &#123;1, 0, 1&#125;,</span><br><span class="hljs-meta">   k = 1,</span><br><span class="hljs-meta">   d1 = &#123;&quot;\u00006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0005\u0018\u0000 \u00182\u00020\u0001:\u0001\u0018B\u0005¢\u0006\u0002\u0010\u0002J\u0014\u0010\u000e\u001a\u0004\u0018\u00010\u000f2\b\u0010\u0010\u001a\u0004\u0018\u00010\u0011H\u0016J\b\u0010\u0012\u001a\u00020\u000bH\u0016J\&quot;\u0010\u0013\u001a\u00020\u00142\b\u0010\u0015\u001a\u0004\u0018\u00010\u00112\u0006\u0010\u0016\u001a\u00020\u00142\u0006\u0010\u0017\u001a\u00020\u0014H\u0016R\u001b\u0010\u0003\u001a\u00020\u00048FX\u0086\u0084\u0002¢\u0006\f\n\u0004\b\u0007\u0010\b\u001a\u0004\b\u0005\u0010\u0006R\u0017\u0010\t\u001a\b\u0012\u0004\u0012\u00020\u000b0\n¢\u0006\b\n\u0000\u001a\u0004\b\f\u0010\r¨\u0006\u0019&quot;&#125;,</span><br><span class="hljs-meta">   d2 = &#123;&quot;Lcom/perqin/copyshare/CopyListenerService;&quot;, &quot;Landroid/app/Service;&quot;, &quot;()V&quot;, &quot;clipboardManager&quot;, &quot;Landroid/content/ClipboardManager;&quot;, &quot;getClipboardManager&quot;, &quot;()Landroid/content/ClipboardManager;&quot;, &quot;clipboardManager$delegate&quot;, &quot;Lkotlin/Lazy;&quot;, &quot;onPrimaryClipChangedListener&quot;, &quot;Lkotlin/Function0;&quot;, &quot;&quot;, &quot;getOnPrimaryClipChangedListener&quot;, &quot;()Lkotlin/jvm/functions/Function0;&quot;, &quot;onBind&quot;, &quot;Landroid/os/IBinder;&quot;, &quot;p0&quot;, &quot;Landroid/content/Intent;&quot;, &quot;onDestroy&quot;, &quot;onStartCommand&quot;, &quot;&quot;, &quot;intent&quot;, &quot;flags&quot;, &quot;startId&quot;, &quot;Companion&quot;, &quot;production sources for module app&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyListenerService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>   <span class="hljs-meta">@NotNull</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lazy</span> <span class="hljs-variable">clipboardManager$delegate</span> <span class="hljs-operator">=</span> LazyKt.lazy((Function0)(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function0</span>() &#123;<br>      <span class="hljs-comment">// $FF: synthetic method</span><br>      <span class="hljs-comment">// $FF: bridge method</span><br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.invoke();<br>      &#125;<br><br>      <span class="hljs-meta">@NotNull</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ClipboardManager <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-type">Object</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> CopyListenerService.<span class="hljs-built_in">this</span>.getSystemService(<span class="hljs-string">&quot;clipboard&quot;</span>);<br>         <span class="hljs-keyword">if</span>(var10000 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeCastException</span>(<span class="hljs-string">&quot;null cannot be cast to non-null type android.content.ClipboardManager&quot;</span>);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (ClipboardManager)var10000;<br>         &#125;<br>      &#125;<br>   &#125;));<br>   <span class="hljs-meta">@NotNull</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Function0</span> <span class="hljs-variable">onPrimaryClipChangedListener</span> <span class="hljs-operator">=</span> (Function0)(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function0</span>() &#123;<br>      <span class="hljs-comment">// $FF: synthetic method</span><br>      <span class="hljs-comment">// $FF: bridge method</span><br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-built_in">this</span>.invoke();<br>         <span class="hljs-keyword">return</span> Unit.INSTANCE;<br>      &#125;<br><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>         Log.d(CopyListenerService.Companion.getTAG(), <span class="hljs-string">&quot;Clip Item count: &quot;</span> + CopyListenerService.<span class="hljs-built_in">this</span>.getClipboardManager().getPrimaryClip().getItemCount());<br>      &#125;<br>   &#125;);<br>   <span class="hljs-meta">@NotNull</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CopyListenerService&quot;</span>;<br>   <span class="hljs-comment">// $FF: synthetic field</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> KProperty[] $$delegatedProperties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KProperty</span>[]&#123;(KProperty)Reflection.property1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyReference1Impl</span>(Reflection.getOrCreateKotlinClass(CopyListenerService.class), <span class="hljs-string">&quot;clipboardManager&quot;</span>, <span class="hljs-string">&quot;getClipboardManager()Landroid/content/ClipboardManager;&quot;</span>))&#125;;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> CopyListenerService.<span class="hljs-type">Companion</span> <span class="hljs-variable">Companion</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyListenerService</span>.Companion((DefaultConstructorMarker)<span class="hljs-literal">null</span>);<br><br>   <span class="hljs-meta">@Nullable</span><br>   <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent p0)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>      <span class="hljs-type">ClipboardManager</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClipboardManager();<br>      <span class="hljs-type">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span>;<br>      <span class="hljs-type">Function0</span> <span class="hljs-variable">var10003</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.onPrimaryClipChangedListener;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.onPrimaryClipChangedListener == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-type">Object</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         var10001.&lt;init&gt;(var10003);<br>      &#125;<br><br>      var10000.addPrimaryClipChangedListener((OnPrimaryClipChangedListener)var10001);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>.onDestroy();<br>      <span class="hljs-type">ClipboardManager</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClipboardManager();<br>      <span class="hljs-type">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span>;<br>      <span class="hljs-type">Function0</span> <span class="hljs-variable">var10003</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.onPrimaryClipChangedListener;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.onPrimaryClipChangedListener == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-type">Object</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         var10001.&lt;init&gt;(var10003);<br>      &#125;<br><br>      var10000.removePrimaryClipChangedListener((OnPrimaryClipChangedListener)var10001);<br>   &#125;<br><br>   <span class="hljs-meta">@NotNull</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ClipboardManager <span class="hljs-title function_">getClipboardManager</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">Lazy</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.clipboardManager$delegate;<br>      <span class="hljs-type">KProperty</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> $$delegatedProperties[<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">return</span> (ClipboardManager)var1.getValue();<br>   &#125;<br><br>   <span class="hljs-meta">@NotNull</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Function0 <span class="hljs-title function_">getOnPrimaryClipChangedListener</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.onPrimaryClipChangedListener;<br>   &#125;<br><br>   <span class="hljs-meta">@Metadata(</span><br><span class="hljs-meta">      mv = &#123;1, 1, 6&#125;,</span><br><span class="hljs-meta">      bv = &#123;1, 0, 1&#125;,</span><br><span class="hljs-meta">      k = 1,</span><br><span class="hljs-meta">      d1 = &#123;&quot;\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002R\u0014\u0010\u0003\u001a\u00020\u0004X\u0086D¢\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006¨\u0006\u0007&quot;&#125;,</span><br><span class="hljs-meta">      d2 = &#123;&quot;Lcom/perqin/copyshare/CopyListenerService$Companion;&quot;, &quot;&quot;, &quot;()V&quot;, &quot;TAG&quot;, &quot;&quot;, &quot;getTAG&quot;, &quot;()Ljava/lang/String;&quot;, &quot;production sources for module app&quot;&#125;</span><br><span class="hljs-meta">   )</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Companion</span> &#123;<br>      <span class="hljs-meta">@NotNull</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">getTAG</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> CopyListenerService.TAG;<br>      &#125;<br><br>      <span class="hljs-keyword">private</span> <span class="hljs-title function_">Companion</span><span class="hljs-params">()</span> &#123;<br>      &#125;<br><br>      <span class="hljs-comment">// $FF: synthetic method</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Companion</span><span class="hljs-params">(DefaultConstructorMarker $constructor_marker)</span> &#123;<br>         <span class="hljs-built_in">this</span>();<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们来简单分析试试。</p><p>首先，我们的lambda监听器被转换成什么代码了呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Function0</span> <span class="hljs-variable">onPrimaryClipChangedListener</span> <span class="hljs-operator">=</span> (Function0)(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function0</span>() &#123;<br>   <span class="hljs-comment">// $FF: synthetic method</span><br>   <span class="hljs-comment">// $FF: bridge method</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">this</span>.invoke();<br>      <span class="hljs-keyword">return</span> Unit.INSTANCE;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>      Log.d(CopyListenerService.Companion.getTAG(), <span class="hljs-string">&quot;Clip Item count: &quot;</span> + CopyListenerService.<span class="hljs-built_in">this</span>.getClipboardManager().getPrimaryClip().getItemCount());<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们发现，我们在监听器里的实现被转换成了一个<code>Function0</code>对象，具体的实现代码被放在了<code>invoke</code>方法里。</p><p>接下来，我们来看看我们添加监听器的代码被转换成的样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>   <span class="hljs-type">ClipboardManager</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClipboardManager();<br>   <span class="hljs-type">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span>;<br>   <span class="hljs-type">Function0</span> <span class="hljs-variable">var10003</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.onPrimaryClipChangedListener;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.onPrimaryClipChangedListener == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      var10001.&lt;init&gt;(var10003);<br>   &#125;<br><br>   var10000.addPrimaryClipChangedListener((OnPrimaryClipChangedListener)var10001);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们添加监听器的时候传递的对象是<code>var10001</code>，而它是一个<code>CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</code>类的实例。这个类又是个什么鬼？我们接着看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnPrimaryClipChangedListener</span> &#123;<br>   <span class="hljs-comment">// $FF: synthetic field</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Function0 function;<br><br>   CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3(Function0 var1) &#123;<br>      <span class="hljs-built_in">this</span>.function = var1;<br>   &#125;<br><br>   <span class="hljs-comment">// $FF: synthetic method</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrimaryClipChanged</span><span class="hljs-params">()</span> &#123;<br>      Intrinsics.checkExpressionValueIsNotNull(<span class="hljs-built_in">this</span>.function.invoke(), <span class="hljs-string">&quot;invoke(...)&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原来如此，这个名字巨长的类正是实现了<code>OnPrimaryClipChangedListener</code>的类，它持有一个<code>Function0</code>的引用，而它的<code>onPrimaryClipChanged</code>实现其实不过是调用这个对象的<code>invoke</code>方法。</p><p>现在再回去看看添加监听器的代码，我们就可以整理出这样的思路：</p><ul><li>首先把lambda里的实现语句封装到一个<code>Function0</code>类</li><li>然后让这个Service拥有这个<code>Function0</code>类的实例，这也就对应Kotlin代码里的<code>val</code>变量定义</li><li>需要添加监听器的时候，构造一个实现了监听器接口的<code>CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</code>对象</li><li>然后把我们的<code>Function0</code>对象丢进去</li><li>最后把这个构造出来的对象作为真正的监听器丢进去</li></ul><p>等等，好像有哪里不对……构造一个对象？！？让我们看看这行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span>;<br></code></pre></td></tr></table></figure><p>这是个局部变量啊！！！丢进去之后就拿不到它了啊！那我还怎么remove它呢？？</p><p>来看看移除监听器是怎么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-built_in">super</span>.onDestroy();<br>   <span class="hljs-type">ClipboardManager</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClipboardManager();<br>   <span class="hljs-type">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span> <span class="hljs-variable">var10001</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyListenerServiceKt$sam$OnPrimaryClipChangedListener$15d0add3</span>;<br>   <span class="hljs-type">Function0</span> <span class="hljs-variable">var10003</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.onPrimaryClipChangedListener;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.onPrimaryClipChangedListener == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">var10002</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      var10001.&lt;init&gt;(var10003);<br>   &#125;<br><br>   var10000.removePrimaryClipChangedListener((OnPrimaryClipChangedListener)var10001);<br>&#125;<br></code></pre></td></tr></table></figure><p>咳咳，这么骚的吗？</p><p>所以，我们终于得出了结论：虽然我们的lambda表达式对应的是不变的<code>Function0</code>对象，但是每次从它得到的监听器却不是同一个监听器！</p><p>有了这个结论，也就有了一个解决方法：我们不要让<code>onPrimaryClipChangedListener</code>成为lambda表达式，而是一个正正经经的监听器匿名内部类对象，我们改改代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> onPrimaryClipChangedListener = ClipboardManager.OnPrimaryClipChangedListener &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;Clip Item count: &quot;</span> + clipboardManager.primaryClip.itemCount)<br>    <span class="hljs-built_in">Unit</span><br>&#125;<br></code></pre></td></tr></table></figure><p>额额，好像只是加了两个单词……接下来看看反编译的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotNull</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">OnPrimaryClipChangedListener</span> <span class="hljs-variable">onPrimaryClipChangedListener</span> <span class="hljs-operator">=</span> (OnPrimaryClipChangedListener)(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnPrimaryClipChangedListener</span>() &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPrimaryClipChanged</span><span class="hljs-params">()</span> &#123;<br>      Log.d(CopyListenerService.Companion.getTAG(), <span class="hljs-string">&quot;Clip Item count: &quot;</span> + CopyListenerService.<span class="hljs-built_in">this</span>.getClipboardManager().getPrimaryClip().getItemCount());<br>   &#125;<br>&#125;);<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>   <span class="hljs-built_in">this</span>.getClipboardManager().addPrimaryClipChangedListener(<span class="hljs-built_in">this</span>.onPrimaryClipChangedListener);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-built_in">super</span>.onDestroy();<br>   <span class="hljs-built_in">this</span>.getClipboardManager().removePrimaryClipChangedListener(<span class="hljs-built_in">this</span>.onPrimaryClipChangedListener);<br>&#125;<br></code></pre></td></tr></table></figure><p>这次，<code>this.onPrimaryClipChangedListener</code>终于不再是一个<code>Function0</code>对象，而是一个监听器了！</p><p><del>然而，过了那么久都没有人在应用商店反馈这个bug，我该高兴还是不高兴呢……</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shrinkResources：这是bug还是feature？</title>
    <link href="/2017/06/18/shrink-resources-bug-or-feature/"/>
    <url>/2017/06/18/shrink-resources-bug-or-feature/</url>
    
    <content type="html"><![CDATA[<p>前两天在酷安上架了一个很简单的应用（<a href="http://www.coolapk.com/apk/com.perqin.copyshare">复制分享(com.perqin.copyshare)_0.0.2_Android应用_酷安网</a>），感觉酷安对个人开发者还是非常友好的，活跃用户多、评论区一片祥和。后来有评论说安装包体积太大了，于是就打算处理一下这个问题了。</p><p>根据官方文档<a href="https://developer.android.com/studio/build/shrink-code.html">Shrink Your Code and Resources | Android Studio</a>，我启用了ProGuard代码混淆：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    buildTypes &#123;<br>        release &#123;<br>            shrinkResources <span class="hljs-literal">true</span><br>            minifyEnabled <span class="hljs-literal">true</span><br>            proguardFiles getDefaultProguardFile(<span class="hljs-string">&#x27;proguard-android.txt&#x27;</span>), <span class="hljs-string">&#x27;proguard-rules.pro&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是构建之后立刻就挂掉了！而如果将<code>shrinkResources</code>设置为<code>false</code>则可以正常启动。</p><p>于是，我开始找出元凶。</p><p>首先，我得拿到release构建运行时崩溃的log。编辑AndroidManifest.xml，在application标签加入如下属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">  <span class="hljs-attr">android:debuggable</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span> /&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>然后编辑应用的build.gradle文件，在<code>android</code>标签禁用检查，否则会无法通过编译：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>  lintOptions &#123;<br>    checkReleaseBuilds <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再编译运行release版的应用，就能看到崩溃的日志。</p><p>但是由于启用了代码混淆，你会看到一大堆abcd，因此需要反混淆。根据官方文档，ProGuard会生成一个mapping.txt，里面包含了所有混淆的对应表，Android SDK提供了反混淆工具，因此我执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/.local/lib/android_sdk/tools/proguard/bin/retrace.sh ~/workspaces/CopyShare/CopyShare/app/build/outputs/mapping/release/mapping.txt ~/trace.txt &gt; ~/deob_trace.txt<br></code></pre></td></tr></table></figure><p>上述命令将保存在<code>~/trace.txt</code>中的崩溃日志反混淆之后输出到<code>~/debo_trace.txt</code>。</p><p>接下来我们打开输出的日志：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">06</span>-<span class="hljs-number">18</span> <span class="hljs-number">00</span>:<span class="hljs-number">50</span>:<span class="hljs-number">12.547</span> <span class="hljs-number">18537</span>-<span class="hljs-number">18537</span>/com.perqin.copyshare E/AndroidRuntime: FATAL EXCEPTION: main<br>      Process: com.perqin.copyshare, PID: <span class="hljs-number">18537</span><br>      java.lang.RuntimeException: Unable <span class="hljs-keyword">to</span> start activity ComponentInfo&#123;com.perqin.copyshare/com.perqin.copyshare.SettingsActivity&#125;: android.view.InflateException: Binary XML file line #<span class="hljs-number">25</span>: Binary XML file line #<span class="hljs-number">1</span>: Error inflating <span class="hljs-keyword">class</span> x<br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>perform<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:2762)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>handle<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:2848)</span><br>          at android.app.ActivityThread.-wrap12(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>java)<br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread$H</span>.</span></span>handle<span class="hljs-constructor">Message(ActivityThread.<span class="hljs-params">java</span>:1552)</span><br>          at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Handler</span>.</span></span>dispatch<span class="hljs-constructor">Message(Handler.<span class="hljs-params">java</span>:102)</span><br>          at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>loop(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>java:<span class="hljs-number">154</span>)<br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>java:<span class="hljs-number">6324</span>)<br>          at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke(Native Method)<br>          at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit$MethodAndArgsCaller</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>java:<span class="hljs-number">886</span>)<br>          at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>java:<span class="hljs-number">776</span>)<br>       Caused by: android.view.InflateException: Binary XML file line #<span class="hljs-number">25</span>: Binary XML file line #<span class="hljs-number">1</span>: Error inflating <span class="hljs-keyword">class</span> x<br>       Caused by: android.view.InflateException: Binary XML file line #<span class="hljs-number">1</span>: Error inflating <span class="hljs-keyword">class</span> x<br>       Caused by: java.lang.ClassNotFoundException: Didn&#x27;t find <span class="hljs-keyword">class</span> <span class="hljs-string">&quot;android.view.x&quot;</span> on path: DexPathList<span class="hljs-literal">[[<span class="hljs-identifier">zip</span> <span class="hljs-identifier">file</span> &quot;<span class="hljs-operator">/</span><span class="hljs-identifier">data</span><span class="hljs-operator">/</span><span class="hljs-identifier">app</span><span class="hljs-operator">/</span><span class="hljs-identifier">com</span>.<span class="hljs-identifier">perqin</span>.<span class="hljs-identifier">copyshare</span>-<span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-identifier">base</span>.<span class="hljs-identifier">apk</span>&quot;]</span>,nativeLibraryDirectories=<span class="hljs-literal">[<span class="hljs-operator">/</span><span class="hljs-identifier">data</span><span class="hljs-operator">/</span><span class="hljs-identifier">app</span><span class="hljs-operator">/</span><span class="hljs-identifier">com</span>.<span class="hljs-identifier">perqin</span>.<span class="hljs-identifier">copyshare</span>-<span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-identifier">lib</span><span class="hljs-operator">/</span><span class="hljs-identifier">arm64</span>, <span class="hljs-operator">/</span><span class="hljs-identifier">system</span><span class="hljs-operator">/</span><span class="hljs-identifier">lib64</span>, <span class="hljs-operator">/</span><span class="hljs-identifier">vendor</span><span class="hljs-operator">/</span><span class="hljs-identifier">lib64</span>]</span>]<br>          at dalvik.system.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BaseDexClassLoader</span>.</span></span>find<span class="hljs-constructor">Class(BaseDexClassLoader.<span class="hljs-params">java</span>:56)</span><br>          at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>load<span class="hljs-constructor">Class(ClassLoader.<span class="hljs-params">java</span>:380)</span><br>          at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>load<span class="hljs-constructor">Class(ClassLoader.<span class="hljs-params">java</span>:312)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>create<span class="hljs-constructor">View(LayoutInflater.<span class="hljs-params">java</span>:609)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>on<span class="hljs-constructor">CreateView(LayoutInflater.<span class="hljs-params">java</span>:700)</span><br>          at com.android.internal.policy.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PhoneLayoutInflater</span>.</span></span>on<span class="hljs-constructor">CreateView(PhoneLayoutInflater.<span class="hljs-params">java</span>:68)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>on<span class="hljs-constructor">CreateView(LayoutInflater.<span class="hljs-params">java</span>:717)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>create<span class="hljs-constructor">ViewFromTag(LayoutInflater.<span class="hljs-params">java</span>:785)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>parse<span class="hljs-constructor">Include(LayoutInflater.<span class="hljs-params">java</span>:964)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>r<span class="hljs-constructor">Inflate(LayoutInflater.<span class="hljs-params">java</span>:854)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>r<span class="hljs-constructor">InflateChildren(LayoutInflater.<span class="hljs-params">java</span>:821)</span><br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>java:<span class="hljs-number">518</span>)<br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>java:<span class="hljs-number">426</span>)<br>          at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>java:<span class="hljs-number">377</span>)<br>          at android.support.v7.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AppCompatDelegateImplV9</span>.</span></span>create<span class="hljs-constructor">SubDecor(Unknown Source)</span><br>          at android.support.v7.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AppCompatDelegateImplV9</span>.</span></span>ensure<span class="hljs-constructor">SubDecor(Unknown Source)</span><br>          at android.support.v7.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AppCompatDelegateImplV9</span>.</span></span>on<span class="hljs-constructor">Create(Unknown Source)</span><br>                                                            findViewById<br>                                                            onConfigurationChanged<br>                                                            setContentView<br>                                                            setContentView<br>                                                            onSubDecorInstalled<br>                                                            onPanelClosed<br>                                                            onMenuItemSelected<br>                                                            onMenuModeChange<br>                                                            startSupportActionModeFromWindow<br>                                                            onKeyShortcut<br>                                                            dispatchKeyEvent<br>                                                            shouldInheritContext<br>                                                            callActivityOnCreateView<br>                                                            openPanel<br>                                                            initializePanelDecor<br>                                                            reopenMenu<br>                                                            closePanel<br>                                                            callOnPanelClosed<br>                                                            findMenuPanel<br>                                                            getPanelState<br>                                                            performPanelShortcut<br>          at android.support.v7.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AppCompatActivity</span>.</span></span>find<span class="hljs-constructor">ViewById(Unknown Source)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Activity$HostCallbacks</span>.</span></span>on<span class="hljs-constructor">FindViewById(Activity.<span class="hljs-params">java</span>:7273)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BackStackRecord</span>.</span></span>configure<span class="hljs-constructor">Transitions(BackStackRecord.<span class="hljs-params">java</span>:1303)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BackStackRecord</span>.</span></span><span class="hljs-keyword">begin</span><span class="hljs-constructor">Transition(BackStackRecord.<span class="hljs-params">java</span>:1024)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BackStackRecord</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BackStackRecord</span>.</span></span>java:<span class="hljs-number">729</span>)<br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FragmentManagerImpl</span>.</span></span>exec<span class="hljs-constructor">PendingActions(FragmentManager.<span class="hljs-params">java</span>:1578)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FragmentController</span>.</span></span>exec<span class="hljs-constructor">PendingActions(FragmentController.<span class="hljs-params">java</span>:371)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Activity</span>.</span></span>perform<span class="hljs-constructor">Start(Activity.<span class="hljs-params">java</span>:6776)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>perform<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:2725)</span><br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>handle<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:2848)</span><br>          at android.app.ActivityThread.-wrap12(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>java)<br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread$H</span>.</span></span>handle<span class="hljs-constructor">Message(ActivityThread.<span class="hljs-params">java</span>:1552)</span><br>          at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Handler</span>.</span></span>dispatch<span class="hljs-constructor">Message(Handler.<span class="hljs-params">java</span>:102)</span><br>          at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>loop(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>java:<span class="hljs-number">154</span>)<br>          at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>java:<span class="hljs-number">6324</span>)<br>          at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke(Native Method)<br>          at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit$MethodAndArgsCaller</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>java:<span class="hljs-number">886</span>)<br>          at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>java:<span class="hljs-number">776</span>)<br><span class="hljs-number">06</span>-<span class="hljs-number">18</span> <span class="hljs-number">00</span>:<span class="hljs-number">50</span>:<span class="hljs-number">12.547</span> <span class="hljs-number">18537</span>-<span class="hljs-number">18537</span>/com.perqin.copyshare D/AppTracker: App Event: crash<br><span class="hljs-number">06</span>-<span class="hljs-number">18</span> <span class="hljs-number">00</span>:<span class="hljs-number">50</span>:<span class="hljs-number">12.558</span> <span class="hljs-number">18537</span>-<span class="hljs-number">18537</span>/com.perqin.copyshare I/Process: Sending signal. PID: <span class="hljs-number">18537</span> SIG: <span class="hljs-number">9</span><br><br></code></pre></td></tr></table></figure><p>根据上述日志，我发现，崩溃原因是在<code>android.support.v7.app.AppCompatDelegateImplV9</code>这个类的<code>createSubDecor</code>方法里面调用了<code>LayoutInflater.inflate</code>方法，结果找不到一个叫x的View。我们来看看这个<code>createSubDecor</code>方法（在Android Studio中按Ctrl键可以一路追踪每个类的实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ViewGroup <span class="hljs-title function_">createSubDecor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">TypedArray</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> mContext.obtainStyledAttributes(R.styleable.AppCompatTheme);<br><br>    <span class="hljs-keyword">if</span> (!a.hasValue(R.styleable.AppCompatTheme_windowActionBar)) &#123;<br>        a.recycle();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br>                <span class="hljs-string">&quot;You need to use a Theme.AppCompat theme (or descendant) with this activity.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (a.getBoolean(R.styleable.AppCompatTheme_windowNoTitle, <span class="hljs-literal">false</span>)) &#123;<br>        requestWindowFeature(Window.FEATURE_NO_TITLE);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.getBoolean(R.styleable.AppCompatTheme_windowActionBar, <span class="hljs-literal">false</span>)) &#123;<br>        <span class="hljs-comment">// Don&#x27;t allow an action bar if there is no title.</span><br>        requestWindowFeature(FEATURE_SUPPORT_ACTION_BAR);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a.getBoolean(R.styleable.AppCompatTheme_windowActionBarOverlay, <span class="hljs-literal">false</span>)) &#123;<br>        requestWindowFeature(FEATURE_SUPPORT_ACTION_BAR_OVERLAY);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a.getBoolean(R.styleable.AppCompatTheme_windowActionModeOverlay, <span class="hljs-literal">false</span>)) &#123;<br>        requestWindowFeature(FEATURE_ACTION_MODE_OVERLAY);<br>    &#125;<br>    mIsFloating = a.getBoolean(R.styleable.AppCompatTheme_android_windowIsFloating, <span class="hljs-literal">false</span>);<br>    a.recycle();<br><br>    <span class="hljs-comment">// Now let&#x27;s make sure that the Window has installed its decor by retrieving it</span><br>    mWindow.getDecorView();<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">LayoutInflater</span> <span class="hljs-variable">inflater</span> <span class="hljs-operator">=</span> LayoutInflater.from(mContext);<br>    <span class="hljs-type">ViewGroup</span> <span class="hljs-variable">subDecor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>    <span class="hljs-keyword">if</span> (!mWindowNoTitle) &#123;<br>        <span class="hljs-keyword">if</span> (mIsFloating) &#123;<br>            <span class="hljs-comment">// If we&#x27;re floating, inflate the dialog title decor</span><br>            subDecor = (ViewGroup) inflater.inflate(<br>                    R.layout.abc_dialog_title_material, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-comment">// Floating windows can never have an action bar, reset the flags</span><br>            mHasActionBar = mOverlayActionBar = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mHasActionBar) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * This needs some explanation. As we can not use the android:theme attribute</span><br><span class="hljs-comment">             * pre-L, we emulate it by manually creating a LayoutInflater using a</span><br><span class="hljs-comment">             * ContextThemeWrapper pointing to actionBarTheme.</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">TypedValue</span> <span class="hljs-variable">outValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypedValue</span>();<br>            mContext.getTheme().resolveAttribute(R.attr.actionBarTheme, outValue, <span class="hljs-literal">true</span>);<br><br>            Context themedContext;<br>            <span class="hljs-keyword">if</span> (outValue.resourceId != <span class="hljs-number">0</span>) &#123;<br>                themedContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextThemeWrapper</span>(mContext, outValue.resourceId);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                themedContext = mContext;<br>            &#125;<br><br>            <span class="hljs-comment">// Now inflate the view using the themed context and set it as the content view</span><br>            subDecor = (ViewGroup) LayoutInflater.from(themedContext)<br>                    .inflate(R.layout.abc_screen_toolbar, <span class="hljs-literal">null</span>);<br><br>            mDecorContentParent = (DecorContentParent) subDecor<br>                    .findViewById(R.id.decor_content_parent);<br>            mDecorContentParent.setWindowCallback(getWindowCallback());<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * Propagate features to DecorContentParent</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (mOverlayActionBar) &#123;<br>                mDecorContentParent.initFeature(FEATURE_SUPPORT_ACTION_BAR_OVERLAY);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mFeatureProgress) &#123;<br>                mDecorContentParent.initFeature(Window.FEATURE_PROGRESS);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mFeatureIndeterminateProgress) &#123;<br>                mDecorContentParent.initFeature(Window.FEATURE_INDETERMINATE_PROGRESS);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (mOverlayActionMode) &#123;<br>            subDecor = (ViewGroup) inflater.inflate(<br>                    R.layout.abc_screen_simple_overlay_action_mode, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            subDecor = (ViewGroup) inflater.inflate(R.layout.abc_screen_simple, <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>            <span class="hljs-comment">// If we&#x27;re running on L or above, we can rely on ViewCompat&#x27;s</span><br>            <span class="hljs-comment">// setOnApplyWindowInsetsListener</span><br>            ViewCompat.setOnApplyWindowInsetsListener(subDecor,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">OnApplyWindowInsetsListener</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> WindowInsetsCompat <span class="hljs-title function_">onApplyWindowInsets</span><span class="hljs-params">(View v,</span><br><span class="hljs-params">                                WindowInsetsCompat insets)</span> &#123;<br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> insets.getSystemWindowInsetTop();<br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">newTop</span> <span class="hljs-operator">=</span> updateStatusGuard(top);<br><br>                            <span class="hljs-keyword">if</span> (top != newTop) &#123;<br>                                insets = insets.replaceSystemWindowInsets(<br>                                        insets.getSystemWindowInsetLeft(),<br>                                        newTop,<br>                                        insets.getSystemWindowInsetRight(),<br>                                        insets.getSystemWindowInsetBottom());<br>                            &#125;<br><br>                            <span class="hljs-comment">// Now apply the insets on our view</span><br>                            <span class="hljs-keyword">return</span> ViewCompat.onApplyWindowInsets(v, insets);<br>                        &#125;<br>                    &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Else, we need to use our own FitWindowsViewGroup handling</span><br>            ((FitWindowsViewGroup) subDecor).setOnFitSystemWindowsListener(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">FitWindowsViewGroup</span>.OnFitSystemWindowsListener() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFitSystemWindows</span><span class="hljs-params">(Rect insets)</span> &#123;<br>                            insets.top = updateStatusGuard(insets.top);<br>                        &#125;<br>                    &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (subDecor == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<br>                <span class="hljs-string">&quot;AppCompat does not support the current theme features: &#123; &quot;</span><br>                        + <span class="hljs-string">&quot;windowActionBar: &quot;</span> + mHasActionBar<br>                        + <span class="hljs-string">&quot;, windowActionBarOverlay: &quot;</span>+ mOverlayActionBar<br>                        + <span class="hljs-string">&quot;, android:windowIsFloating: &quot;</span> + mIsFloating<br>                        + <span class="hljs-string">&quot;, windowActionModeOverlay: &quot;</span> + mOverlayActionMode<br>                        + <span class="hljs-string">&quot;, windowNoTitle: &quot;</span> + mWindowNoTitle<br>                        + <span class="hljs-string">&quot; &#125;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mDecorContentParent == <span class="hljs-literal">null</span>) &#123;<br>        mTitleView = (TextView) subDecor.findViewById(R.id.title);<br>    &#125;<br><br>    <span class="hljs-comment">// Make the decor optionally fit system windows, like the window&#x27;s decor</span><br>    ViewUtils.makeOptionalFitsSystemWindows(subDecor);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ContentFrameLayout</span> <span class="hljs-variable">contentView</span> <span class="hljs-operator">=</span> (ContentFrameLayout) subDecor.findViewById(<br>            R.id.action_bar_activity_content);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ViewGroup</span> <span class="hljs-variable">windowContentView</span> <span class="hljs-operator">=</span> (ViewGroup) mWindow.findViewById(android.R.id.content);<br>    <span class="hljs-keyword">if</span> (windowContentView != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// There might be Views already added to the Window&#x27;s content view so we need to</span><br>        <span class="hljs-comment">// migrate them to our content view</span><br>        <span class="hljs-keyword">while</span> (windowContentView.getChildCount() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> windowContentView.getChildAt(<span class="hljs-number">0</span>);<br>            windowContentView.removeViewAt(<span class="hljs-number">0</span>);<br>            contentView.addView(child);<br>        &#125;<br><br>        <span class="hljs-comment">// Change our content FrameLayout to use the android.R.id.content id.</span><br>        <span class="hljs-comment">// Useful for fragments.</span><br>        windowContentView.setId(View.NO_ID);<br>        contentView.setId(android.R.id.content);<br><br>        <span class="hljs-comment">// The decorContent may have a foreground drawable set (windowContentOverlay).</span><br>        <span class="hljs-comment">// Remove this as we handle it ourselves</span><br>        <span class="hljs-keyword">if</span> (windowContentView <span class="hljs-keyword">instanceof</span> FrameLayout) &#123;<br>            ((FrameLayout) windowContentView).setForeground(<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Now set the Window&#x27;s content view with the decor</span><br>    mWindow.setContentView(subDecor);<br><br>    contentView.setAttachListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentFrameLayout</span>.OnAttachListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttachedFromWindow</span><span class="hljs-params">()</span> &#123;&#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDetachedFromWindow</span><span class="hljs-params">()</span> &#123;<br>            dismissPopups();<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> subDecor;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码一共引用到了以下layout资源：</p><ul><li>R.layout.abc_dialog_title_material</li><li>R.layout.abc_screen_toolbar</li><li>R.layout.abc_screen_simple_overlay_action_mode</li><li>R.layout.abc_screen_simple</li></ul><p>解包aar文件之后查看这些xml文件，会发现他们有一个共同的特点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span></span><br><span class="hljs-tag">    <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;@layout/abc_screen_content_include&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>好的，这个时候我们将构建的会崩溃的apk拖进Android Studio查看其内容，我们找到<code>res/layout/abc_screen_content_include.xml</code>：</p><p><img src="/apk-analyze.png"></p><p>至此，真相大白！可以看到，<code>shrinkResources</code>这个特性似乎还是有一点bug（总不能是feature吧？？！），没有正确识别<code>include</code>标签的引用，导致这个资源被认为是无用的，内容也被</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">x</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>所代替，所以运行的时候，当渲染这个资源的时候就会报找不到android.view.x类的错误。</p><p>比较不幸的是，即使按照官方说明将这个资源手动加入到keep列表中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:keep</span>=<span class="hljs-string">&quot;@layout/abc_screen_content_include&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:ignore</span>=<span class="hljs-string">&quot;PrivateResource&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>但构建出来的apk仍然删除了这个资源，所以我只能提了一个issue：<a href="https://issuetracker.google.com/issues/62744324">AppCompat V7 crash when shrinkResources is enabled [62744324] - Visible to Public - Issue Tracker</a>，不过目前还没有任何回应……</p><p>第一次尝试代码混淆，没想到就遇到了这么个坑，真是刺激！</p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>proguard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins持续集成搭建笔记</title>
    <link href="/2017/06/11/jenkins-ci-setup-notes/"/>
    <url>/2017/06/11/jenkins-ci-setup-notes/</url>
    
    <content type="html"><![CDATA[<p>最近需要搭建持续集成环境，因此有了这篇笔记，记录遇到的一些坑。</p><h2 id="Why-CI"><a href="#Why-CI" class="headerlink" title="Why CI"></a>Why CI</h2><p>持续集成环境的好处非常多，以至于现在我几乎会给每个后台项目准备一个CI环境。</p><p>搭建好持续集成环境之后，我们的代码一旦push到master分支，CI服务器就会自动拉取最新代码，然后根据实现编写的流水线脚本完成构建、测试、部署，然后测试服务器就会立刻上线最新版本的代码。</p><p>这意味着开发过程中的部署是几乎完全自动化的，只要配置好，以后所有新代码能够立刻上线，而不需要每次更新代码之后登录服务器手动拉取代码、重启服务器。</p><p>除此以外，我们可以在CI过程中加入构建、测试脚本，这样我们可以在CI控制台中清晰地看到项目的构建是否出错（如运行时环境未安装）、测试是否失败（代码测试不通过，存在bug），甚至可以将某次CI过程中的失败和详情发送邮件给开发者，方便甩锅，啊不是，方便第一时间发现问题、解决问题。</p><h2 id="Why-Jenkins"><a href="#Why-Jenkins" class="headerlink" title="Why Jenkins"></a>Why Jenkins</h2><p>主流的CI服务有两个，Travis和Jenkins，前者虽然和GitHub的集成比较好，但是仅面向开源项目免费，因此我选择了开源的Jenkins方案。</p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>本文并不是Jenkins持续集成的部署教程，因为这样的教程在搜索引擎、官方文档中已经有现成的文章。本文旨在记录部署过程中遇到的各种问题。</p><h3 id="用户权限配置兼服务器权限配置（伪）最佳实践"><a href="#用户权限配置兼服务器权限配置（伪）最佳实践" class="headerlink" title="用户权限配置兼服务器权限配置（伪）最佳实践"></a>用户权限配置兼服务器权限配置（伪）最佳实践</h3><p>在通过apt源安装了Jenkins之后，Jenkins是运行在<code>jenkins</code>用户下的。而对于大多数网站而言，他一般都是运行在<code>www-data</code>用户下，因此我需要进行必要的修改。</p><p>首先，我们编辑<code>/etc/default/jenkins</code>，修改默认的Jenkins运行用户：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># user and group to be invoked as (default to jenkins)</span><br><span class="hljs-comment">#JENKINS_USER=$NAME</span><br><span class="hljs-comment">#JENKINS_GROUP=$NAME</span><br><span class="hljs-attr">JENKINS_USER</span>=www-data<br><span class="hljs-attr">JENKINS_GROUP</span>=www-data<br></code></pre></td></tr></table></figure><p>然后，我们需要把Jenkins操作的目录改为<code>www-data</code>可读写：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo chown -R www-data:www-data <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span><br>$ sudo chown -R www-data:www-data <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/jenkins/</span><br>$ sudo chown -R www-data:www-data <span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/jenkins/</span><br></code></pre></td></tr></table></figure><p>最后即可重启Jenkins守护进程。</p><p>值得一提的是关于服务器的用户权限配置实践，我的方案是：<code>www-data</code>用户作为服务器应用的运行用户，<code>www-admin</code>作为管理用户。<code>www-data</code>应该是尽可能低权限的，因此它没有可用的shell，没有home目录，其<code>HOME</code>环境变量为<code>/var/www</code>。之所以其权限这么低，是因为它运行了大量服务器应用，应当避免某个应用的恶意代码（可能是bug，也可能是真的恶意代码）导致服务器安全性收到威胁。</p><p>而我们又需要一个用户对服务器进行管理，包括安装运行时环境、部署应用等，因此我们需要一个带有shell、位于sudo用户组的用户，我将它命名为<code>www-admin</code>。</p><p>但这就产生了一个矛盾，使用该用户的话，Web应用部署的文件都是属于<code>www-admin:www-admin</code>的，那么<code>www-data</code>如何修改这些文件呢？总不能将可被写的文件都改为<code>666</code>（所有人可读写）权限吧。于是，这里的最佳方案是将<code>www-admin</code>用户的主用户组设置为<code>www-data</code>，这样<code>www-admin</code>创建的所有文件都是属于<code>www-damin:www-data</code>的，且默认都是<code>rwxr-xr-x</code>的权限，这样<code>www-data</code>也具有了读权限，<code>www-admin</code>也不必每次都chown了。而对于需要写的目录，比如某个服务器应用需要支持图片上传，那么我们将上传目录设置为用户组可写即可。</p><h3 id="如何重置Jenkins管理员用户"><a href="#如何重置Jenkins管理员用户" class="headerlink" title="如何重置Jenkins管理员用户"></a>如何重置Jenkins管理员用户</h3><p>Jenkins这一点非常不人道。在首次运行Jenkins时，他会要求你输入一个Key，这个Key在服务器端的一个指定目录存放，因此只有部署者可以获取并登录。登录成功之后，如果你不小心忘记了密码，就会非常尴尬。此时，你无法进入Jenkins，也找不到重置密码的渠道。唯一的解决方案是去修改Jenkins的配置文件，把“安全检查”关闭。此时，任何人都可以自由登录和修改你的服务器，你需要尽快创建新的帐号。</p><p>然而，作为匿名帐号，Jenkins不允许非用户本人更改用户信息，也就是说你没法修改admin的密码。怎么办呢？创建一个新用户temp，然后删除admin用户，然后重新创建admin用户。</p><p>怎么创建用户呢？不好意思，匿名用户没有权利增删用户。你需要进入安全设置，启用“登录保护”，同时启用“允许任何人注册”，同时启用“登录用户拥有所有权限”。然后，你会发现你需要登录，此时你注册temp用户，然后进入后台，然后删掉admin用户，然后退出登录，然后注册admin用户，然后<strong>请一定记得你的密码啊！</strong>然后登录admin用户，删掉temp用户，然后<strong>禁用“运行任何人注册”</strong>。到此为止，你的服务器才重新回到安全。</p><p>可以看出，从你开放匿名访问开始，直到你找回admin用户并关闭注册为止，你的Jenkins服务器都是完全暴露在互联网中的，假如不幸有人发现了，那么就可以轻松获得Jenkins帐号，不得不说是风险很高的事情。</p><p>事实上，我认为Jenkins完全可以让忘记密码的用户索取一个Key，同样把Key存储在服务器上即可。</p><h3 id="正确启用Jenkins的GitHub-Webhook"><a href="#正确启用Jenkins的GitHub-Webhook" class="headerlink" title="正确启用Jenkins的GitHub Webhook"></a>正确启用Jenkins的GitHub Webhook</h3><p>GitHub Webhook的意义在于将你的Jenkins的预设URL提供给GitHub，一旦你的某个仓库有人push代码，GitHub服务器就会把这次push的详细信息通过一个HTTP请求发送到你的这个URL上，Jenkins会收到并进行解析。如果这个仓库就是你的某个流水线项目（Jenkins的一种CI类型），则Jenkins会自动拉取新的代码并进入后续的CI操作。</p><p>但是，这里面需要注意两点：</p><ul><li>配置项目的时候，在<em>Build Triggers</em>配置里不仅要勾上<em>GitHub hook trigger for GITScm polling</em>，还要勾上<em>Poll SCM</em>，也就是说仍然要启用轮询，只是不需要设置轮询间隔。</li><li>首次配置的流水线项目需要手动构建一次，即项目左边的<em>Build Now</em>，这样才能触发后续的Webhook。</li></ul><h3 id="项目名字不要乱来"><a href="#项目名字不要乱来" class="headerlink" title="项目名字不要乱来"></a>项目名字不要乱来</h3><p>Jenkins默认会在<code>/var/lib/jenkins/workspaces/&lt;your_project_name&gt;</code>目录中拉取你的项目代码，所以一定要注意项目的命名，如果你的命名包含空格，那么可能导致一些会获取PWD的构建流程接受到错误的参数。</p><h3 id="www-data为你带来无尽烦恼"><a href="#www-data为你带来无尽烦恼" class="headerlink" title="www-data为你带来无尽烦恼"></a><code>www-data</code>为你带来无尽烦恼</h3><p>这个用户前面说到了，HOME目录在<code>/var/www</code>，而按照前面的配置，这个目录默认是不会给<code>www-data</code>写入权限的，于是，在部署的时候就会遇到很多问题，比如pip安装的时候会无法启用cache，因为<code>/var/www/.pip</code>目录不可写入；进程管理工具PM2更是无法正常工作，因为<code>/var/www/.pm2</code>无法写入。目前除了手动创建这些目录并赋予用户组写入权限以外，还没有更加优雅的解决方案。</p><h3 id="CI无法解决部署失败的问题"><a href="#CI无法解决部署失败的问题" class="headerlink" title="CI无法解决部署失败的问题"></a>CI无法解决部署失败的问题</h3><p>CI最大的问题在于，CI的成功不能表示部署成功。这是因为，每一次CI都不能阻塞，而服务器天生就需要作为守护进程运行，这就意味着CI中的部署流程只能通过PM2这样的进程管理器完成。但是，进程管理器执行后，服务器是否正常部署、运行，却无法反馈给CI，因此会出现CI完全正常，但服务器不可访问的问题。</p><p>目前，我没有找到很完美的解决方案，只有两个可选的方案：</p><ul><li>在CI的Test流程中加入对运行时环境的检查，尽可能多地将部署的失败在CI中就体现出来</li><li>对PM2等进程管理工具下文章，比如部署出错就发送邮件等，但是目前来看这些进程管理工具似乎都暂不支持直接配置部署失败的邮件通知。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CI是一种一次配置，永远可用的服务，如果可能的话，任何项目都应该尽早部署，这会给项目的后续开发、部署和维护带来巨大收益，节省大量时间。现在，我已经养成了后台应用部署必用Jenkins的习惯，就像HTTPS一样，既然花不了多少时间，有什么理由不顺便做了呢？</p>]]></content>
    
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>continuous-integration</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FCANR.ME：别再收藏了</title>
    <link href="/2017/05/13/fcanr-me-stop-favorite/"/>
    <url>/2017/05/13/fcanr-me-stop-favorite/</url>
    
    <content type="html"><![CDATA[<p>这篇博客讲讲我刚刚建立的博客站点FCANR.ME和我建立它的前因后果。</p><p><strong>注意，本文所说的FCANR.ME不是指你现在看到的这个站点，这是本人的个人博客 - -</strong></p><h2 id="FCANR-ME是什么"><a href="#FCANR-ME是什么" class="headerlink" title="FCANR.ME是什么"></a>FCANR.ME是什么</h2><p>简单来说，FCANR.ME是一个<strong>意图取代公众号的转载博客的网站</strong>，它有点像博客园、简书，但和它们不一样的是，这个网站只会发布Android相关的文章，这也是为什么网站的名字要叫做“FCANR.ME”，想表达的是“今天你FC、ANR了么？”，相信各位Android开发者对FC（Force Closed）和ANR（Application Not Responding）一定不陌生了吧XD</p><h2 id="为什么又来一个博客站点"><a href="#为什么又来一个博客站点" class="headerlink" title="为什么又来一个博客站点"></a>为什么又来一个博客站点</h2><p>不少开发者都有写博客的习惯，他们选择的博客平台也五花八门：博客园&#x2F;CSDN等技术博客、简书、GitHub Pages甚至自己搭建网站。随着微信和微信公众号的普及，越来越多开发者也开始经营自己的微信公众号。而FCANR.ME就是冲着微信公众号来的。微信公众号发布技术文章带来了以下问题：</p><ul><li>阅读体验不佳。大部分微信公众号的排版都不算精致，这导致文章，尤其是包含大量代码片段的技术文章在手机上的阅读体验并不好。</li><li>重复内容太多。除了一部分开发者只推送自己的原创内容以外，不少开发者选择转载好的技术文章，这本来不是什么坏事，但当你关注的公众号多了，你就会发现有的文章被好几个公众号转载（当然这也是因为原作者向多个公众号投稿以获取更多关注）。</li><li>减少了原创内容。这算是上面一条的一点副作用：当一个微信公众号开始侧重转载技术文章的时候，这个公众号的运营者本人的原创内容就相对减少了，但是这样收集、精选技术文章的微信公众号何其多，关注一个主要转载文章的公众号，收益实在太低。</li><li>养成收藏的坏习惯。微信有个（大概是）无限容量的收藏夹，而收藏也非常容易，长按推送文章就能收藏，但是这样收藏起来，既不会去看，也不容易查找。</li></ul><h2 id="FCANR-ME怎样取代公众号"><a href="#FCANR-ME怎样取代公众号" class="headerlink" title="FCANR.ME怎样取代公众号"></a>FCANR.ME怎样取代公众号</h2><p>前面说到（我认为的）微信公众号的种种缺点，那么本站的目的也是取代这些转载Android技术文章的公众号。</p><p>正如其他公众号一样，本站接受Android技术博客的投稿，由于暂不支持自主注册，我会在后台注册一个该作者的帐号，然后使用该帐号发布这篇博客文章。作者可以索取该帐号的密码并自行管理、发布新的文章，也可以继续投稿委托我发布。</p><p>本站基于<a href="https://ghost.org/">Ghost</a>搭建，使用Markdown写作，所以投稿时你只需要提供md文件和相关的图片资源文件，再加上你的邮箱即可。</p><h2 id="FCANR-ME坑了谁"><a href="#FCANR-ME坑了谁" class="headerlink" title="FCANR.ME坑了谁"></a>FCANR.ME坑了谁</h2><p>FCANR.ME注定要影响到一部分人的利益，那就是辛苦运营自己的微信公众号的Android开发者们。然而，我个人认为，一个开发者的公众号的价值应该取决于这个开发者本人发布的技术文章，而不是他&#x2F;她收到的投稿、发布的转载。更深一些，我希望所有运行技术公众号的开发者们能够努力产出好文章，而不是侧重于打造一个关注、阅读量很高的文章收集公众号。</p><h2 id="FCANR-ME的未来"><a href="#FCANR-ME的未来" class="headerlink" title="FCANR.ME的未来"></a>FCANR.ME的未来</h2><p>是的，这个网站就像你所看到的各种微信公众号一样，FCANR.ME目前的形态是多个微信公众号的聚合体。</p><p>我希望，未来越来越多Android的文章能够在这个网站发布，这个站点能成为wiki量级的Android技术站点，你能够在这里搜索、阅读Android各个方面的技术文章！</p><h2 id="好，请问怎样投稿，如何审核？"><a href="#好，请问怎样投稿，如何审核？" class="headerlink" title="好，请问怎样投稿，如何审核？"></a>好，请问怎样投稿，如何审核？</h2><p>很高兴你能够认可FCANR.ME的存在。</p><p><del>你可以向<a href="mailto:post@fcanr.me">post@fcanr.me</a>发送电子邮件进行投稿，邮件内容为：</del></p><ul><li><del>md格式的博客文章</del></li><li><del>文章用到的图片资源文件</del></li><li><del>你的邮箱（作为FCANR.ME上的用户名）</del></li><li><del>你的昵称和头像（作为FCANR.ME上你的昵称和头像），可选，昵称默认为你的邮箱，头像默认为Gavatar上该邮箱的头像</del></li><li><del>其他你想注明的事项</del></li><li><del>原文地址，可选，非常欢迎在本站首发&#x2F;独发：）</del></li></ul><p><del>你可以向<a href="mailto:admin@fcanr.me">admin@fcanr.me</a>索要你的帐号密码，然后自己访问后台发布文章。</del></p><p>由于Ghost是邀请机制，需要你主动注册帐号发布文章，方法如下：</p><ol><li>提供邮箱地址给我（发送到<a href="mailto:admin@fcanr.me">admin@fcanr.me</a>即可），我会给你发送一封邀请链接。</li><li>通过邀请链接注册本站帐号，然后发布。</li><li>如果你觉得复制粘贴太麻烦，可以将你的博客文章材料和帐号密码发送给我，即代表授权我以你的帐号的名义发表该文章。</li></ol><p>投稿的文章会先审核后发布，自主发布的文章若不符合要求会被撤下。审核条件非常宽松：</p><ul><li>富强民主和谐统一总之你懂得，违法犯罪的内容不能放</li><li>与Android相关的技术文章，Material Design等设计相关文章亦接受</li><li>不得包含粗俗、辱骂等人身攻击内容，我就不详细说了，大家心里都有一杆称。当然，恶趣味、吐槽、黑、暴力魔法都是可以的XD</li><li>必须本人原创，抄袭零容忍，也不接受代替原作者投稿的行为</li></ul><p>由于本站由我一人维护，在审核方面难免会有失偏颇，欢迎大家监督：）</p><h2 id="这破站真丑-怎么没有xx功能-etc"><a href="#这破站真丑-怎么没有xx功能-etc" class="headerlink" title="这破站真丑&#x2F;怎么没有xx功能&#x2F;etc."></a>这破站真丑&#x2F;怎么没有xx功能&#x2F;etc.</h2><p>对本站的所有吐槽请发送邮件到<a href="mailto:laji@fcanr.me">laji@fcanr.me</a>，laji是辣鸡的意思。</p><h2 id="网站运营"><a href="#网站运营" class="headerlink" title="网站运营"></a>网站运营</h2><p>由于时间仓促以及水平不足，所以我没有自己开发网站，而是使用了Ghost框架，因此难免有各种功能限制，网站的运作也是本人一人负责，由于目前只是尝试运营，所以暂时没有招募更多维护者的计划。网站运作在Linode的VPS上，域名购自GoDaddy，由于我还吃得上饭，所以暂时不需要接受捐赠。</p><h2 id="网站地址呢？"><a href="#网站地址呢？" class="headerlink" title="网站地址呢？"></a>网站地址呢？</h2><p>好吧，我好像忘了这个了。网站的地址是<a href="https://www.fcanr.me/">https://www.fcanr.me</a>，后台地址是<a href="https://www.fcanr.me/ghost">https://www.fcanr.me/ghost</a>。访问<a href="https://fcanr.me/">https://fcanr.me</a>会重定向到前者，全站启用HTTPS，访问HTTP地址会重定向到HTTPS地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>fcanr-me</tag>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我用一天半写了个小程序</title>
    <link href="/2017/04/30/i-used-one-and-half-a-day-to-write-a-wechat-mini-program/"/>
    <url>/2017/04/30/i-used-one-and-half-a-day-to-write-a-wechat-mini-program/</url>
    
    <content type="html"><![CDATA[<p>读者司机们，五一好哇！</p><p>这两天突然意识到放假了，作业可以先缓一缓，又想起之前的一个想法，于是打开了微信小程序的官方文档，打算随手撸一个小程序玩一玩。想看成果的，请向下拖动看图。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>有一次，我需要组织一次实训迭代会议，于是我需要临时确认所有人下周什么时候有空，当时我突然发现，这就是为小程序量身定做的场景啊，于是，趁这两天道路车辆少，我，上了小程序的黑车。</p><h2 id="启动与构思"><a href="#启动与构思" class="headerlink" title="启动与构思"></a>启动与构思</h2><p>小程序的名字随便取了个：《几时得闲》，识得唔识得啊？</p><p>这学期受到pml的熏陶，写小玩具也开始正经了- -首先简单随笔画了一个领域模型和UI、交互之类的草图：</p><p><img src="/domain.jpg"></p><p><img src="/wireframe.jpg"></p><p>港真，画完之后思路的确清晰了很多，接下来就可以开始写代码了。</p><h2 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h2><p>工欲善其事，必先利其器。于是，我去官网下载了微信小程序开发平台，比较坑爹的是这货暂不支持Linux，于是我只能重启滚到装在了机械硬盘的Windows 10，下载并安装，安装好之后它是长这样的：</p><p><img src="/devtool.png"></p><p>看起来很强，很佩服微信这么快从框架到开发工具一整套都准备好了，文档也是挺齐全的，点个赞。</p><p>小程序实际上就是跑在被魔改过的、功能很有限的浏览器里，所以前端那一套在小程序里都是类似的：wxml等价于html，wxss等价于css，js是承载页面逻辑的脚本，json文件则是配置文件。左边是预览，中间是文件列表，右边是编辑器，每次文件被更新，都会自动重新编译运行。不过写了一会之后，我发现这编辑器太难用了，虽然有自动补全，于是我果断弃坑，啊不是，果断打开了Sublime Text。</p><p>接下来，这个开发工具的主要任务就是调试。切换到调试界面之后，右半边会变成Chrome Devtool，嘿嘿……</p><h2 id="小程序结构"><a href="#小程序结构" class="headerlink" title="小程序结构"></a>小程序结构</h2><p>一个小程序由一个App实例和若干个Page实例组成。根目录下的<code>app.*</code>就是App实例的定义，其中<code>app.wxss</code>是全局的样式文件，<code>app.json</code>里面有这个小程序的配置，所有Page的url等都需要在这里面声明（是的，就和<code>AndroidManifest.xml</code>差不多），除此以外，如果小程序的主界面是带有tab的，那么可以在这里定义每个tab对应的Page，这样就不需要自己在一个Page里实现tab特性，不过我觉得有可能多个界面都是带tab的，但是这样似乎就只有小程序的主页才是这样的，没有深究……</p><p><code>app.js</code>里，官方的starter项目里给App实例定义了一个<code>getUserInfo</code>，其中调用小程序提供的接口获取用户授权，通过查询文档，我最后把它改成获取用户授权、得到用户的OpenID（这个ID对这个小程序而言是每个用户唯一且固定的）、将它保存到我的服务器后台（后面会说到，坑死了……），然后把数据返回。看到模板代码各种缩进，我慌了，看样子小程序原生不资瓷Promise……中午吃饭的时候查了一下，发现虽然的确有办法，但是太麻烦了，于是后来我觉得我的<em>把回调写得优雅一些</em>的技能被点上了。</p><p>在<code>pages</code>目录里，每个Page的定义相关的四个文件都放在里面，并且必须文件名（去掉扩展名）一致，微信才能找到这些页面的对应内容。按照规划，我一共编写了4个页面：我启动的活动、我参与的活动、创建新活动、查看活动。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>一开始写的时候，还挺顺利的，但是后来发现，没有后台服务器的配置的话，很多地方不好写。</p><p>可是问题来了，就两天玩一玩，我就要花一大部分时间写个服务器？？</p><p>当然不可以了，于是，机智的我选择了LeanCloud，LeanCloud应该给我广告费。在LeanCloud的数据存储服务里，我可以直接定义类，指定类的各项属性，然后通过REST API来操作数据。是的，不用写一点代码，点点鼠标就配置好了。按照前面的领域模型，最终我新建了3个类：<code>WeChatUser</code>，<code>FreePeriod</code>和<code>Activity</code>，分别表示一个小程序用户（存储OpenID）、一个用户在一个活动里的一个空闲的小时和一个活动。其中<code>FreePeriod</code>的表如下：</p><p><img src="/leancloud-period.png"></p><p>看起来非常顺利，嗯，毕竟老司机了，这一带我闭着眼睛都能开。</p><p>接下来，需要配置一下小程序，只有在合法域名列表里的域名才允许从小程序里请求，随便吐个槽，一开始我以为微信自己的域名可以不用添加（我用到了一个微信的接口获取OpenID），结果一跑，挂了，然后再去添加，还瞎了写错了域名，所以前后一共改了3次，但是小程序规定一个月只能更改五次……</p><p>在小程序的后台更改：</p><p><img src="/request-domains.png"></p><p>然后还需要在小程序开发工具的项目页面刷新：</p><p><img src="/request-domains-refresh.png"></p><h2 id="LeanCloud-REST-API"><a href="#LeanCloud-REST-API" class="headerlink" title="LeanCloud REST API"></a>LeanCloud REST API</h2><p>接下来，我就可以愉快的在小程序里发请求了。一开始，我觉得LeanCloud的API挺强大的，比如我想要获取指定OpenID的用户：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserByOpenId</span>(<span class="hljs-params">openId, cb</span>) &#123;<br>  <span class="hljs-title function_">r</span>(<br>    <span class="hljs-string">&#x27;/classes/WeChatUser&#x27;</span>,<br>    <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;where=&#123;&quot;OpenId&quot;:&quot;&#x27;</span> + openId + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>,<br>    <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">results</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : res.<span class="hljs-property">data</span>.<span class="hljs-property">results</span>[<span class="hljs-number">0</span>]);<br>    &#125;,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">typeof</span> cb == <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-title function_">cb</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Fail to get user by OpenID: Network error&#x27;</span>));<br>    &#125;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>r</code>是我对微信里的HTTP请求接口的额外封装。可见，直接在body里按照语法写Query就行了，爽！</p><p>可是接下来问题来了：我需要获取一个用户参与的活动。这是一个多对多的关系，但是，为了简单起见，我并没有搞一个中间的关系表，而是直接在FreePeriod类里指定了Owner和Activity，也就是说，如果一个用户是某个FreePeriod的Owner，那么这个FreePeriod的Activity就是这个用户参与的活动，这在SQL里很简单（虽然我忘了），但是LeanCloud强调了，他们实现上用的是非关系型数据库……所以，我研究了半个小时也没研究出用他的语法怎样一个请求就拿到……最后，我做了两次请求（捂脸）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserParticipatedActivities</span>(<span class="hljs-params">openId, cb</span>) &#123;<br>  <span class="hljs-title function_">r</span>(<br>    <span class="hljs-string">&#x27;/classes/FreePeriod&#x27;</span>,<br>    <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;where=&#123;&quot;Owner&quot;:&#123;&quot;$inQuery&quot;:&#123;&quot;where&quot;:&#123;&quot;OpenId&quot;:&quot;&#x27;</span> + openId + <span class="hljs-string">&#x27;&quot;&#125;,&quot;className&quot;:&quot;WeChatUser&quot;&#125;&#125;&#125;&#x27;</span>,<br>    <span class="hljs-function">(<span class="hljs-params">fpRes</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> <span class="hljs-keyword">as</span> = fpRes.<span class="hljs-property">data</span>.<span class="hljs-property">results</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> v.<span class="hljs-property">Activity</span>.<span class="hljs-property">objectId</span>;<br>      &#125;);<br><br>      <span class="hljs-comment">// Find</span><br>      <span class="hljs-title function_">r</span>(<br>        <span class="hljs-string">&#x27;/classes/Activity&#x27;</span>,<br>        <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-string">&#x27;where=&#123;&quot;objectId&quot;:&#123;&quot;$in&quot;:[&#x27;</span> + <span class="hljs-keyword">as</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> + v + <span class="hljs-string">&#x27;&quot;&#x27;</span>; &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>) + <span class="hljs-string">&#x27;]&#125;&#125;&#x27;</span>,<br>        <span class="hljs-function">(<span class="hljs-params">aRes</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, aRes.<span class="hljs-property">data</span>.<span class="hljs-property">results</span>);<br>        &#125;,<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">cb</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Fail to fetch launched activities #2&#x27;</span>));<br>        &#125;<br>      );<br>    &#125;,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">cb</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Fail to fetch launched activities #1&#x27;</span>));<br>    &#125;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，找出用户参与的所有FreePeriod，拿到Activity的id列表，然后通过<code>$in</code>操作符拿。</p><p>顺便吐个槽：如果返回的是对象（比如创建、查询指定ID的对象）的时候，返回的JSON就是这个对象本身；而如果请求的是一个数组，那么返回的是一个对象，对象的<code>results</code>属性是一个数组。可以，这很RESTful……</p><h2 id="自己启动的活动列表页面实现"><a href="#自己启动的活动列表页面实现" class="headerlink" title="自己启动的活动列表页面实现"></a>自己启动的活动列表页面实现</h2><p>接下来可以正式写Page了。小程序里，每个Page实例都有一系列生命周期：Load - Ready - Show - Hide - Unload。在Page对应的js里，可以定义每个生命周期里对应的回调来决定做什么，这个和Android里的那几个生命周期也是挺像的，当然如果你也这么认为那你就错了，嘿嘿。</p><p>首先，写界面，听说和vue很像，但是我没学过vue，初看之下有点当年写Angular的感觉：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;launched-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;activities-list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;launchedActivities&#125;&#125;&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;activityTap&quot;</span> <span class="hljs-attr">data-objectid</span>=<span class="hljs-string">&quot;&#123;&#123;item.objectId&#125;&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>&#123;&#123;item.Title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;launch-new-button&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;ntNewActivity&quot;</span>&gt;</span>Launch New<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在小程序里，每个标签都必须是预设的组件。我需要页面里有一个列表，列表里显示每个活动的标题，然后页面底部有个按钮添加新的活动。上面的代码还是非常好懂的，就是绑定一个数组来渲染列表，然后给每一项绑定点击回调。</p><p>为了让列表填充整个页面，把按钮顶到底部，我查了一下，发现用flex比较简单，但是按照SO上的代码却并没有什么用，一度让我认为小程序是不是对flex的支持不够。后来发现，把page标签（这个标签不在<code>wxml</code>里，但是用开发工具审查元素就能看到，等价于body）的高度设置为满就行了……</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*app.wxss*/</span><br>page &#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-comment">/*launched.wxss*/</span><br><span class="hljs-selector-class">.launched-container</span> &#123;<br><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">flex-direction</span>: column;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.activities-list</span> &#123;<br><span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.launch-new-button</span> &#123;<br><span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">1</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很好，这波很稳。最后的效果如下：</p><p><img src="/launched.png"></p><p>因为列表是空的，所以上面只有一个按钮。那个，图标什么的，不存在的。</p><h2 id="新活动创建页面"><a href="#新活动创建页面" class="headerlink" title="新活动创建页面"></a>新活动创建页面</h2><p>接下来，开始编写新活动创建界面。查了一下小程序文档，发现了可以通过<code>picker</code>组件实现时间和日期选择器，excited！很棒，这是界面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;new-activity-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">bindsubmit</span>=<span class="hljs-string">&quot;fmSubmit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;title&#125;&#125;&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;fmTitleInput&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Title&quot;</span> <span class="hljs-attr">confirm-type</span>=<span class="hljs-string">&quot;next&quot;</span> <span class="hljs-attr">confirm-hold</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;description&#125;&#125;&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;fmDescriptionInput&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Description&quot;</span> <span class="hljs-attr">confirm-type</span>=<span class="hljs-string">&quot;done&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">picker</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;startDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;startDate&#125;&#125;&quot;</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;fmStartDateChange&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>Start date: &#123;&#123;startDate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">picker</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">picker</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;endDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;endDate&#125;&#125;&quot;</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;fmEndDateChange&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>End date: &#123;&#123;endDate&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">picker</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">picker</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;startTime&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;startTime&#125;&#125;&quot;</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;fmStartTimeChange&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>Start time: &#123;&#123;startTime&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">picker</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">picker</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;endTime&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;endTime&#125;&#125;&quot;</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;fmEndTimeChange&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>End time: &#123;&#123;endTime&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">picker</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">formType</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Done<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里，我也被坑了。我以为把<code>value</code>属性做一下绑定，就能双向绑定了，结果发现改变了日期、时间之后，界面上的时间和日期并没有改变！最后问了一下室友才知道，这样只是单向绑定，需要通过上面的一大堆事件把picker、input的值被改变之后更新到js里的数据对象去，所以你们大概能猜到这个js文件有多长了……看看上面的那些bind……</p><p>另外，要改变被绑定的数据并使绑定了这些数据的UI元素跟着改变，需要使用<code>setData</code>来更改，贴代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">userInfo</span>: &#123;&#125;,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">startDate</span>: <span class="hljs-string">&#x27;2017-01-01&#x27;</span>,<br>    <span class="hljs-attr">endDate</span>: <span class="hljs-string">&#x27;2017-01-07&#x27;</span>,<br>    <span class="hljs-attr">startTime</span>: <span class="hljs-string">&#x27;00:00&#x27;</span>,<br>    <span class="hljs-attr">endTime</span>: <span class="hljs-string">&#x27;23:59&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">fmTitleInput</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">title</span>: e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span><br>    &#125;);<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h2><p>前面我总是把小程序的东西和Android的东西做对比，但是实际上，还是要带着前端的思维去写。在小程序中，每个页面都有一个对应的url，比如查看Activity的url就是<code>/pages/activity/activity?objectId=123</code>，可见，url还可以带有参数，在对应的Page被加载的时候就能取到这些参数。</p><p>在主页，我需要点击添加按钮之后跳转到创建新活动的界面，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/new-activity/new-activity&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>在新活动创建成功之后，我想直接关掉当前页面并调到新的页面，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">redirectTo</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/activity/activity?objectId=&#x27;</span> + data.<span class="hljs-property">objectId</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>在activity页面里，我可以这样获得这个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">activityObjectId</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">activity</span>: &#123;&#125;,<br>    <span class="hljs-attr">periods</span>: [],<br>    <span class="hljs-attr">userInfo</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-attr">customData</span>: &#123;<br>    <span class="hljs-attr">periodsView</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">headerViewHeight</span>: <span class="hljs-number">74</span><br>  &#125;,<br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">activityObjectId</span> = options.<span class="hljs-property">objectId</span>;<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我没有用<code>setData</code>，原因后面会说。</p><h2 id="Activity界面实现"><a href="#Activity界面实现" class="headerlink" title="Activity界面实现"></a>Activity界面实现</h2><p><strong>前方高能！！！非战斗人员迅速撤离！！！</strong></p><p>在我的想象中，用户打开一个活动的详情页面之后，应该有一个类似Excel表的表格视图，其中列是日期，行是小时，用户点击单元格就可以标识自己在这一天的这一个小时有空或者没空，有空会高亮。而对于活动创建者，在这个页面则会把所有人的有空时间都显示出来，其中一个时间点如果越多人有空，颜色越深。</p><p>好的，那么我们的逻辑就很明确：打开页面的时候先拿到Activity的ID，然后从API拿到Activity的详细信息（标题等），包括Activity的启动者。然后，根据启动者和当前用户是否同一人，获取对应的FreePeriod列表，然后，渲染到页面上。</p><p>好的，我要开始吐槽了。</p><p><strong>首先，是生命周期和异步调用的冲突问题。</strong>我们有一个很明显的需求：如果我把这个页面后台了，中途另一个用户添上了自己的空闲时间，然后我回到这个页面，讲道理的话页面应该更新，获取这个活动的新的FreePeriod列表。于是，这个更新过程肯定是放在Show生命周期的。而当前用户的信息（主要是ID），一般是不会改变的，只要调用一次就好了，所以我一开始丢到了Load周期。那么现在问题来了：怎样保证Show周期到达的时候，Load周期里的异步搞定了呢？答案当然是不可能保证。所以，最后我就把获取用户信息也一并丢到了Show生命周期里，来，给你看个入门的回调地狱：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">onShow</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-comment">// Get data and update</span><br>  app.<span class="hljs-title function_">getUserInfo</span>(<span class="hljs-function">(<span class="hljs-params">err, info</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fail to get user info&#x27;</span>&#125;);<br><br>    self.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">userInfo</span>: info<br>    &#125;);<br><br>    <span class="hljs-comment">// We can get data now</span><br>    <span class="hljs-comment">// Activity data</span><br>    lcapi.<span class="hljs-title function_">getActivity</span>(self.<span class="hljs-property">data</span>.<span class="hljs-property">activityObjectId</span>, <span class="hljs-function">(<span class="hljs-params">err, activityData</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fail to load activity&#x27;</span>&#125;);<br><br>      self.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">activity</span>: activityData<br>      &#125;);<br>      self.<span class="hljs-property">customData</span>.<span class="hljs-property">periodsView</span> &amp;&amp; self.<span class="hljs-property">customData</span>.<span class="hljs-property">periodsView</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">activity</span>: activityData<br>      &#125;);<br><br>      <span class="hljs-comment">// Now we can get periods data</span><br>      <span class="hljs-comment">// Period data</span><br>      <span class="hljs-keyword">if</span> (activityData.<span class="hljs-property">Launcher</span>.<span class="hljs-property">objectId</span> == info.<span class="hljs-property">objectId</span>) &#123;<br>        <span class="hljs-comment">// Launcher open, show all periods</span><br>        lcapi.<span class="hljs-title function_">getPeriodsOfActivity</span>(activityData.<span class="hljs-property">objectId</span>, <span class="hljs-function">(<span class="hljs-params">err, periodsData</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fail to load periods&#x27;</span>&#125;);<br><br>          self.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">periods</span>: periodsData<br>          &#125;);<br>          self.<span class="hljs-property">customData</span>.<span class="hljs-property">periodsView</span> &amp;&amp; self.<span class="hljs-property">customData</span>.<span class="hljs-property">periodsView</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">periods</span>: periodsData<br>          &#125;);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Show self periods</span><br>        lcapi.<span class="hljs-title function_">getPeriodsOfActivityAndUser</span>(activityData.<span class="hljs-property">objectId</span>, info.<span class="hljs-property">objectId</span>, <span class="hljs-function">(<span class="hljs-params">err, periodsData</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Fail to load periods&#x27;</span>&#125;);<br><br>          self.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">periods</span>: periodsData<br>          &#125;);<br>          self.<span class="hljs-property">customData</span>.<span class="hljs-property">periodsView</span> &amp;&amp; self.<span class="hljs-property">customData</span>.<span class="hljs-property">periodsView</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">periods</span>: periodsData<br>          &#125;);<br>        &#125;)<br>      &#125;<br>    &#125;);<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>同样的，我在调用<code>setData</code>之后，仍然不敢立刻从<code>this.data</code>里拿数据，也是因为还不确定这个是不是异步的（虽然现在想来，应该不至于这也坑）。</p><p><strong>第二个坑在于小程序对DOM树是没有任何权限的。</strong>你也许留意到了我在Activity里的<code>customData</code>里保存了一个叫做<code>headerHeight</code>的东西，这是因为像Excel表一样的组件是不存在的，我得在画布上自己画，所以画之前我需要拿到<code>canvas</code>的大小。然而，没有任何接口可以拿到DOM树的信息，所以，我无奈之下只能把顶部的标题和描述的高度写死，然后写到<code>customData</code>里。这一点还是不太方便的，希望小程序后面能够增加一点基本的支持。</p><p><strong>第三个天坑就是自己绘制自定义组件。</strong>说实话，自己画了一天的类电子表格界面之后我觉得我的Android自定义View的姿势水平都有所提高了。在小程序里，要自定义的界面怎么办？自己画！画布拿来！定好颜色！抄起js就是干！</p><p>好在，这只是一个非常简单的二维表格，所以，我先自定义了一个PeriodView，持有canvas的绘制上下文，并包含必要的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">PeriodsView</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span> = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">w</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">h</span>: <span class="hljs-number">0</span><br>  &#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span> = &#123;<br>    <span class="hljs-attr">w</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-attr">h</span>: <span class="hljs-number">48</span><br>  &#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = &#123;<br>    <span class="hljs-attr">activity</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">periods</span>: [],<br>    <span class="hljs-attr">row</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-attr">col</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">maxDepth</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">depth</span>: []<br>  &#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span> = &#123;<br>    <span class="hljs-attr">dateHeight</span>: <span class="hljs-number">40</span>,<br>    <span class="hljs-attr">timeWidth</span>: <span class="hljs-number">60</span><br>  &#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span> = &#123;<br>    <span class="hljs-attr">lastX</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">lastY</span>: <span class="hljs-number">0</span><br>  &#125;;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span> = &#123;<br>    <span class="hljs-attr">depthCellColors</span>: &#123;<br>      <span class="hljs-attr">min</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0xE8</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">0xF5</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">0xE9</span> &#125;,<br>      <span class="hljs-attr">max</span>: &#123; <span class="hljs-attr">r</span>: <span class="hljs-number">0x1B</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">0x5E</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">0x20</span> &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">onCellTap</span> = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我的思路非常简单：画布除去左边和顶部的表头，剩下的矩形大小就是viewport，我们拖动这个表格的时候，其实就是移动viewport，可以想象在一张报纸上盖上一张白纸，白纸中间挖了个矩形的窟窿。</p><p>所以，可以看到，上面的数据里，我包含了viewport的当前位置（相对于整张表格的左上角而言）和尺寸、一个格子的尺寸、数据（当前Activity、FreePeriods列表、表格的行列数、深度（后面讲）信息等）、表头的尺寸、手势信息（和触摸事件有关），以及表格颜色范围（最浅和最深）。</p><p>然后，我们就可以写个<code>redraw</code>函数了，这里面根据上面的信息把所有viewport能看到的格子都绘制出来。一切都是非常顺利，下面是绘制日期表头的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFillStyle</span>(<span class="hljs-string">&#x27;#dfdfdf&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setStrokeStyle</span>(<span class="hljs-string">&#x27;#000000&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c = cl; c &lt;= cr; ++c) &#123;<br>  <span class="hljs-comment">// Date boxes</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">fillRect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们需要在表头显示文字，本来，我的代码是类似这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c = cl; c &lt;= cr; ++c) &#123;<br>  <span class="hljs-comment">// Box</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFillStyle</span>(<span class="hljs-string">&#x27;#dfdfdf&#x27;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setStrokeStyle</span>(<span class="hljs-string">&#x27;#000000&#x27;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">fillRect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFillStyle</span>(<span class="hljs-string">&#x27;#000000&#x27;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFontSize</span>(<span class="hljs-number">10</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setTextAlign</span>(<span class="hljs-string">&#x27;center&#x27;</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">fillText</span>(<span class="hljs-title function_">getDateString</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">activity</span>.<span class="hljs-property">StartDate</span>, c), <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> / <span class="hljs-number">2</span>, <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是实际运行之后就发现，拖动表格之后非常卡，根本不跟手！我一开始在想，难道是绘制文字非常卡？没道理啊，美团外卖的列表也是带有文字的啊。后来，可能是我天赋异禀，我突然意识到了原因：把绘制的style放到外面去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFillStyle</span>(<span class="hljs-string">&#x27;#dfdfdf&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setStrokeStyle</span>(<span class="hljs-string">&#x27;#000000&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c = cl; c &lt;= cr; ++c) &#123;<br>  <span class="hljs-comment">// Date boxes</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span>);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">fillRect</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span>);<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFillStyle</span>(<span class="hljs-string">&#x27;#000000&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setFontSize</span>(<span class="hljs-number">10</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">setTextAlign</span>(<span class="hljs-string">&#x27;center&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c = cl; c &lt;= cr; ++c) &#123;<br>  <span class="hljs-comment">// Date labels</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-title function_">fillText</span>(<span class="hljs-title function_">getDateString</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">activity</span>.<span class="hljs-property">StartDate</span>, c), <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + c * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> / <span class="hljs-number">2</span>, <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个小小的改动，带来的结果是完全不卡了！细想一下，也很好理解，如果每一个单元格我都重新设置一下画笔风格，就会导致频繁改变绘制的像素颜色，这里面的性能损耗很大。</p><p>到这里，我终于能够画出表头、单元格，其中大大小小其他的bug和debug我就按下不表。接下来是下一个坑：触摸事件。</p><p>其实逻辑上来说，非常简单：按下的时候，记录下初始坐标，手指滑动的时候，记录新的坐标，和之前的作一下差，然后修改viewport的位置，然后调用一下redraw就行了。</p><p>事实证明我的想法没错，成功的实现了拖动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">PeriodsView</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">onTouchStart</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastX</span> = e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">x</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastY</span> = e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">y</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">initialX</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastX</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">initialY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastY</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">initialTime</span> = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">valueOf</span>();<br>&#125;;<br><br><span class="hljs-title class_">PeriodsView</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">onTouchMove</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">let</span> nx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span> - (e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastX</span>);<br>  <span class="hljs-keyword">let</span> ny = <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">y</span> - (e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">y</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastY</span>);<br>  <span class="hljs-keyword">let</span> invalid = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (nx &gt;= <span class="hljs-number">0</span> &amp;&amp; nx + <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">w</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">col</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span> = nx;<br>    invalid = <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ny &gt;= <span class="hljs-number">0</span> &amp;&amp; ny + <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">h</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">row</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">h</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">y</span> = ny;<br>    invalid = <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (invalid) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">redraw</span>();<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastX</span> = e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">x</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">lastY</span> = e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">y</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>为了避免拖动到边界以外，我检查了是否出界，出界的情况下仅更新触摸点坐标，但是不调用重绘。</p><p>接下来就是点击事件，我又一次无师自通（手动斜眼），认为只要松开手指和按下手指的坐标差距够小，而时间间隔也够小，那就构成一次点击，根据坐标就能拿到被点击的单元格的行数和列数，然后触发回调：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">PeriodsView</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">onTouchEnd</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(e.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">initialX</span>) &lt;= <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(e.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">y</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">initialY</span>) &lt;= <span class="hljs-number">4</span><br>      &amp;&amp; <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">valueOf</span>() - <span class="hljs-variable language_">this</span>.<span class="hljs-property">gestures</span>.<span class="hljs-property">initialTime</span> &lt;= <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-keyword">let</span> absX = e.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">timeWidth</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">x</span>;<br>    <span class="hljs-keyword">let</span> absY = e.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">y</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">indicatorSize</span>.<span class="hljs-property">dateHeight</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewport</span>.<span class="hljs-property">y</span>;<br>    <span class="hljs-keyword">if</span> (absX &lt; <span class="hljs-number">0</span> || absX &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">col</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span> || absY &lt; <span class="hljs-number">0</span> || absY &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">row</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">h</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(absX / <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">w</span>);<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(absY / <span class="hljs-variable language_">this</span>.<span class="hljs-property">cellSize</span>.<span class="hljs-property">h</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">onCellTap</span> == <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-keyword">let</span> ps = [];<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">periods</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">period</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (period.<span class="hljs-property">c</span> == x &amp;&amp; period.<span class="hljs-property">r</span> == y) &#123;<br>          ps.<span class="hljs-title function_">push</span>(period);<br>        &#125;<br>      &#125;);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onCellTap</span>(x, y, ps);<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里要注意判断坐标换算之后位于整个表格之内，避免点击表头触发事件（好吧，我写这篇文章的时候才意识到的，所以上面的代码也是有bug的&#x3D; &#x3D;）</p><p>很完美！最后解释一下深度：对于同一个单元格，如果是活动创建者查看，那么会显示所有用户的FreePeriod，这意味着一个单元格可能会有很多个FreePeriod对象，于是我用深度来表示这个单元格的FreePeriod个数，从而得出单元格需要的颜色。</p><p>最后，只要在点击一个单元格的时候根据这个单元格是否有该用户的FreePeriod来添加或删除就行了。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>最后的任务就是分享某个活动，非常简单，只要定义一个Page的回调：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">onShareAppMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;几时得闲：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">activity</span>.<span class="hljs-property">Title</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/pages/activity/activity?objectId=&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">activity</span>.<span class="hljs-property">objectId</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      wx.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Share succeed!&#x27;</span>&#125;);<br>    &#125;,<br>    <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      wx.<span class="hljs-title function_">showToast</span>(&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Share fail!&#x27;</span>&#125;);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(res);<br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h2><p>到这里，终于完成了绝大部分逻辑，剩下的就是修bug和修bug和修bug和修bug和修bug和修bug和修bug和美化UI和美化UI和美化UI和美化UI和美化UI和美化UI。下面是一些小程序的截图：</p><p><img src="/new-activity.png"></p><p><img src="/activity.png"></p><p><img src="/activity-with-periods.png"></p><p><img src="/launched-with-new.png"></p><p><img src="/share.png"></p><h2 id="吐sai槽ting"><a href="#吐sai槽ting" class="headerlink" title="吐sai槽ting"></a>吐sai槽ting</h2><p>最后是吐槽时间。</p><ol><li><p>严厉谴责我的室友，居然没有一个愿意借我手机测试一下小程序，I am angry!</p></li><li><p>写了一天半的bug，感觉像是参加了黑客马拉松，果然不是普通代码狗能参加的啊……不过一天半写出一个小程序的雏形可见小程序的开发还是非常快速的，虽然还是不如西方记者快。</p></li><li><p>开发过程中很多操作都需要扫二维码授权，建议小程序开发者购买手机支架，把摄像头对准电脑显示器，极大开发效率。当然，你如果有女朋友的话让她帮你扫码也是可以的。啊不对，有女朋友居然还能安静地写代码？……不对，我女朋友们就在帮我写代码啊：）</p></li><li><p>写小程序的感想如图所示：</p><p><img src="/hell.png"></p></li></ol><p>最后关于这个小程序，由于官方提示不要发布demo或测试版本，所以我只能说，无可奉告！等我再有两天闲着，再来完善和优化，然后发布吧，近期找个机会把代码丢到GitHub上。</p><p>好了，明早我要继续赶多周期流水线无冲突16位超精简指令集很TM超级无敌棒的CPU了Orz</p>]]></content>
    
    
    
    <tags>
      
      <tag>wechat</tag>
      
      <tag>mini-programs</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activity 十分感动，然后拒绝了 finish 的请求</title>
    <link href="/2017/04/10/the-activity-is-moved-and-refuses-to-finish/"/>
    <url>/2017/04/10/the-activity-is-moved-and-refuses-to-finish/</url>
    
    <content type="html"><![CDATA[<p>今天晚上为了一个奇怪的问题，折腾了一个晚上，从 SDK 到多线程，最后也是十分偶然才找到了原因，这么坑爹的事情一定要记录下来。</p><p>事情的来龙去脉是这样的：最近我接了个私活，需要接入一个 OCR 模块，此时我的代码逻辑大概如下：在 Activity 上显示一个相机的预览界面，并为<code>Camera</code>设置预览回调，于是每一帧都会调用<code>onPreviewFrame</code>，相信用过 Android 的相机 API 的读者都很熟悉了。在这个方法里，我每隔 1 秒就将传递过来的字节数组通过<code>Handler.obtainMessage(...).sendToTarget()</code>将这一帧的图像发送到工作线程，在工作线程中的<code>handleMessage</code>中，会把这个字节数组编码为 Bitmap，然后调用这个 SDK 的接口进行识别，如果识别成功了，就会将这个 Bitmap 对象编码成 base64 JPEG 的字符串（业务需要），然后用同样的方式将之发送给主线程，主线程就会把这个字符串放进 Intent 里，然后调用<code>setResult</code>返回给前一个 Activity，最后调用<code>finish</code>就大功告成了。</p><p>读者里的老司机们看到这里，估计已经笑着看我翻车了，毕竟我还是 too young 啊！！</p><p>跑起来，端着手机，识别了半天，手都江硬了，终于在 Logcat 里看到了识别到的数据，谁知此时 Activity 却没有关闭。从 Logcat 看，似乎 OCR 重复识别了好几次，难道是因为连续多次调用了<code>finish</code>的缘故？不管怎么说这也不是我希望的，于是我试着加了一个 boolean 值，保证一旦识别成功就不再调用 SDK 的接口。</p><p>跑起来，端起手机，识别了半天，手都江硬了，还是没有关闭。此时，我试着按了返回按键，发现居然也无法返回。难道是 Handler 使用不当的锅？我怀疑是不是因为在工作线程调用了<code>finish</code>，于是，我天真地把所有用到主线程 Handler 的地方都从<code>mUiHandler.someMethod</code>改为了<code>new Handler(Looper.getMainLooper()).someMethod</code>，心里想着，这下保证所有 Handler 都是主线程了吧？</p><p>跑起来，端起手机，识别了半天，手都江硬了，这次连 Message 都收不到了。在凌乱了几分钟之后，我恍然大悟：一个 Looper 线程是可以绑定多个 Handler 对象的，这就意味着上面的改动会导致发消息和收消息的不是同一个 Handler 对象，当然就跪了。于是，我索性直接改成 UI 线程里调用 SDK，反正一秒一次，卡不了多少吧，于是，各种注释代码，直接在主线程里调用 SDK，识别，关闭 Activity。</p><p>跑起来，端起手机，识别了半天，手都江硬了，Activity十分感动，然后再一次拒绝了我<code>finish</code>的请求。这不科学啊！我气得疯狂地戳手机上的返回键。抬头扫了一眼 Logcat，等一下！我突然发现，我每戳一次返回键，Logcat 就刷出一条奇怪的红色错误：</p><p><img src="/intent-size-overflow.png"></p><p>如上图，我立刻谷歌了一下，发现屏幕上冒出了各种 Camera 和 Bitmap，看来和我一样悲剧的不少。</p><p>随便点开一条，恍然大悟：</p><blockquote><p> you are trying to parse <strong>large data along with intent but as per the documentation, the Binder transaction failed because it was too large.</strong></p><p> <strong>Solution :</strong></p><p> I would suggest you to create bitmap from the received <code>byte[] data</code> and store the image on device.then just parse the path of that image to any other activity according to your requirement.</p><p> Source: <a href="http://stackoverflow.com/questions/23407821/how-to-solve-error-failed-binder-transaction-in-android-4-4">How to solve error :” !!! FAILED BINDER TRANSACTION !!! “ in android 4.4 - Stack Overflow</a></p></blockquote><p>原来如此：我的 Bitmap 图像转换成 base64 之后是很大的一块数据，而 Intent 是不能存放过大的数据的。回答者还贴心地给了解决方案：将 Bitmap 缓存到设备上，然后将文件的路径放进 Intent 里。</p><p>室友这时候则建议我直接将图片缩放，我突然好奇：SDK 里是怎么处理的呢？于是，我用 Android Studio 反编译了他的 jar 包，发现他的解决方法非常暴力：在 Activity 类里定义了一个静态的 Bitmap 变量<code>public static Bitmap bigBitmap</code>。</p><p>……</p><p>其实这方法挺方便的。</p><p>……</p><p>好吧，那我也这么干吧（手动滑稽）！</p><p>终于，Activity 乖乖的把 Bitmap 放进了静态变量，然后乖乖的关掉了，我长舒了一口气，揉了揉江硬的手。</p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>activity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从源码探索事件分发 2</title>
    <link href="/2017/04/03/explore-event-dispatching-from-source-2/"/>
    <url>/2017/04/03/explore-event-dispatching-from-source-2/</url>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/03/22/explore-event-dispatching-from-source-1/">上一篇</a>里，我们简单地分析了 ViewGroup 的<code>dispatchTouchEvent</code>方法，但这个方法里涉及到的几个其他关键方法还没有搞清楚它们做了什么。另外，View 的事件分发也没有分析，这一篇将会涵盖以上内容。</p><h2 id="dispatchTransformedTouchEvent"><a href="#dispatchTransformedTouchEvent" class="headerlink" title="dispatchTransformedTouchEvent"></a>dispatchTransformedTouchEvent</h2><p>在 ViewGroup 的<code>dispatchTouchEvent</code>方法里，一共有三个地方调用到了<code>dispatchTransformedTouchEvent</code>方法，而对子 View 以及 ViewGroup 本身的<code>onTouchEvent</code>的调用也是在这个方法里调用的。</p><p>第一个调用的地方在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> childrenCount - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="hljs-literal">false</span>, child, idBitsToAssign)) &#123;<br>        <span class="hljs-comment">// Child wants to receive touch within its bounds.</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可见，是在找到了有可能消费这次触摸事件的子 View，因此此时<code>dispatchTransformedTouchEvent</code>的作用是在接受到按下事件的时候将触摸事件分发给该子 View，也就是上面的<code>child</code>。</p><p>后面的两次调用在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Dispatch to touch targets.</span><br><span class="hljs-keyword">if</span> (mFirstTouchTarget == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// No touch targets so treat this as an ordinary view.</span><br>    handled = dispatchTransformedTouchEvent(ev, canceled, <span class="hljs-literal">null</span>,<br>            TouchTarget.ALL_POINTER_IDS);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Dispatch to touch targets, excluding the new touch target if we already</span><br>    <span class="hljs-comment">// dispatched to it.  Cancel touch targets if necessary.</span><br>    <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">predecessor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> mFirstTouchTarget;<br>    <span class="hljs-keyword">while</span> (target != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> target.next;<br>        <span class="hljs-keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<br>            handled = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelChild</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(target.child)<br>                    || intercepted;<br>            <span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,<br>                    target.child, target.pointerIdBits)) &#123;<br>                handled = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cancelChild) &#123;<br>                <span class="hljs-keyword">if</span> (predecessor == <span class="hljs-literal">null</span>) &#123;<br>                    mFirstTouchTarget = next;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    predecessor.next = next;<br>                &#125;<br>                target.recycle();<br>                target = next;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        predecessor = target;<br>        target = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中上面的 L4 意味着并没有找到可以消费的子 View，因此我们调用<code>dispatchTransformedTouchEvent</code>将事件分发给了自己，注意这里第三个参数传递的是<code>null</code>，后面我们会看到，这样会把事件发给 ViewGroup 本身。而 L18 意味着在非按下事件的时候，分发后续事件给子 View；如果遇到取消事件或被拦截，也会把取消事件分发给子 View，注意此时<code>cancelChild</code>会为真，后面会看到如果第二个参数为真的话，<code>dispatchTransformedTouchEvent</code>会不考虑该事件的内容就强制分发取消事件。</p><p>现在，我们来看看<code>dispatchTransformedTouchEvent</code>的庐山真面目，<strong>注意，为了简单起见，下面的代码仍然删掉了和多点触控等相关的语句</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Transforms a motion event into the coordinate space of a particular child view,</span><br><span class="hljs-comment"> * filters out irrelevant pointer ids, and overrides its action if necessary.</span><br><span class="hljs-comment"> * If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dispatchTransformedTouchEvent</span><span class="hljs-params">(MotionEvent event, <span class="hljs-type">boolean</span> cancel,</span><br><span class="hljs-params">        View child, <span class="hljs-type">int</span> desiredPointerIdBits)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> handled;<br><br>    <span class="hljs-comment">// Canceling motions is a special case.  We don&#x27;t need to perform any transformations</span><br>    <span class="hljs-comment">// or filtering.  The important part is the action, not the contents.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">oldAction</span> <span class="hljs-operator">=</span> event.getAction();<br>    <span class="hljs-keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;<br>        event.setAction(MotionEvent.ACTION_CANCEL);<br>        <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>) &#123;<br>            handled = <span class="hljs-built_in">super</span>.dispatchTouchEvent(event);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            handled = child.dispatchTouchEvent(event);<br>        &#125;<br>        event.setAction(oldAction);<br>        <span class="hljs-keyword">return</span> handled;<br>    &#125;<br><br>    <span class="hljs-comment">// Calculate the number of pointers to deliver.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">oldPointerIdBits</span> <span class="hljs-operator">=</span> event.getPointerIdBits();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">newPointerIdBits</span> <span class="hljs-operator">=</span> oldPointerIdBits &amp; desiredPointerIdBits;<br><br>    <span class="hljs-comment">// If for some reason we ended up in an inconsistent state where it looks like we</span><br>    <span class="hljs-comment">// might produce a motion event with no pointers in it, then drop the event.</span><br>    <span class="hljs-keyword">if</span> (newPointerIdBits == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// If the number of pointers is the same and we don&#x27;t need to perform any fancy</span><br>    <span class="hljs-comment">// irreversible transformations, then we can reuse the motion event for this</span><br>    <span class="hljs-comment">// dispatch as long as we are careful to revert any changes we make.</span><br>    <span class="hljs-comment">// Otherwise we need to make a copy.</span><br>    <span class="hljs-keyword">final</span> MotionEvent transformedEvent;<br>    <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span> || child.hasIdentityMatrix()) &#123;<br>        <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>) &#123;<br>            handled = <span class="hljs-built_in">super</span>.dispatchTouchEvent(event);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">offsetX</span> <span class="hljs-operator">=</span> mScrollX - child.mLeft;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">offsetY</span> <span class="hljs-operator">=</span> mScrollY - child.mTop;<br>            event.offsetLocation(offsetX, offsetY);<br><br>            handled = child.dispatchTouchEvent(event);<br><br>            event.offsetLocation(-offsetX, -offsetY);<br>        &#125;<br>        <span class="hljs-keyword">return</span> handled;<br>    &#125;<br>    transformedEvent = MotionEvent.obtain(event);<br><br>    <span class="hljs-comment">// Perform any necessary transformations and dispatch.</span><br>    <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>) &#123;<br>        handled = <span class="hljs-built_in">super</span>.dispatchTouchEvent(transformedEvent);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">offsetX</span> <span class="hljs-operator">=</span> mScrollX - child.mLeft;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">offsetY</span> <span class="hljs-operator">=</span> mScrollY - child.mTop;<br>        transformedEvent.offsetLocation(offsetX, offsetY);<br>        <span class="hljs-keyword">if</span> (! child.hasIdentityMatrix()) &#123;<br>            transformedEvent.transform(child.getInverseMatrix());<br>        &#125;<br><br>        handled = child.dispatchTouchEvent(transformedEvent);<br>    &#125;<br><br>    <span class="hljs-comment">// Done.</span><br>    transformedEvent.recycle();<br>    <span class="hljs-keyword">return</span> handled;<br>&#125;<br></code></pre></td></tr></table></figure><p>从方法前面的注释可以看出，这个方法的目的是把相对 ViewGroup 的触摸事件坐标转为子 View 坐标系里的坐标，并分发所需要的事件给子 View。注释说得非常清楚：如果<code>child</code>参数为<code>null</code>，那么事件就分发给 ViewGroup 本身。</p><p>首先，如果是取消事件，那么我们当然不用管坐标转换的事情了，因此我们直接分发给子 View 或本身：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Canceling motions is a special case.  We don&#x27;t need to perform any transformations</span><br><span class="hljs-comment">// or filtering.  The important part is the action, not the contents.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">oldAction</span> <span class="hljs-operator">=</span> event.getAction();<br><span class="hljs-keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;<br>    event.setAction(MotionEvent.ACTION_CANCEL);<br>    <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>) &#123;<br>        handled = <span class="hljs-built_in">super</span>.dispatchTouchEvent(event);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        handled = child.dispatchTouchEvent(event);<br>    &#125;<br>    event.setAction(oldAction);<br>    <span class="hljs-keyword">return</span> handled;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，当<code>child</code>为<code>null</code>的时候，我们调用的是<code>super.dispatchTouchEvent</code>，因为我们此时需要把这个 ViewGroup 当作一个 View 来看，如果这里直接调用<code>dispatchTouchEvent</code>的话，会直接调用到前面的<code>dispatchTouchEvent</code>，会进入无限的循环调用。</p><p>由于我们只考虑单点触摸，因此<code>oldPointerIdBits == newPointerIdBits</code>，从注释看，我们接下来需要考虑是否需要构造一个新的 MotionEvent 对象用于分发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// If the number of pointers is the same and we don&#x27;t need to perform any fancy</span><br><span class="hljs-comment">// irreversible transformations, then we can reuse the motion event for this</span><br><span class="hljs-comment">// dispatch as long as we are careful to revert any changes we make.</span><br><span class="hljs-comment">// Otherwise we need to make a copy.</span><br><span class="hljs-keyword">final</span> MotionEvent transformedEvent;<br><span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span> || child.hasIdentityMatrix()) &#123;<br>    <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>) &#123;<br>        handled = <span class="hljs-built_in">super</span>.dispatchTouchEvent(event);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">offsetX</span> <span class="hljs-operator">=</span> mScrollX - child.mLeft;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">offsetY</span> <span class="hljs-operator">=</span> mScrollY - child.mTop;<br>        event.offsetLocation(offsetX, offsetY);<br><br>        handled = child.dispatchTouchEvent(event);<br><br>        event.offsetLocation(-offsetX, -offsetY);<br>    &#125;<br>    <span class="hljs-keyword">return</span> handled;<br>&#125;<br>transformedEvent = MotionEvent.obtain(event);<br></code></pre></td></tr></table></figure><p>可以猜到，<code>child.hasIdentityMatrix</code>这个方法就可以决定子 View 是否会发生“fancy irreversible transformations”（我把它翻译为“骚气的不可逆转换”），如果会的话我们就需要构造一个新的 MotionEvent 对象给子 View 以避免我们原来的对象被改变。但是这里我们会发现<code>hasIdentityMatrix</code>这个方法最终调用了一个 native 函数，而且和图形渲染有关，因此这里暂时没有办法解释为什么这样的判断是可以的，如果有读者明白，欢迎在评论区交流。</p><p>在可以直接分发当前 MotionEvent 对象的前提下：在<code>child</code>为<code>null</code>的时候，我们仍然分发给本身。否则，我们计算被转换的坐标，改动<code>event</code>里的坐标之后分发给子 View，分发完成后还会将坐标偏移回来。具体的偏移计算方法在上面的代码中，我就不详细解析了，给出一张图给读者理解：</p><p><img src="/offset-calculation.png"></p><p>上图中<code>parentEvent</code>就是当前 ViewGroup 得到的事件对象，<code>childEvent</code>就是需要分发给子 View 的事件对象。</p><p>在需要构造新的 MotionEvent 的时候，后面的语句和前面的几乎一致，只是事件对象变成了新构造的<code>transformedEvent</code>，并且最后对它进行了回收释放。</p><p>至此，我们就搞清楚了<code>dispatchTransformedTouchEvent</code>如何把事件分发给自己或子 View 的了。</p><h2 id="cancelAndClearTouchTargets"><a href="#cancelAndClearTouchTargets" class="headerlink" title="cancelAndClearTouchTargets"></a>cancelAndClearTouchTargets</h2><p>上次提到，<code>mFirstTouchTarget</code>是能消费触摸事件的对象的链表，其实只要看看<code>addTouchTarget</code>、<code>getTouchTarget</code>和<code>cancelAndClearTouchTargets</code>的代码就能一下看出来，所以这里不贴它们的代码，读者有兴趣的话可以亲自看看。</p><h2 id="resetTouchState"><a href="#resetTouchState" class="headerlink" title="resetTouchState"></a>resetTouchState</h2><p>在准备分发最开始的按下事件的时候，这个方法会被调用，用于重置一些状态，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Resets all touch state in preparation for a new cycle.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resetTouchState</span><span class="hljs-params">()</span> &#123;<br>    clearTouchTargets();<br>    resetCancelNextUpFlag(<span class="hljs-built_in">this</span>);<br>    mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;<br>    mNestedScrollAxes = SCROLL_AXIS_NONE;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>clearTouchTargets</code>里只是清空了<code>mFirstTouchTarget</code>链表而已，这里我们又看到了<code>resetCancelNextUpFlag</code>，看来我们后面必须搞清楚它。这里同时把禁止拦截的 flag 给关闭了，重置了嵌套滑动的状态。</p><h2 id="getAndVerifyPreorderedIndex"><a href="#getAndVerifyPreorderedIndex" class="headerlink" title="getAndVerifyPreorderedIndex"></a>getAndVerifyPreorderedIndex</h2><p>这个方法的目的在于获取子 View 接受触摸事件的顺序，因为 ViewGroup 可能会有重叠的 View，而在这种情况下开发者可以继承 ViewGroup 并重写<code>getChildDrawingOrder</code>来人为改变子 View 的绘制顺序，因此我们可以看到，这个方法里会获得第<code>i</code>个子 View 的绘制顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndVerifyPreorderedIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> childrenCount, <span class="hljs-type">int</span> i, <span class="hljs-type">boolean</span> customOrder)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> childIndex;<br>    <span class="hljs-keyword">if</span> (customOrder) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childIndex1</span> <span class="hljs-operator">=</span> getChildDrawingOrder(childrenCount, i);<br>        <span class="hljs-keyword">if</span> (childIndex1 &gt;= childrenCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;getChildDrawingOrder() &quot;</span><br>                    + <span class="hljs-string">&quot;returned invalid index &quot;</span> + childIndex1<br>                    + <span class="hljs-string">&quot; (child count is &quot;</span> + childrenCount + <span class="hljs-string">&quot;)&quot;</span>);<br>        &#125;<br>        childIndex = childIndex1;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        childIndex = i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> childIndex;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见，在<code>customOrder</code>为真的时候，该方法会得到自定义的绘制顺序，并做一下越界检查（这也是为什么方法名字含有“verify”），否则直接返回<code>i</code>。</p><h2 id="getAndVerifyPreorderedView"><a href="#getAndVerifyPreorderedView" class="headerlink" title="getAndVerifyPreorderedView"></a>getAndVerifyPreorderedView</h2><p>和上一个方法类似，这个方法也会根据情况获得相对应的子 View：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> View <span class="hljs-title function_">getAndVerifyPreorderedView</span><span class="hljs-params">(ArrayList&lt;View&gt; preorderedList, View[] children, <span class="hljs-type">int</span> childIndex)</span> &#123;<br>    <span class="hljs-keyword">final</span> View child;<br>    <span class="hljs-keyword">if</span> (preorderedList != <span class="hljs-literal">null</span>) &#123;<br>        child = preorderedList.get(childIndex);<br>        <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Invalid preorderedList contained null child at index &quot;</span> + childIndex);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        child = children[childIndex];<br>    &#125;<br>    <span class="hljs-keyword">return</span> child;<br>&#125;<br></code></pre></td></tr></table></figure><p>和前面不一样的是，这里不再判断<code>customOrder</code>，而是直接判断第一个参数是否为<code>null</code>，换句话说，如果没有启用自定义的绘制顺序，这个方法被调用的时候第一个参数就会是<code>null</code>。</p><h2 id="buildTouchDispatchChildList"><a href="#buildTouchDispatchChildList" class="headerlink" title="buildTouchDispatchChildList"></a>buildTouchDispatchChildList</h2><p>这个方法名字非常奇怪，但是我们看看被调用的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Find a child that can receive the event.</span><br><span class="hljs-comment">// Scan children from front to back.</span><br><span class="hljs-keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();<br></code></pre></td></tr></table></figure><p>显然，这个方法会获取根据需要（绘制顺序、Z 轴属性等）排列的子 View。接下来我们看看这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Provide custom ordering of views in which the touch will be dispatched.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This is called within a tight loop, so you are not allowed to allocate objects, including</span><br><span class="hljs-comment"> * the return array. Instead, you should return a pre-allocated list that will be cleared</span><br><span class="hljs-comment"> * after the dispatch is finished.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> ArrayList&lt;View&gt; <span class="hljs-title function_">buildTouchDispatchChildList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> buildOrderedChildList();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的注释值得注意，什么是“tight loop”？根据<a href="http://stackoverflow.com/questions/2212973/what-is-a-tight-loop">terminology - What is a “tight loop”? - Stack Overflow</a>这个帖子的解释，这种循环会被调用很频繁，这就意味着我们不能在这个方法里构造对象，否则会非常影响性能；而且需要在用完之后清空列表，原因我们在<code>buildOrderedChildList</code>的注释里可以得到回答：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Populates (and returns) mPreSortedChildren with a pre-ordered list of the View&#x27;s children,</span><br><span class="hljs-comment"> * sorted first by Z, then by child drawing order (if applicable). This list must be cleared</span><br><span class="hljs-comment"> * after use to avoid leaking child Views.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Uses a stable, insertion sort which is commonly O(n) for ViewGroups with very few elevated</span><br><span class="hljs-comment"> * children.</span><br><span class="hljs-comment"> */</span><br>ArrayList&lt;View&gt; <span class="hljs-title function_">buildOrderedChildList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childrenCount</span> <span class="hljs-operator">=</span> mChildrenCount;<br>    <span class="hljs-keyword">if</span> (childrenCount &lt;= <span class="hljs-number">1</span> || !hasChildWithZ()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从注释看，返回的列表如果不及时清除，就会泄漏子 View 对象，可能会引起 GC 导致的性能下降。注意，查看源码就能发现 ArrayList 的<code>clear</code>方法是不会改变其占用的内存的，只是将每个元素都置为<code>null</code>，因此也不会引起多次重新分配对象（allocate objects）。</p><p>上面的方法的作用就显而易见了，如果子 View 的数量不多于1或者没有一个子 View 有自定义的 Z 轴的话，就直接返回<code>null</code>，这里就有些奇怪了：即使启用了自定义绘制顺序，如果子 View 全部都用默认的 Z 值（0）的话，事件就仍然不会按照自定义的绘制顺序分发了吗？非也非也，事实上，这个<code>buildOrderedChildList</code>得到的排序是综合自定义绘制顺序和 Z 值的，从注释就看的出来，优先按照 Z 值排序，然后按照绘制顺序，那么如果所有 Z 值都为 0，我们来看看这个返回的<code>null</code>会在<code>dispatchTouchEvent</code>里造成什么影响：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();<br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">customOrder</span> <span class="hljs-operator">=</span> preorderedList == <span class="hljs-literal">null</span><br>        &amp;&amp; isChildrenDrawingOrderEnabled();<br><span class="hljs-keyword">final</span> View[] children = mChildren;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> childrenCount - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childIndex</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedIndex(<br>            childrenCount, i, customOrder);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedView(<br>            preorderedList, children, childIndex);<br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>我来给读者捋一下逻辑：如果子 View 不止 1 个，而且启用了自定义绘制顺序，而且有子 View 的 Z 值非 0，那么我们会得到综合了 Z 值和绘制顺序的<code>preorderedList</code>，此时上面的<code>customOrder</code>反而是否，为什么呢？因为此时我们已经拿到排好序的列表了，所以上面代码 L6 的<code>childIndex</code>就会等价于<code>i</code>，所以 L8 的<code>child</code>也会等价于<code>preorderedList[i]</code>，换句话说，这就变成了依次遍历已经排好序的子 View 了，正是我们想要的结果，实在巧妙！而如果所有子 View 的 Z 值都是 0，那么<code>customOrder</code>也等价于是否启用了自定义绘制顺序，后面的遍历也会顺利地按照自定义绘制顺序获取子 View。</p><p>现在我们回到<code>buildOrderedChildList</code>方法，正如注释所说，这个方法准备好 ArrayList 之后，使用插入排序将 Z 值大但绘制顺序相对小的子 View 往前提：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (mPreSortedChildren == <span class="hljs-literal">null</span>) &#123;<br>    mPreSortedChildren = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(childrenCount);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// callers should clear, so clear shouldn&#x27;t be necessary, but for safety...</span><br>    mPreSortedChildren.clear();<br>    mPreSortedChildren.ensureCapacity(childrenCount);<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">customOrder</span> <span class="hljs-operator">=</span> isChildrenDrawingOrderEnabled();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; childrenCount; i++) &#123;<br>    <span class="hljs-comment">// add next child (in child order) to end of list</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childIndex</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedIndex(childrenCount, i, customOrder);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">nextChild</span> <span class="hljs-operator">=</span> mChildren[childIndex];<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">currentZ</span> <span class="hljs-operator">=</span> nextChild.getZ();<br><br>    <span class="hljs-comment">// insert ahead of any Views with greater Z</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> i;<br>    <span class="hljs-keyword">while</span> (insertIndex &gt; <span class="hljs-number">0</span> &amp;&amp; mPreSortedChildren.get(insertIndex - <span class="hljs-number">1</span>).getZ() &gt; currentZ) &#123;<br>        insertIndex--;<br>    &#125;<br>    mPreSortedChildren.add(insertIndex, nextChild);<br>&#125;<br><span class="hljs-keyword">return</span> mPreSortedChildren;<br></code></pre></td></tr></table></figure><h2 id="canViewReceivePointerEvents"><a href="#canViewReceivePointerEvents" class="headerlink" title="canViewReceivePointerEvents"></a>canViewReceivePointerEvents</h2><p>这个方法和下一个方法都是用于判断子 View 有没有机会消费触摸事件的，看看这个方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns true if a child view can receive pointer events.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canViewReceivePointerEvents</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View child)</span> &#123;<br>    <span class="hljs-keyword">return</span> (child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE<br>            || child.getAnimation() != <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>容易看出，子 View 只要可见或者有动画，就能够接受触摸事件，这是因为这个 View 虽然暂时不可见（这里指的是<code>getVisibility != View.VISIBLE</code>），但是可能正在播放动画，比如淡入动画。</p><h2 id="isTransformedTouchPointInView"><a href="#isTransformedTouchPointInView" class="headerlink" title="isTransformedTouchPointInView"></a>isTransformedTouchPointInView</h2><p>这个方法则是保证触摸坐标落在了这个子 View 里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns true if a child view contains the specified point when transformed</span><br><span class="hljs-comment"> * into its coordinate space.</span><br><span class="hljs-comment"> * Child must not be null.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTransformedTouchPointInView</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, View child,</span><br><span class="hljs-params">        PointF outLocalPoint)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span>[] point = getTempPoint();<br>    point[<span class="hljs-number">0</span>] = x;<br>    point[<span class="hljs-number">1</span>] = y;<br>    transformPointToViewLocal(point, child);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isInView</span> <span class="hljs-operator">=</span> child.pointInView(point[<span class="hljs-number">0</span>], point[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> (isInView &amp;&amp; outLocalPoint != <span class="hljs-literal">null</span>) &#123;<br>        outLocalPoint.set(point[<span class="hljs-number">0</span>], point[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> isInView;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的<code>transformPointToViewLocal</code>我就不贴代码了，其实和前面分发事件的时候转换坐标是一样的道理，读者可以自己查看。</p><h2 id="resetCancelNextUpFlag"><a href="#resetCancelNextUpFlag" class="headerlink" title="resetCancelNextUpFlag"></a>resetCancelNextUpFlag</h2><p>终于到这货了！我们查阅代码，发现它在把一个 flag 复位，这个 flag 叫：<code>PFLAG_CANCEL_NEXT_UP_EVENT</code>，而这个 flag 是 View 里面定义的，直接看名字的话，这个 flag 表示是否要取消掉接下来的<code>EVENT_UP</code>事件，我们看看这个 flag 的注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates whether the view is temporarily detached.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PFLAG_CANCEL_NEXT_UP_EVENT</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0x04000000</span>;<br></code></pre></td></tr></table></figure><p>它说的是这个 View 是否被临时从 View 树中摘掉了，我们接着看，搜索这个 flag 被用到的地方，一共三处，第一处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Performs button-related actions during a touch down event.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> event The event.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> True if the down was consumed.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">performButtonActionOnTouchDown</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>    <span class="hljs-keyword">if</span> (event.isFromSource(InputDevice.SOURCE_MOUSE) &amp;&amp;<br>        (event.getButtonState() &amp; MotionEvent.BUTTON_SECONDARY) != <span class="hljs-number">0</span>) &#123;<br>        showContextMenu(event.getX(), event.getY());<br>        mPrivateFlags |= PFLAG_CANCEL_NEXT_UP_EVENT;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就很尴尬了……说好的从 View 树摘掉呢？？？我猜测这个方法是后来才加上的，而前面对 flag 的注释是之前就写上的……从上面的方法看，当我们正在触摸这个 View 的时候，如果用鼠标（对，鼠标）对这个 View 按了右键，那我们得弹出上下文菜单，显然，这个时候松开手指也不能触发按钮的 click 事件啊！于是，我们看到上面把这个 flag 立了起来。</p><p>第二个地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is called when a container is going to temporarily detach a child, with</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> ViewGroup#detachViewFromParent(View) ViewGroup.detachViewFromParent&#125;.</span><br><span class="hljs-comment"> * It will either be followed by &#123;<span class="hljs-doctag">@link</span> #onFinishTemporaryDetach()&#125; or</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #onDetachedFromWindow()&#125; when the container is done.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartTemporaryDetach</span><span class="hljs-params">()</span> &#123;<br>    removeUnsetPressCallback();<br>    mPrivateFlags |= PFLAG_CANCEL_NEXT_UP_EVENT;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见，如果我们手动从 View 树摘掉这个 View，那么这个 View 就该取消掉手指抬起事件了。</p><p>第三个地方比较复杂，是在 View 被从 Window 移除之后调用的，并且复位了这个 flag：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is a framework-internal mirror of onDetachedFromWindow() that&#x27;s called</span><br><span class="hljs-comment"> * after onDetachedFromWindow().</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If you override this you *MUST* call super.onDetachedFromWindowInternal()!</span><br><span class="hljs-comment"> * The super method should be called at the end of the overridden method to ensure</span><br><span class="hljs-comment"> * subclasses are destroyed first</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@CallSuper</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDetachedFromWindowInternal</span><span class="hljs-params">()</span> &#123;<br>    mPrivateFlags &amp;= ~PFLAG_CANCEL_NEXT_UP_EVENT;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我的理解是，移除之后重置一下状态，如果有读者知道其目的，可以在评论区交流。</p><p>到这里我们就知道了，这个 flag 在某些情况下会被立起来，目的是取消后续的抬起事件，那么我们在<code>resetTouchState</code>里为什么要复位也可以理解了：开始新一波触摸事件之后，之前如果没有复位的话当然就要复位了，否则这次事件也会被这个 flag 影响的！既然如此，我们顺便看看这个 flag 怎么影响我们的事件分发，回到 ViewGroup，两处用到了<code>resetCancelNextUpFlag</code>的返回值，首先是<code>dispatchTouchEvent</code>的这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Check for cancelation.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canceled</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(<span class="hljs-built_in">this</span>)<br>        || actionMasked == MotionEvent.ACTION_CANCEL;<br></code></pre></td></tr></table></figure><p>没错，如果我们把这个 flag 立起来了，那么我们会得到<code>canceled == true</code>，也就是说，如果发生了前面所说的，按下按钮的时候又点击鼠标右键，那么我们在这里就会判定这个 ViewGroup 需要取消事件，最终我们会分发一个<code>EVENT_CANCEL</code>给这个 ViewGroup。其实，与此同时我们的这个 flag 也会被复位，因此代码里多处调用，只是为了保证意外吧。第二个地方也在<code>dispatchTouchEvent</code>里，不过这次轮到了子 View：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<br>    handled = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelChild</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(target.child)<br>            || intercepted;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里就不再解释了。</p><h2 id="View-的事件分发"><a href="#View-的事件分发" class="headerlink" title="View 的事件分发"></a>View 的事件分发</h2><p>比起 ViewGroup，View 的事件分发就简单多了，除杂后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Pass the touch screen motion event down to the target view, or this</span><br><span class="hljs-comment"> * view if it is the target.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> event The motion event to be dispatched.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> True if the event was handled by the view, false otherwise.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dispatchTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">actionMasked</span> <span class="hljs-operator">=</span> event.getActionMasked();<br>    <span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;<br>        <span class="hljs-comment">// Defensive cleanup for new gesture</span><br>        stopNestedScroll();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;<br>        result = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//noinspection SimplifiableIfStatement</span><br>    <span class="hljs-type">ListenerInfo</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> mListenerInfo;<br>    <span class="hljs-keyword">if</span> (li != <span class="hljs-literal">null</span> &amp;&amp; li.mOnTouchListener != <span class="hljs-literal">null</span><br>            &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED<br>            &amp;&amp; li.mOnTouchListener.onTouch(<span class="hljs-built_in">this</span>, event)) &#123;<br>        result = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;<br>        result = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Clean up after nested scrolls if this is the end of a gesture;</span><br>    <span class="hljs-comment">// also cancel it if we tried an ACTION_DOWN but we didn&#x27;t want the rest</span><br>    <span class="hljs-comment">// of the gesture.</span><br>    <span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||<br>            actionMasked == MotionEvent.ACTION_CANCEL ||<br>            (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;<br>        stopNestedScroll();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先看到，如果是新的触摸按下事件，我们会停下嵌套滑动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">actionMasked</span> <span class="hljs-operator">=</span> event.getActionMasked();<br><span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;<br>    <span class="hljs-comment">// Defensive cleanup for new gesture</span><br>    stopNestedScroll();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们是拖动滚动条（这些应该是另外一套处理机制了），我们也认为我们已经消费了事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;<br>    result = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，在 View 启用（enabled）的时候，如果有触摸监听器，我们会触发对应的回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ListenerInfo</span> <span class="hljs-variable">li</span> <span class="hljs-operator">=</span> mListenerInfo;<br><span class="hljs-keyword">if</span> (li != <span class="hljs-literal">null</span> &amp;&amp; li.mOnTouchListener != <span class="hljs-literal">null</span><br>        &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED<br>        &amp;&amp; li.mOnTouchListener.onTouch(<span class="hljs-built_in">this</span>, event)) &#123;<br>    result = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果回调为真，我们也认为消费了事件。</p><p>如果我们的<code>onTouch</code>返回真，那么我们的<code>onTouchEvent</code>就不会被调用，这从后面的代码容易看出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;<br>    result = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，如果我们取消了事件，或者抬起了手，或者我们没有（不想）消费这个事件，那么我们也要把嵌套滑动停下来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Clean up after nested scrolls if this is the end of a gesture;</span><br><span class="hljs-comment">// also cancel it if we tried an ACTION_DOWN but we didn&#x27;t want the rest</span><br><span class="hljs-comment">// of the gesture.</span><br><span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||<br>        actionMasked == MotionEvent.ACTION_CANCEL ||<br>        (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;<br>    stopNestedScroll();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里，我们已经窥探了 ViewGroup 和 View 的事件分发源码，从源码上知道了事件如何在视图树中分发，也意外发现了很多坑，比如上面提到的，设置了 OnTouchListener 之后，<code>onTouchEvent</code>就会失效了。如果这个系列还有后文，那大概是对我们精简掉的部分：多点触控、无障碍处理进行源码级分析了。</p><p><strong>如果你看到这里，还没有晕，看懂了，那说明<del>我的写作水平还是可以的</del>这怎么可能呢: )</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>explore-event-dispatching-from-source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 CentOS 6.8 上安装 Oracle Database 11g Release 2</title>
    <link href="/2017/03/23/install-oracle-database-11g-r2-on-centos-6-8/"/>
    <url>/2017/03/23/install-oracle-database-11g-r2-on-centos-6-8/</url>
    
    <content type="html"><![CDATA[<p>Oracle Database 的安装一般需要图形化界面，因此这里我将使用 Response File 安装的方法记录下来以供参考。</p><h2 id="获取-Response-File"><a href="#获取-Response-File" class="headerlink" title="获取 Response File"></a>获取 Response File</h2><p>要通过静默安装的方式安装，我们需要一个 Response File，可以看作这个文件代替我们回答了图形化安装界面里的每个步骤的选项。我通过本地的虚拟机获得了该文件，也可以在安装目录里的<code>response/db_install.rsp</code>中看到默认的配置，这里我的配置如下（删除了注释）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs routeros">oracle.install.<span class="hljs-attribute">responseFileVersion</span>=/oracle/install/rspfmt_dbinstall_response_schema_v11_2_0<br>oracle.install.<span class="hljs-attribute">option</span>=INSTALL_DB_SWONLY<br><span class="hljs-attribute">ORACLE_HOSTNAME</span>=localhost<br><span class="hljs-attribute">UNIX_GROUP_NAME</span>=oinstall<br><span class="hljs-attribute">INVENTORY_LOCATION</span>=/opt/oracle/oraInventory<br><span class="hljs-attribute">SELECTED_LANGUAGES</span>=en<br><span class="hljs-attribute">ORACLE_HOME</span>=/opt/oracle/oracle11g/product/11.2.0/dbhome_1<br><span class="hljs-attribute">ORACLE_BASE</span>=/opt/oracle/oracle11g<br>oracle.install.db.<span class="hljs-attribute">InstallEdition</span>=EE<br>oracle.install.db.<span class="hljs-attribute">isCustomInstall</span>=<span class="hljs-literal">false</span><br>oracle.install.db.customComponents=<br>oracle.install.db.<span class="hljs-attribute">DBA_GROUP</span>=dba<br><span class="hljs-comment"># Use wheel group which can issue sudo command</span><br>oracle.install.db.<span class="hljs-attribute">OPER_GROUP</span>=wheel<br>oracle.install.db.CLUSTER_NODES=<br>oracle.install.db.config.starterdb.<span class="hljs-attribute">type</span>=GENERAL_PURPOSE<br>oracle.install.db.config.starterdb.globalDBName=<br>oracle.install.db.config.starterdb.SID=<br>oracle.install.db.config.starterdb.characterSet=<br>oracle.install.db.config.starterdb.memoryLimit=<br>oracle.install.db.config.starterdb.<span class="hljs-attribute">memoryOption</span>=<span class="hljs-literal">false</span><br>oracle.install.db.config.starterdb.<span class="hljs-attribute">installExampleSchemas</span>=<span class="hljs-literal">false</span><br>oracle.install.db.config.starterdb.<span class="hljs-attribute">enableSecuritySettings</span>=<span class="hljs-literal">true</span><br>oracle.install.db.config.starterdb.password.ALL=<br>oracle.install.db.config.starterdb.password.SYS=<br>oracle.install.db.config.starterdb.password.SYSTEM=<br>oracle.install.db.config.starterdb.password.SYSMAN=<br>oracle.install.db.config.starterdb.password.DBSNMP=<br>oracle.install.db.config.starterdb.<span class="hljs-attribute">control</span>=DB_CONTROL<br>oracle.install.db.config.starterdb.gridcontrol.gridControlServiceURL=<br>oracle.install.db.config.starterdb.dbcontrol.<span class="hljs-attribute">enableEmailNotification</span>=<span class="hljs-literal">false</span><br>oracle.install.db.config.starterdb.dbcontrol.emailAddress=<br>oracle.install.db.config.starterdb.dbcontrol.SMTPServer=<br>oracle.install.db.config.starterdb.automatedBackup.<span class="hljs-attribute">enable</span>=<span class="hljs-literal">false</span><br>oracle.install.db.config.starterdb.automatedBackup.osuid=<br>oracle.install.db.config.starterdb.automatedBackup.ospwd=<br>oracle.install.db.config.starterdb.storageType=<br>oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=<br>oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation=<br>oracle.install.db.config.asm.diskGroup=<br>oracle.install.db.config.asm.ASMSNMPPassword=<br>MYORACLESUPPORT_USERNAME=<br>MYORACLESUPPORT_PASSWORD=<br><span class="hljs-attribute">SECURITY_UPDATES_VIA_MYORACLESUPPORT</span>=<span class="hljs-literal">false</span><br><span class="hljs-comment"># Must be true to avoid PROXY related error</span><br><span class="hljs-attribute">DECLINE_SECURITY_UPDATES</span>=<span class="hljs-literal">true</span><br>PROXY_HOST=<br>PROXY_PORT=<br></code></pre></td></tr></table></figure><p>其中需要注意的配置项已经在上面用注释说明。</p><h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><p>Oracle Database 安装之前不仅要安装依赖，还需要调整各种内核参数。幸运的是，Oracle 已经为我们准备了一键配置包。</p><p>首先添加源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget http://public-yum.oracle.com/public-yum-ol6.repo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mv</span> public-yum-ol6.repo /etc/yum.repos.d/</span><br></code></pre></td></tr></table></figure><p>然后获取公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol6 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle</span><br></code></pre></td></tr></table></figure><p>接下来我们就可以安装依赖包了：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># yum install oracle-rdbms-server-11gR2-preinstall elfutils-libelf-devel unixODBC unixODBC-devel</span><br></code></pre></td></tr></table></figure><h2 id="准备安装用户和目录"><a href="#准备安装用户和目录" class="headerlink" title="准备安装用户和目录"></a>准备安装用户和目录</h2><p>安装好之后，Oracle 已经为我们添加了一个用户<code>oracle</code>和其用户组<code>oinstall</code>，我们接下来需要通过这个帐号安装（使用<code>root</code>运行安装程序会被拒绝），所以我们要先更改其密码，并事先创建好安装目录并配置好权限（如果选择安装到其他位置，前面的 Response File 需要相应地修改）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">passwd oracle</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">usermod -aG wheel oracle</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /opt/oracle</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chown</span> oracle:oinstall /opt/oracle</span><br></code></pre></td></tr></table></figure><h2 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h2><p>以下步骤中美元符号开头的命令均使用<code>oracle</code>用户执行。</p><p>从官方网站下载了两个 zip 之后通过<code>unzip</code>命令解压，就能在目录中看到<code>database</code>目录，里面有安装所需一切文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ unzip linux<span class="hljs-selector-class">.x64_11gR2_database_1of2</span><span class="hljs-selector-class">.zip</span><br>$ unzip linux<span class="hljs-selector-class">.x64_11gR2_database_2of2</span>.zip<br></code></pre></td></tr></table></figure><h2 id="增大-swap-分区"><a href="#增大-swap-分区" class="headerlink" title="增大 swap 分区"></a>增大 swap 分区</h2><p>如果你的 CentOS 的 swap 分区没有启用或者不足 8G，安装将会失败。通过以下配置可以添加新的 swap 分区。创建分区文件也可以用<code>dd</code>命令，这里不详述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">fallocate -l 8G /swapfile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 600 /swapfile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkswap /swapfile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">swapon /swapfile</span><br></code></pre></td></tr></table></figure><p>然后编辑文件<code>/etc/sysctl.conf</code>，修改下面的一行如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">vm.swappiness</span> = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>保存之后执行：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># sysctl -p</span><br></code></pre></td></tr></table></figure><p>为了能够在服务器启动后自动挂载，可以在<code>/etc/fstab</code>中追加下面一行：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">/swapfile            <span class="hljs-built_in">none</span>                    swap    sw              <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>安装的时候只要用<code>oracle</code>用户执行一行命令。部分 log 会直接刷到标准输出，其中说明了日志的路径，只要静静等待安装完成时标准输出出现执行相关脚本的字眼即可。安装命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/database/</span>runInstaller -silent -noconfig -ignoreSysPrereqs -ignorePrereq -responseFile <span class="hljs-regexp">/home/</span>oracle/db.rsp<br></code></pre></td></tr></table></figure><p>注意修改上面的 Response File 的路径。</p><p>安装完成之后，<strong>使用<code>root</code>用户</strong>执行两个脚本：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># <span class="hljs-regexp">/opt/</span>oracle<span class="hljs-regexp">/oraInventory/</span>orainstRoot.sh<br># <span class="hljs-regexp">/opt/</span>oracle<span class="hljs-regexp">/oracle11g/</span>product<span class="hljs-regexp">/11.2.0/</span>dbhome_1/root.sh<br></code></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在<code>/etc/profile</code>中添加以下环境变量配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_BASE</span>=/opt/oracle/oracle11g<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_HOME</span>=<span class="hljs-variable">$ORACLE_BASE</span>/product/11.2.0/dbhome_1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_SID</span>=orcl<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">ORACLE_UNQNAME</span>=orcl<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">NLS_LANG</span>=.AL32UTF8<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$ORACLE_HOME/bin/:$ORACLE_HOME/lib64<br></code></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>执行<code>. /etc/profile</code>或重新登入之后，就可以启动监听器了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> lsnrctl <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>可以通过下面的命令验证 Oracle Database 已经可以使用：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sqlplus / <span class="hljs-keyword">as</span> sysdba<br></code></pre></td></tr></table></figure><p>由于之前配置好了<code>oracle</code>用户，所以可以直接登录而不询问密码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>oracle-database</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从源码探索事件分发 1</title>
    <link href="/2017/03/21/explore-event-dispatching-from-source-1/"/>
    <url>/2017/03/21/explore-event-dispatching-from-source-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p> Edit History</p><p> <strong>2017&#x2F;04&#x2F;05</strong></p><ul><li>更正了<code>mFirstTouchTarget</code>为<code>null</code>的条件</li></ul></blockquote><p>以前一直认为身为Android开发者，一定要去读Android的源码，然而由于各种各样的原因迟迟没有开始，最近终于下定决心提高一下，买了《Android开发艺术探索》，并开始尝试从源码看懂触摸事件的分发。这个系列文章会记录我通过阅读源代码的方式一步步搞懂Android里的事件分发的过程。</p><p>作为系列的第一篇，我们先开开上帝视角，搬出一些结论来。从Android的布局xml结构我们就能很容易发现，Android中的View们是以一棵树的形式组成的，这样的设计是几乎所有有GUI相关概念的平台里都会使用的设计，在树状的视图结构中，我们可以把里面的一个子树当作是一个View，也就是单一的一个节点来处理，这样就可以通过递归的思想进行事件分发、测量布局和渲染等行为。</p><p>当我们的手指落在屏幕上的时候，驱动捕获到我们的行为，发送到Android系统上层框架，最终，一个包含这次屏幕操作的MotionEvent对象被传递给了对应的Activity对象。这个Activity会把这个对象分发给这个Activity中的根View，并通过递归的形式一直传递下去，直到这个触摸行为被某个View识别并消费掉。形象地说，就像一份通知从学校教务处发到了辅导员，辅导员把它分发给他管理的班级的班长，班长分发给班级的每个宿舍长，最终被发到每个学生手上。</p><p>前面说道，我们可以把一个子树看作一个View，因此我们只需要弄懂最简单的情形：一个ViewGroup包含一个View，事件从ViewGroup分发给View的情况，就可以很快理解事件在一棵巨大的View树里如何分发。</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>为了测试，我自定义了一个ViewGroup和一个View，他们的唯一目的就是在和事件分发相关的方法里输出日志。其中<code>EdFrameLayout</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EdFrameLayout</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FrameLayout</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;EdFrameLayout&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EdFrameLayout</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EdFrameLayout</span><span class="hljs-params">(Context context, AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dispatchTouchEvent</span><span class="hljs-params">(MotionEvent ev)</span> &#123;<br>        Log.i(TAG, <span class="hljs-string">&quot;dispatchTouchEvent: &quot;</span> + EventNameUtils.eventNameOf(ev.getAction()));<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.dispatchTouchEvent(ev);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onInterceptTouchEvent</span><span class="hljs-params">(MotionEvent ev)</span> &#123;<br>        Log.i(TAG, <span class="hljs-string">&quot;onInterceptTouchEvent&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onInterceptTouchEvent(ev);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>        Log.i(TAG, <span class="hljs-string">&quot;onTouchEvent&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onTouchEvent(event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>EdView</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EdView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;EdView&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EdView</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EdView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dispatchTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>        Log.i(TAG, <span class="hljs-string">&quot;dispatchTouchEvent: &quot;</span> + EventNameUtils.eventNameOf(event.getAction()));<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.dispatchTouchEvent(event);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>        Log.i(TAG, <span class="hljs-string">&quot;onTouchEvent&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onTouchEvent(event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>EventNameUtils</code>类仅仅是为了输出事件的名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventNameUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">eventNameOf</span><span class="hljs-params">(<span class="hljs-type">int</span> action)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (action) &#123;<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_DOWN: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ACTION_DOWN&quot;</span>;<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_MOVE: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ACTION_MOVE&quot;</span>;<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_UP: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ACTION_UP&quot;</span>;<br>            <span class="hljs-keyword">case</span> MotionEvent.ACTION_CANCEL: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ACTION_CANCEL&quot;</span>;<br>            <span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UNKNOWN ACTION&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>布局文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.perqin.playground.eventdispatching.EdFrameLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;com.perqin.playground.activities.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.perqin.playground.eventdispatching.EdView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/ed_view&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;240dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;240dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/colorAccent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">com.perqin.playground.eventdispatching.EdFrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行起来之后是这样的：</p><p><img src="/playground.png" alt="Playground"></p><p>我们轻触中间的强调色的方块，看到日志里有这样的输出：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.perqin</span><span class="hljs-selector-class">.playground</span> I/EdFrameLayout: dispatchTouchEvent: ACTION_DOWN<br>com<span class="hljs-selector-class">.perqin</span><span class="hljs-selector-class">.playground</span> I/EdFrameLayout: onInterceptTouchEvent<br>com<span class="hljs-selector-class">.perqin</span><span class="hljs-selector-class">.playground</span> I/EdView: dispatchTouchEvent: ACTION_DOWN<br>com<span class="hljs-selector-class">.perqin</span><span class="hljs-selector-class">.playground</span> I/EdView: onTouchEvent<br>com<span class="hljs-selector-class">.perqin</span><span class="hljs-selector-class">.playground</span> I/EdFrameLayout: onTouchEvent<br></code></pre></td></tr></table></figure><h2 id="再开上帝视角"><a href="#再开上帝视角" class="headerlink" title="再开上帝视角"></a>再开上帝视角</h2><p>直接从源码就把事件分发无中生有地摸清对我来说还是挺困难的，因此我之前也早已看过书、搜索过相关文章。从上面的日志也得以映证时间分发的流程：</p><ul><li>某个View（不论是否是ViewGroup）的<code>dispatchTouchEvent</code>被其父节点调用，从中该View可以得到这次触摸事件的MotionEvent对象。</li><li>如果这个View是ViewGroup，它会先调用<code>onInterceptTouchEvent</code>方法，根据返回值判断它自己要不要将它拦截。如果不拦截，它会找到需要接受这个事件的子View，通过调用子View的<code>dispatchTouchEvent</code>方法将事件分发下去（正如它的父View将事件这样分发给它一样）。</li><li>如果这个View不是ViewGroup，它会直接调用自己的<code>onTouchEvent</code>，根据返回值判断是否自己想消费这个事件，并在<code>dispatchTouchEvent</code>中返回自己是否消费了这个事件。</li><li>将事件分发给子View的ViewGroup会从其<code>dispatchTouchEvent</code>的返回值判断子View是否消费了事件。如果没有View愿意消费，那么它自己消费或者也不消费并告知自己的父View（正如拒绝消费的子View们一样）。</li></ul><p>以上描述不一定准确，但基本把事件分发的逻辑讲述了一遍。接下来，我们可以开始看源码了～</p><h2 id="ViewGroup的dispatchTouchEvent"><a href="#ViewGroup的dispatchTouchEvent" class="headerlink" title="ViewGroup的dispatchTouchEvent"></a>ViewGroup的dispatchTouchEvent</h2><p>不得不说源码实在太复杂了，光是ViewGroup的<code>dispatchTouchEvent</code>就有200多行。我把里面的一些语句（包括多点触摸相关代码、只用于Debug的语句、安全校验等）删掉，得到下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewGroup</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dispatchTouchEvent</span><span class="hljs-params">(MotionEvent ev)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">handled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> ev.getAction();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">actionMasked</span> <span class="hljs-operator">=</span> action &amp; MotionEvent.ACTION_MASK;<br><br>        <span class="hljs-comment">// Handle an initial down.</span><br>        <span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;<br>            <span class="hljs-comment">// Throw away all previous state when starting a new touch gesture.</span><br>            <span class="hljs-comment">// The framework may have dropped the up or cancel event for the previous gesture</span><br>            <span class="hljs-comment">// due to an app switch, ANR, or some other state change.</span><br>            cancelAndClearTouchTargets(ev);<br>            resetTouchState();<br>        &#125;<br><br>        <span class="hljs-comment">// Check for interception.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> intercepted;<br>        <span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN<br>                || mFirstTouchTarget != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">disallowIntercept</span> <span class="hljs-operator">=</span> (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (!disallowIntercept) &#123;<br>                intercepted = onInterceptTouchEvent(ev);<br>                ev.setAction(action); <span class="hljs-comment">// restore action in case it was changed</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                intercepted = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// There are no touch targets and this action is not an initial down</span><br>            <span class="hljs-comment">// so this view group continues to intercept touches.</span><br>            intercepted = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Check for cancelation.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canceled</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(<span class="hljs-built_in">this</span>)<br>                || actionMasked == MotionEvent.ACTION_CANCEL;<br><br>        <span class="hljs-comment">// Update list of touch targets for pointer down, if needed.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">split</span> <span class="hljs-operator">=</span> (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class="hljs-number">0</span>;<br>        <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">newTouchTarget</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">alreadyDispatchedToNewTouchTarget</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;<br>            <span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">actionIndex</span> <span class="hljs-operator">=</span> ev.getActionIndex(); <span class="hljs-comment">// always 0 for down</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">idBitsToAssign</span> <span class="hljs-operator">=</span> TouchTarget.ALL_POINTER_IDS;<br><br>                <span class="hljs-comment">// Clean up earlier touch targets for this pointer id in case they</span><br>                <span class="hljs-comment">// have become out of sync.</span><br>                removePointersFromTouchTargets(idBitsToAssign);<br><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childrenCount</span> <span class="hljs-operator">=</span> mChildrenCount;<br>                <span class="hljs-keyword">if</span> (newTouchTarget == <span class="hljs-literal">null</span> &amp;&amp; childrenCount != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> ev.getX(actionIndex);<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> ev.getY(actionIndex);<br>                    <span class="hljs-comment">// Find a child that can receive the event.</span><br>                    <span class="hljs-comment">// Scan children from front to back.</span><br>                    <span class="hljs-keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">customOrder</span> <span class="hljs-operator">=</span> preorderedList == <span class="hljs-literal">null</span><br>                            &amp;&amp; isChildrenDrawingOrderEnabled();<br>                    <span class="hljs-keyword">final</span> View[] children = mChildren;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> childrenCount - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childIndex</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedIndex(<br>                                childrenCount, i, customOrder);<br>                        <span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedView(<br>                                preorderedList, children, childIndex);<br><br>                        <span class="hljs-keyword">if</span> (!canViewReceivePointerEvents(child)<br>                                || !isTransformedTouchPointInView(x, y, child, <span class="hljs-literal">null</span>)) &#123;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br><br>                        newTouchTarget = getTouchTarget(child);<br>                        <span class="hljs-keyword">if</span> (newTouchTarget != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-comment">// Child is already receiving touch within its bounds.</span><br>                            <span class="hljs-comment">// Give it the new pointer in addition to the ones it is handling.</span><br>                            newTouchTarget.pointerIdBits |= idBitsToAssign;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br><br>                        resetCancelNextUpFlag(child);<br>                        <span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="hljs-literal">false</span>, child, idBitsToAssign)) &#123;<br>                            <span class="hljs-comment">// Child wants to receive touch within its bounds.</span><br>                            newTouchTarget = addTouchTarget(child, idBitsToAssign);<br>                            alreadyDispatchedToNewTouchTarget = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (preorderedList != <span class="hljs-literal">null</span>) preorderedList.clear();<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (newTouchTarget == <span class="hljs-literal">null</span> &amp;&amp; mFirstTouchTarget != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// Did not find a child to receive the event.</span><br>                    <span class="hljs-comment">// Assign the pointer to the least recently added target.</span><br>                    newTouchTarget = mFirstTouchTarget;<br>                    <span class="hljs-keyword">while</span> (newTouchTarget.next != <span class="hljs-literal">null</span>) &#123;<br>                        newTouchTarget = newTouchTarget.next;<br>                    &#125;<br>                    newTouchTarget.pointerIdBits |= idBitsToAssign;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Dispatch to touch targets.</span><br>        <span class="hljs-keyword">if</span> (mFirstTouchTarget == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// No touch targets so treat this as an ordinary view.</span><br>            handled = dispatchTransformedTouchEvent(ev, canceled, <span class="hljs-literal">null</span>,<br>                    TouchTarget.ALL_POINTER_IDS);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Dispatch to touch targets, excluding the new touch target if we already</span><br>            <span class="hljs-comment">// dispatched to it.  Cancel touch targets if necessary.</span><br>            <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">predecessor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> mFirstTouchTarget;<br>            <span class="hljs-keyword">while</span> (target != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> target.next;<br>                <span class="hljs-keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<br>                    handled = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelChild</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(target.child)<br>                            || intercepted;<br>                    <span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,<br>                            target.child, target.pointerIdBits)) &#123;<br>                        handled = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (cancelChild) &#123;<br>                        <span class="hljs-keyword">if</span> (predecessor == <span class="hljs-literal">null</span>) &#123;<br>                            mFirstTouchTarget = next;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            predecessor.next = next;<br>                        &#125;<br>                        target.recycle();<br>                        target = next;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                predecessor = target;<br>                target = next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Update list of touch targets for pointer up or cancel, if needed.</span><br>        <span class="hljs-keyword">if</span> (canceled<br>                || actionMasked == MotionEvent.ACTION_UP) &#123;<br>            resetTouchState();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> handled;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>仍然有147行，我能怎么办，我也很绝望啊！实话说这个方法我断断续续看了几天才勉强捋清楚……好的， 废话不多说，我们来看看ViewGroup是如何分发事件的。</p><p>这个方法里的<code>handled</code>局部变量就是这个ViewGroup（或其子View）最终是否消费了这个事件。<code>actionMasked</code>只是将高3个字节复位（因为action是整型），直接看作是这个事件的action就好。</p><p>首先，如果这是一个<code>ACTION_DOWN</code>动作，也就是按下屏幕的一瞬间，我们需要把之前的状态重置，为这个新的手势做准备（手势就是按下、一系列的移动和抬起动作序列）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Handle an initial down.</span><br><span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;<br>    <span class="hljs-comment">// Throw away all previous state when starting a new touch gesture.</span><br>    <span class="hljs-comment">// The framework may have dropped the up or cancel event for the previous gesture</span><br>    <span class="hljs-comment">// due to an app switch, ANR, or some other state change.</span><br>    cancelAndClearTouchTargets(ev);<br>    resetTouchState();<br>&#125;<br></code></pre></td></tr></table></figure><p>从方法名就可以看出他们的作用是取消、清除原来的触摸目标，并重置触摸状态。这里先剧透一下，TouchTarget就是对能够接受触摸事件的子View的简单封装。</p><p>然后，由于我们是一个ViewGroup，所以我们需要判断要不要拦截这次事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Check for interception.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> intercepted;<br><span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN<br>        || mFirstTouchTarget != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">disallowIntercept</span> <span class="hljs-operator">=</span> (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (!disallowIntercept) &#123;<br>        intercepted = onInterceptTouchEvent(ev);<br>        ev.setAction(action); <span class="hljs-comment">// restore action in case it was changed</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        intercepted = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// There are no touch targets and this action is not an initial down</span><br>    <span class="hljs-comment">// so this view group continues to intercept touches.</span><br>    intercepted = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时我们看到了一个<code>mFirstTouchTarget</code>的属性，这个属性挺重要，但网上对这个属性的解释足够详细的实在太少。如果看完了整个<code>dispatchTouchEvent</code>方法，就会发现，ViewGroup会管理一群能够消费触摸事件的子View，ViewGroup把他们放在一个单向链表里，而这个<code>mFirstTouchTarget</code>就是这个链表的头。而为什么一个手势会被多个View同时消费我还没有深挖，从直觉来说，应该和多点触摸等有关。</p><p>从上面的代码片段可以看出，如果这是手势的开始，我们就会通过调用<code>onInterceptTouchEvent</code>，决定是否拦截。如果这个链表不为空，表示有子View想消费，所以也需要判断要不要拦截。只有在手势进行到中间又没有子View愿意背锅（消费事件）的情况下，才会拦截。</p><p>直接这么解释似乎很牵强，其实只要和拦截行为的表现联系起来就理解了。对于ViewGroup而言，事实上他会在一个手势的发生过程中不停地判断是否拦截，这就是为什么在子View会消费的情况下仍然要调用<code>onInterceptTouchEvent</code>。而另一方面，一旦这个ViewGroup已经决定啦，就由它自己来拦截这个事件，那么<strong>这之后<code>onInterceptTouchEvent</code>都不会再调用（废话，都决定拦截了就别反悔嘛），且之后会一直拦截下去</strong>，因为决定拦截之后，后面会给所有原来消费事件的子View发送取消事件（<code>ACTION_CANCEL</code>），并将他们从<code>mFirstTouchTarget</code>中去除，所以如果<code>mFirstTouchTarget</code>是空的，又不是初始的按下事件，那么就表示之前已经被拦截了，所以要继续拦截。</p><p>注意这里的<code>disallowIntercept</code>可以先不考虑。其实子View可以通过设置父View的这个属性来强制取消父View的拦截。</p><p>接下来是判断是否是取消事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Check for cancelation.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canceled</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(<span class="hljs-built_in">this</span>)<br>        || actionMasked == MotionEvent.ACTION_CANCEL;<br></code></pre></td></tr></table></figure><p>这里<code>resetCancelNextUpFlag</code>方法的目的我也不甚清楚，如果你知道，希望你能把答案留在评论区！</p><p><code>split</code>我认为和多点触摸有关，在多点触摸的时候会把事件分割，因此我们先忽略……</p><p>接下来，<code>newTouchTarget</code>是新的触摸对象，<code>alreadyDispatchedToNewTouchTarget</code>显然就是说明是否被分发给新的触摸对象了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Update list of touch targets for pointer down, if needed.</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">split</span> <span class="hljs-operator">=</span> (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class="hljs-number">0</span>;<br><span class="hljs-type">TouchTarget</span> <span class="hljs-variable">newTouchTarget</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">alreadyDispatchedToNewTouchTarget</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>如果没有被取消，也没有被拦截，那么就要尝试分发给子View了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;<br>    <span class="hljs-keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">actionIndex</span> <span class="hljs-operator">=</span> ev.getActionIndex(); <span class="hljs-comment">// always 0 for down</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">idBitsToAssign</span> <span class="hljs-operator">=</span> TouchTarget.ALL_POINTER_IDS;<br><br>        <span class="hljs-comment">// Clean up earlier touch targets for this pointer id in case they</span><br>        <span class="hljs-comment">// have become out of sync.</span><br>        removePointersFromTouchTargets(idBitsToAssign);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childrenCount</span> <span class="hljs-operator">=</span> mChildrenCount;<br>        <span class="hljs-keyword">if</span> (newTouchTarget == <span class="hljs-literal">null</span> &amp;&amp; childrenCount != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// Part A</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (newTouchTarget == <span class="hljs-literal">null</span> &amp;&amp; mFirstTouchTarget != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Part B</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的结构可以看出，事件分发主要是在手势开始，也就是按下事件发生的时候开始决定谁来消费的。此时<code>newTouchTarget</code>显然还是空的，因此如果此时子View的数量不为0，就要从中找出能够消费事件的子View了（Part A）。注意，我认为这里的Part B是用于多点触摸的：如果Part A之后<code>newTouchTarget</code>仍然为空，那么就是说当前没有子View愿意消费，但是<code>mFirstTouchTarget</code>可能包含原来已经有的手指的触摸手势对应的触摸对象，因此是有可能不为空的。但这些暂时不是这次的主要分析目标，所以我们不考虑Part B。</p><p>接下来看看Part A的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (newTouchTarget == <span class="hljs-literal">null</span> &amp;&amp; childrenCount != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> ev.getX(actionIndex);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> ev.getY(actionIndex);<br>    <span class="hljs-comment">// Find a child that can receive the event.</span><br>    <span class="hljs-comment">// Scan children from front to back.</span><br>    <span class="hljs-keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">customOrder</span> <span class="hljs-operator">=</span> preorderedList == <span class="hljs-literal">null</span><br>            &amp;&amp; isChildrenDrawingOrderEnabled();<br>    <span class="hljs-keyword">final</span> View[] children = mChildren;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> childrenCount - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (preorderedList != <span class="hljs-literal">null</span>) preorderedList.clear();<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单，得到触摸的坐标，并开始遍历所有的子View。对于每个被遍历到的子View：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">childIndex</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedIndex(<br>        childrenCount, i, customOrder);<br><span class="hljs-keyword">final</span> <span class="hljs-type">View</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> getAndVerifyPreorderedView(<br>        preorderedList, children, childIndex);<br><br><span class="hljs-keyword">if</span> (!canViewReceivePointerEvents(child)<br>        || !isTransformedTouchPointInView(x, y, child, <span class="hljs-literal">null</span>)) &#123;<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br><br>newTouchTarget = getTouchTarget(child);<br><span class="hljs-keyword">if</span> (newTouchTarget != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// Child is already receiving touch within its bounds.</span><br>    <span class="hljs-comment">// Give it the new pointer in addition to the ones it is handling.</span><br>    newTouchTarget.pointerIdBits |= idBitsToAssign;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br><br>resetCancelNextUpFlag(child);<br><span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="hljs-literal">false</span>, child, idBitsToAssign)) &#123;<br>    <span class="hljs-comment">// Child wants to receive touch within its bounds.</span><br>    newTouchTarget = addTouchTarget(child, idBitsToAssign);<br>    alreadyDispatchedToNewTouchTarget = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面可见，我们先得到当前遍历到的子View的对象和index序号。然后通过<code>canViewReceivePointerEvents</code>和 <code>isTransformedTouchPointInView</code>两个方法，判断这个子View能否接受这个事件。如果任何一个条件不满足，就会跳过这个子View。<code>getTouchTarget</code>方法是从<code>mFirstTouchTarget</code>触摸对象链表中找到这个View对应的触摸对象，显然是找不到的，因此会向后继续执行，调用<code>dispatchTransformedTouchEvent</code>。这个方法里面就进行了对子View调用<code>dispatchTouchEvent</code>这个操作，并从返回值判断是否被消费了（回顾前文，<code>dispatchTouchEvent</code>的返回值表示该View是否会消费这个事件）。如果消费了，那么我们通过<code>addTouchTarget</code>方法把这个View封装到一个TouchTarget里，添加到链表里，同时赋值给<code>newTouchTarget</code>，<code>alreadyDispatchedToNewTouchTarget</code>也被置为真。</p><p>分发给子View的代码结束了，看下面的代码，我们判断了<code>mFirstTouchTarget</code>是否为空。那么什么时候这个链表是空的呢？</p><ol><li>没有子 View 接锅的时候</li><li>手势中间，但之前已经被拦截下来的时候</li></ol><p>在这两种情况下，我们ViewGroup自己要去考虑消费这个事件了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Dispatch to touch targets.</span><br><span class="hljs-keyword">if</span> (mFirstTouchTarget == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// No touch targets so treat this as an ordinary view.</span><br>    handled = dispatchTransformedTouchEvent(ev, canceled, <span class="hljs-literal">null</span>,<br>            TouchTarget.ALL_POINTER_IDS);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上，注意虽然我们又一次调用了<code>dispatchTransformedTouchEvent</code>，但我们给View参数传递了<code>null</code>，我们后面会发现，这个方法不仅可以把事件分发给子View，还能分发给自己。</p><p>如果我们已经有子View消费了事件，理论上会执行上面片段里的<code>else</code>块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (mFirstTouchTarget == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Dispatch to touch targets, excluding the new touch target if we already</span><br>    <span class="hljs-comment">// dispatched to it.  Cancel touch targets if necessary.</span><br>    <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">predecessor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> mFirstTouchTarget;<br>    <span class="hljs-keyword">while</span> (target != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">TouchTarget</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> target.next;<br>        <span class="hljs-keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;<br>            handled = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelChild</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(target.child)<br>                    || intercepted;<br>            <span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,<br>                    target.child, target.pointerIdBits)) &#123;<br>                handled = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cancelChild) &#123;<br>                <span class="hljs-keyword">if</span> (predecessor == <span class="hljs-literal">null</span>) &#123;<br>                    mFirstTouchTarget = next;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    predecessor.next = next;<br>                &#125;<br>                target.recycle();<br>                target = next;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        predecessor = target;<br>        target = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初看之下，<code>else</code>块中开始遍历链表，此时链表里就只有一个新的子View，<code>alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget</code>也为真，一切都很和谐。</p><p>等等，我们是不是忽略了一个情况？我们前面说过，如果我们在手势中途拦截了手势，<code>mFirstTouchTarget</code>在哪里被清空呢？正是在这个<code>else</code>块里！由于在这个情况下，<code>newTouchTarget</code>必然为空，那么原来链表里的子View都会被删除：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelChild</span> <span class="hljs-operator">=</span> resetCancelNextUpFlag(target.child)<br>        || intercepted;<br><span class="hljs-keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,<br>        target.child, target.pointerIdBits)) &#123;<br>    handled = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (cancelChild) &#123;<br>    <span class="hljs-keyword">if</span> (predecessor == <span class="hljs-literal">null</span>) &#123;<br>        mFirstTouchTarget = next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        predecessor.next = next;<br>    &#125;<br>    target.recycle();<br>    target = next;<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上可见，如果<code>intercepted</code>为真，则<code>cancelChild</code>也为真，会通过<code>dispatchTransformedTouchEvent</code>把取消事件分发给子View，并把他们都从链表中删除。注意，从上面我们也可以看出，在首次拦截的时候，如果这个事件之前是被其他子View消费的，那么我们只分发取消事件给子View，子View的<code>onTouchEvent</code>仍然会被调用（事件类型为<code>ACTION_CANCEL</code>），而这个ViewGroup的<code>onTouchEvent</code>还不会被调用，需要等待下一次的<code>ACTION_MOVE</code>。</p><p>事实上，上面的<code>else</code>块还承载了分发后续事件给子View的任务：在后续的MOVE和UP事件中，由于<code>mFirstTouchTarget</code>不为空，会直接运行到<code>else</code>这个块，并由于没有<code>newTarget</code>，因此会通过上面片段的第3-4行分发这个后续事件给子View。</p><p>最后，如果是取消事件或抬起手指事件，我们重置状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Update list of touch targets for pointer up or cancel, if needed.</span><br><span class="hljs-keyword">if</span> (canceled<br>        || actionMasked == MotionEvent.ACTION_UP) &#123;<br>    resetTouchState();<br>&#125;<br></code></pre></td></tr></table></figure><p>那么，到此为止，ViewGroup的<code>dispatchTouchEvent</code>就看完了，真累啊……</p><p>对于<code>onInterceptTouchEvent</code>，源码如下，可以看作就是不拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onInterceptTouchEvent</span><span class="hljs-params">(MotionEvent ev)</span> &#123;<br>    <span class="hljs-keyword">if</span> (ev.isFromSource(InputDevice.SOURCE_MOUSE)<br>            &amp;&amp; ev.getAction() == MotionEvent.ACTION_DOWN<br>            &amp;&amp; ev.isButtonPressed(MotionEvent.BUTTON_PRIMARY)<br>            &amp;&amp; isOnScrollbarThumb(ev.getX(), ev.getY())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ViewGroup并没有重写<code>onTouchEvent</code>，我们如果看View的<code>onTouchEvent</code>，会发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouchEvent</span><span class="hljs-params">(MotionEvent event)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> event.getX();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> event.getY();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">viewFlags</span> <span class="hljs-operator">=</span> mViewFlags;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> event.getAction();<br><br>    <span class="hljs-keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;<br>        <span class="hljs-keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="hljs-number">0</span>) &#123;<br>            setPressed(<span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-comment">// A disabled view that is clickable still consumes the touch</span><br>        <span class="hljs-comment">// events, it just doesn&#x27;t respond to them.</span><br>        <span class="hljs-keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE<br>                || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)<br>                || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (mTouchDelegate != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||<br>            (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||<br>            (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;<br>        <span class="hljs-comment">// A lot of code...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>从上面的节选可以看出，如果这个View不可点击和长按（默认即是如此），那么<code>onTouchEvent</code>是返回<code>false</code>的。从源码中还可以发现，即使这个View被禁用（disabled）了，只要它是可点击的，它仍然会消费触摸事件，这个和我们的直觉是有点违背的，所以算是看源码的额外收获。很多坑也许都能从源码中找出答案！</p><p>到这里，我们就弄懂了ViewGroup的事件分发逻辑：</p><ul><li>手指按下的时候<ul><li>重置各种状态</li><li>不拦截：遍历子View，分发事件给能够接受这个事件的子View，并将消费这个事件的子View加入到链表，如果没有找到消费的子View，则分发事件给自己</li><li>拦截：分发事件给自己</li></ul></li><li>手指滑动或抬起的时候<ul><li>不拦截：<ul><li>有子View在消费该事件：继续分发给该子View</li><li>无子View消费：分发事件给自己</li></ul></li><li>刚好拦截：清除正在消费事件的子View（如果有）并分发取消事件</li><li>已经拦截：分发事件给自己</li></ul></li></ul><p>上面的“刚好拦截”指的是当前手势过程中第一次拦截，“已经拦截”表示后续的拦截。</p><p>到此为止，我们就基本了解了View树中为什么事件会这样传递，知其然亦知其所以然。但是，这个关键的<code>dispatchTouchEvent</code>中调用了很多其他方法，我会在下一篇中一一探索，包括它如何判断一个View有资格接受这个事件？子View的<code>dispatchTouchEvent</code>到底在哪里被调用？</p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>explore-event-dispatching-from-source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移植Java Web应用到Gradle构建系统</title>
    <link href="/2017/02/27/migrate-java-web-application-to-gradle-build-system/"/>
    <url>/2017/02/27/migrate-java-web-application-to-gradle-build-system/</url>
    
    <content type="html"><![CDATA[<p>最近我参与了一个Java Web Application项目，但由于历史遗留问题，这个项目并没有使用任何构建系统（哪怕是Ant），而是完全依赖IDE的配置，这给项目带来了很多限制，比如对于习惯使用其他IDE的开发者，比如我，就需要花费不少时间专门配置IDE。不仅如此，缺少构建系统使得整个开发流程也趋于僵化、不灵活，比如独立部署、打包、测试等流程都需要专门的人为执行而不能自动化。基于以上考虑，以及对Gradle的兴趣，我尝试将项目结构改为了Gradle构建系统的Java Web应用。</p><h2 id="Gradle准备"><a href="#Gradle准备" class="headerlink" title="Gradle准备"></a>Gradle准备</h2><p>Gradle是一种构建工具。在一个Gradle项目中，可以编写构建脚本<code>build.gradle</code>，在其中指定各个开发生命周期中涉及的任务，包括但不仅限于编译、打包成WAR、部署到容器和单元测试。</p><p>Gradle的运行需要Java环境，这里不再赘述，JDK环境的配置读者可以直接通过搜索引擎找到。</p><p>Gradle的运行方式有两种：Gradle和Gradle Wrapper，其中前者就是直接下载Gradle到本地机器并配置好环境变量，方法也很简单，前往Gradle的官方下载地址<a href="http://services.gradle.org/distributions">http://services.gradle.org/distributions</a>下载即可。目前（2017&#x2F;02&#x2F;27）最新的版本是3.4，其中<code>gradle-3.4-bin.zip</code>是可执行包，一般下载这个就可以了，后缀src是源码，后缀all的则是最全的压缩包。</p><p>下载解压到自己选择的目录之后，将其中的<code>bin</code>目录放入环境变量中即可，比如我的<code>bin</code>路径为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/g</span>radle<span class="hljs-regexp">/gradle-3.4/</span>bin<br></code></pre></td></tr></table></figure><p>验证安装成功：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">perqin@PQNACRUBT:~$ gradle -v<br><br><span class="hljs-code">------------------------------------------------------------</span><br><span class="hljs-code">Gradle 3.4</span><br><span class="hljs-code">------------------------------------------------------------</span><br><br>Build time:   2017-02-20 14:49:26 UTC<br>Revision:     73f32d68824582945f5ac1810600e8d87794c3d4<br><br>Groovy:       2.4.7<br>Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015<br>JVM:          1.8.0_121 (Oracle Corporation 25.121-b13)<br>OS:           Linux 4.4.0-64-generic amd64<br></code></pre></td></tr></table></figure><p>然而，有时候我们的项目所需要的可能是其他指定版本的Gradle，甚至有时候让所有开发者都事先安装好指定的Gradle版本十分困难，因此Gradle提供了另一种叫做Gradle Wrapper的小脚本。把<code>gradle</code>替换成项目根目录里的<code>gradlew</code>（Windows平台下对应的是<code>gradlew.bat</code>），该脚本会判断项目需要的Gradle是否已经安装到了本机，如果没有则会自动从官方网站下载对应版本到本地的缓存目录，并将命令传递给缓存的对应版本的Gradle。</p><p>获取Wrapper的方式这里不讲，因为一般在Gradle项目中都会有，也可以通过<code>gradle init -type &lt;type&gt;</code>初始化Gradle项目环境的时候生成。</p><h2 id="调整目录结构"><a href="#调整目录结构" class="headerlink" title="调整目录结构"></a>调整目录结构</h2><p>因为时间紧迫，我也是现学现用，因此以下的内容也许不是业界最佳实践，但是我认为比原来更好的方案。</p><p>在迁移到Gradle之前，项目的目录结构如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lasso">project<br>+ doc<br>+ resources<br>+ src                                   <span class="hljs-comment">// 源代码</span><br>  + <span class="hljs-literal">cn</span>                                  <span class="hljs-comment">// cn包，其中包含.java文件，亦包含一些xml文件</span><br>  + com<br>  + <span class="hljs-params">...</span><br>  + res                                 <span class="hljs-comment">// 部分非.java文件</span><br>    application<span class="hljs-params">-context.xml</span>             <span class="hljs-comment">// 相关上下文xml文件</span><br>    applicationContext<span class="hljs-params">-webservice.xml</span><br>    applicatoinContext-<span class="hljs-params">...</span>.<span class="hljs-built_in">xml</span><br>    jdbc.properties                     <span class="hljs-comment">// 相关java配置文件</span><br>    <span class="hljs-params">...</span>.properties<br>    <span class="hljs-params">...</span>.<span class="hljs-built_in">xml</span>                             <span class="hljs-comment">// 其他相关xml文件</span><br>+ src_jar<br>+ test                                  <span class="hljs-comment">// 测试类代码</span><br>  + <span class="hljs-literal">cn</span><br>  + com<br>  + <span class="hljs-params">...</span><br>+ WebContent                            <span class="hljs-comment">// 网站内容根目录</span><br>  .gitignore<br></code></pre></td></tr></table></figure><p>上面的目录虽然比较规整但并不算十分规范，比如Mybatis里的很多mapper的xml文件就被放到了对应的java文件的同一个目录。</p><p>首先进入项目根目录，将Gradle环境集成好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> project</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gradle init -<span class="hljs-built_in">type</span> java-application</span><br></code></pre></td></tr></table></figure><p>这时，你会发现目录中多了以下内容：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">+ gradle<br>  + <span class="hljs-keyword">wrapper</span><br>      gradle-<span class="hljs-keyword">wrapper</span>.jar<br>      gradle-<span class="hljs-keyword">wrapper</span>.properties<br>  build.gradle<br>  gradlew<br>  gradlew.bat<br>  settings.gradle<br></code></pre></td></tr></table></figure><p>其中gradle目录里就是Gradle Wrapper了，而build.gradle是构建脚本，settings.gradle包含构建设置。除此以外，构建过程中还会生成<code>.gradle</code>目录和<code>build</code>目录，需要把它们加入到<code>.gitignore</code>中。</p><p>接下来，我对项目的目录进行了调整，新的结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus">project<br>+ <span class="hljs-selector-class">.gradle</span>                           <span class="hljs-comment">// 使用Gradle产生的临时目录</span><br>+ build                             <span class="hljs-comment">// 构建过程中生成的临时目录</span><br>+ doc<br>+ gradle<br>+ libs                              <span class="hljs-comment">// jar包</span><br>+ resources<br>+ <span class="hljs-attribute">src</span><br>  + <span class="hljs-selector-tag">main</span><br>    + java                          <span class="hljs-comment">// 仅包含java文件，原来的包结构不变</span><br>      + cn<br>      + com<br>      + ...<br>    + resources                     <span class="hljs-comment">// 所有在打包之后需要和java文件放在一起，但非.java的文件</span><br>      + META-INF<br>          MANIFEST<span class="hljs-selector-class">.MF</span><br>      + cn<br>        + persistence<br>          + mapper<br>              ..<span class="hljs-selector-class">.Mapper</span><span class="hljs-selector-class">.xml</span>         <span class="hljs-comment">// 即原来在cn.persistence.mapper包里的xml文件</span><br>        application-context<span class="hljs-selector-class">.xml</span>     <span class="hljs-comment">// 即原来的application-context.xml</span><br>        ...<span class="hljs-selector-class">.xml</span><br>    + webapp                        <span class="hljs-comment">// 即原来的WebContent</span><br>  + test                            <span class="hljs-comment">// 测试目录</span><br>+ src_jar<br>  <span class="hljs-selector-class">.gitignore</span><br>  build<span class="hljs-selector-class">.gradle</span>                      <span class="hljs-comment">// 构建脚本</span><br>  gradlew<br>  gradlew<span class="hljs-selector-class">.bat</span><br>  settings<span class="hljs-selector-class">.gradle</span>                   <span class="hljs-comment">// 配置脚本</span><br></code></pre></td></tr></table></figure><p>需要注意的是，所有和java文件放在一起的非java文件都需要根据原有目录结构放到<code>src/main/resources/</code>中，否则无法被Gradle正确打包。</p><p>上面的目录结构将java文件和其他文件分开，并且把主代码和测试代码分了源码集（source set），这对大部分的构建工具和IDE都更加友好。后面读者会看到Gradle构建大大减少了项目对IDE的依赖。</p><h2 id="配置构建脚本"><a href="#配置构建脚本" class="headerlink" title="配置构建脚本"></a>配置构建脚本</h2><p>在<code>build.gradle</code>中，给出了整个项目的构建任务。经过修改的最终版本如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">buildscript</span> &#123;<br>    <span class="hljs-keyword">repositories</span> &#123;<br>        jcenter()<br>    &#125;<br><br>    <span class="hljs-keyword">dependencies</span> &#123;<br>        <span class="hljs-comment">// Add Gradle Cargo plugin for deployment</span><br>    <span class="hljs-keyword">classpath</span> <span class="hljs-string">&#x27;com.bmuschko:gradle-cargo-plugin:2.2.3&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// This is a WAR project!</span><br>apply plugin: <span class="hljs-string">&#x27;war&#x27;</span><br><br>apply plugin: <span class="hljs-string">&#x27;com.bmuschko.cargo&#x27;</span><br><br><span class="hljs-keyword">sourceCompatibility</span> = <span class="hljs-number">1.7</span><br><br><span class="hljs-comment">// In this section you declare where to find the dependencies of your project</span><br><span class="hljs-keyword">repositories</span> &#123;<br>    <span class="hljs-comment">// We use Mavel Central instead of jcenter</span><br>    mavenCentral()<br>&#125;<br><br>tasks.withType(JavaCompile) &#123;<br><span class="hljs-keyword">options</span>.warnings = <span class="hljs-keyword">false</span><br>&#125;<br><br><span class="hljs-keyword">dependencies</span> &#123;<br>    <span class="hljs-comment">// Add jar files in libs/ into dependencies</span><br><span class="hljs-keyword">compile</span> <span class="hljs-keyword">fileTree</span>(dir: <span class="hljs-string">&#x27;libs&#x27;</span>, <span class="hljs-keyword">include</span>: [<span class="hljs-string">&#x27;*.jar&#x27;</span>])<br><span class="hljs-comment">// List your dependencies here</span><br><span class="hljs-comment">// compile &#x27;group-id:artifact-id:version&#x27;</span><br><span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;javax.activation:activation:1.1&#x27;</span><br><span class="hljs-comment">// ......</span><br><span class="hljs-comment">// Use JUnit test framework</span><br>    testCompile <span class="hljs-string">&#x27;junit:junit:4.11&#x27;</span><br>&#125;<br><br>cargo &#123;<br>    <span class="hljs-comment">// Deploy to Tomcat 7</span><br>    containerId = <span class="hljs-string">&#x27;tomcat7x&#x27;</span><br><br>    deployable &#123;<br>        context = <span class="hljs-string">&#x27;/&#x27;</span><br>    &#125;<br><br>    local &#123;<br>        <span class="hljs-comment">// JVM args to speed up container performance!</span><br>    jvmArgs = <span class="hljs-string">&#x27;-XX:PermSize=256M -XX:MaxPermSize=512m -Xms256m -Xmx1024m&#x27;</span><br>    <span class="hljs-comment">// Set environment variable TOMCAT_HOME to the home of your local tomcat</span><br>        homeDir = <span class="hljs-keyword">file</span>(System.env.TOMCAT_HOME)<br>        <span class="hljs-comment">// Log and output files</span><br>        outputFile = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/output.txt&#x27;</span>)<br>        logFile = <span class="hljs-keyword">file</span>(<span class="hljs-string">&#x27;build/log.txt&#x27;</span>)<br>        logLevel = <span class="hljs-string">&#x27;high&#x27;</span><br><br>        containerProperties &#123;<br>            property <span class="hljs-string">&#x27;cargo.tomcat.ajp.port&#x27;</span>, <span class="hljs-number">9099</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Ensure that the WAR is up-to-date before deployment</span><br>cargoRunLocal.dependsOn assemble<br></code></pre></td></tr></table></figure><p>可以看到，Gradle的依赖管理比添加jar包更加轻松，只需要一行代码，就可以自动从仓库下载对应版本的依赖，这很方便管理项目的依赖，也不需要把一大堆jar包也加入VCS里了。当然，Maven Central中没有的jar包也可以直接放入<code>libs/</code>目录。</p><p>现在，只要运行：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>gradle assemble<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./gradlew assemble</span><br></code></pre></td></tr></table></figure><p>，就会自动下载依赖、编译、打包了。接下来，我们通过cargo插件，增加部署到本地Tomcat的任务。参照上面的脚本，在cargo域里面可以配置很多东西，而这些东西在其他开发者刚用IDE打开项目之后，都不需要对着IDE专门配置一遍！</p><p>不过必须注意的是，<strong>必须配置环境变量TOMCAT_HOME，指向本地Tomcat的安装路径。</strong></p><p>接下来，运行任务<code>cargoRunLocal</code>就可以启动容器：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">perqin<span class="hljs-variable">@PQNACRUBT</span><span class="hljs-symbol">:~/Workspace/project</span><span class="hljs-variable">$ </span>./gradlew cargoRunLocal<br><span class="hljs-title class_">Starting</span> a <span class="hljs-title class_">Gradle</span> <span class="hljs-title class_">Daemon</span> (subsequent builds will be faster)<br><span class="hljs-symbol">:compileJava</span> <span class="hljs-title class_">UP</span>-<span class="hljs-title class_">TO</span>-<span class="hljs-title class_">DATE</span><br><span class="hljs-symbol">:processResources</span> <span class="hljs-title class_">UP</span>-<span class="hljs-title class_">TO</span>-<span class="hljs-title class_">DATE</span><br><span class="hljs-symbol">:classes</span> <span class="hljs-title class_">UP</span>-<span class="hljs-title class_">TO</span>-<span class="hljs-title class_">DATE</span><br><span class="hljs-symbol">:war</span> <span class="hljs-title class_">UP</span>-<span class="hljs-title class_">TO</span>-<span class="hljs-title class_">DATE</span><br><span class="hljs-symbol">:assemble</span> <span class="hljs-title class_">UP</span>-<span class="hljs-title class_">TO</span>-<span class="hljs-title class_">DATE</span><br><span class="hljs-symbol">:cargoRunLocal</span><br><span class="hljs-title class_">Press</span> <span class="hljs-title class_">Ctrl</span>-C to stop the container...<br>&gt; <span class="hljs-title class_">Building</span> <span class="hljs-number">83</span>% &gt; <span class="hljs-symbol">:cargoRunLocal</span><br></code></pre></td></tr></table></figure><p>可以看到日志也被输出到目录了：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">perqin<span class="hljs-variable">@PQNACRUBT</span><span class="hljs-symbol">:~/Workspace/project/build</span><span class="hljs-variable">$ </span>ls -l | grep txt<br>-rw-rw-r-- <span class="hljs-number">1</span> perqin perqin     <span class="hljs-number">6509</span> <span class="hljs-number">2</span>月  <span class="hljs-number">27</span> <span class="hljs-number">22</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span> log.txt<br>-rw-rw-r-- <span class="hljs-number">1</span> perqin perqin <span class="hljs-number">34139380</span> <span class="hljs-number">2</span>月  <span class="hljs-number">27</span> <span class="hljs-number">22</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span> output.txt<br></code></pre></td></tr></table></figure><p>至此，一个项目的Gradle构建就配置好了，即使是命令行，也只需要一两条语句就能完成构建到部署。在IDE中，也能通过简单的双击完成Gradle任务，比如构建、测试等。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTPS快速部署上车指南</title>
    <link href="/2017/02/15/https-quick-deployment-guide/"/>
    <url>/2017/02/15/https-quick-deployment-guide/</url>
    
    <content type="html"><![CDATA[<p>2017年的今天，全站HTTPS几乎已经成为一个网站的基本要求之一，最新版本的Chrome和Firefox都已经开始对HTTP站点显示“不安全”提示。由于HTTP使用明文传输，不仅会被嗅探报文，甚至会遭遇中间人攻击，不需要很多经验的攻击者就可以截取你的权限信息并肆意更改你的账户。更重要的是，随着HTTPS被大力推广，越来越多免费证书可供选择，HTTPS带来的性能负担也逐渐被削弱以及从考虑重心中排除。本文以部署Debian Jessie上的Node.js应用为例，提供快速HTTPS部署方案，我们采用的是<a href="https://letsencrypt.org/">Let’s Encrypt</a>提供的免费证书，一次获取可以使用3个月。</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>我的服务器使用的发行版是Debian Jessie，服务器程序是Nginx。一般而言，不同的发行版只是安装certbot的方法不一样，其他应该是一样的。</p><h2 id="Nginx的初始配置"><a href="#Nginx的初始配置" class="headerlink" title="Nginx的初始配置"></a>Nginx的初始配置</h2><p>在没有启用HTTPS的情况下，相信读者对下面的Nginx配置非常熟悉，它可以为域名myapp.perqin.com设置一个监听3000端口的Node.js应用：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span>myapp.perqin.com;<br><br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_set_header</span>X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span>X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><span class="hljs-attribute">proxy_set_header</span>X-NginX-Proxy <span class="hljs-literal">true</span>;<br><span class="hljs-attribute">proxy_pass</span>http://localhost:3000/;<br><span class="hljs-attribute">proxy_cache_bypass</span><span class="hljs-variable">$http_upgrade</span>;<br><span class="hljs-attribute">proxy_redirect</span><span class="hljs-literal">off</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>除此以外，Nginx还有一个用于静态站点的默认配置，我们也会用到：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  localhost;<br>    <br>    location / &#123;<br>        root   <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html;<br>        index  index.html index.htm;<br>    &#125;<br><br>    <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    location = /<span class="hljs-number">50</span>x.html &#123;<br>        root   <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上就是部署HTTPS之前的服务器状态，假设Nginx和Node.js应用都已经可以正常使用，现在我们准备刷卡上车了！</p><h2 id="配置静态站点"><a href="#配置静态站点" class="headerlink" title="配置静态站点"></a>配置静态站点</h2><p>简单科普一下（如有错误请指出）：</p><blockquote><p> HTTPS使用了TLS，它涉及了对称和非对称加密，对称的主密钥用于加密HTTP请求，非对称密钥用于加解密主密钥。网站的证书由CA签发，用户（浏览器等）通过检验证书是否的确由CA签发，就可以确定其中包含的公钥是否属于该域名，并用它加密。私钥只有域名所属的服务器拥有，所以可以保证该流量只能被真实的目的服务器获取并解读。浏览器等一般都内置了各大CA的证书，因此可以检验服务器提供的证书是否由相应的CA签发。</p><p> 要获得某个域名的证书，就需要向CA证明自己是该域名的拥有者，有专门的协议可以进行验证，大致的原理是域名拥有者将域名解析到自己的服务器，然后在该服务器部署一个静态网站，使得制定的目录及其内容可通过HTTP协议获取并被程序修改。简单地想，验证程序E向CA的服务器请求给myapp.perqin.com发一个证书，CA要求myapp.perqin.com在<code>/.well-known/abc.txt</code>中写上<code>def</code>。E完成该任务并告知CA，然后CA会发送请求<code>http://myapp.perqin.com/.well-knwon/abc.txt</code>，并判断里面的内容是否是<code>def</code>即可。</p><p> <strong>注：以上内容都是我猜的。</strong></p></blockquote><p>因此，我们需要修改myapp.perqin.com的Nginx配置，使得：</p><ul><li>对于<code>http://myapp.perqin.com/.well-knwon/*</code>的请求，一律放行到静态目录，如<code>/usr/share/nginx/html</code></li><li>对于其他的HTTP请求，一律返回302跳转，跳转到对应的HTTPS网址</li><li>对于HTTPS请求，转发到Node.js应用</li></ul><p>于是，我们得到一下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># HTTP - only for obtaining cert</span><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span>myapp.perqin.com;<br><br><span class="hljs-section">location</span> /.well-known &#123;<br><span class="hljs-attribute">root</span>/usr/share/nginx/html;<br><span class="hljs-attribute">allow</span>all;<br>&#125;<br><br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">return</span><span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment"># HTTPS - serve nodejs app</span><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span><span class="hljs-number">443</span> ssl;<br><span class="hljs-attribute">server_name</span>myapp.perqin.com;<br><br><span class="hljs-comment">#ssl_certificate/etc/letsencrypt/live/myapp.perqin.com/fullchain.pem;</span><br><span class="hljs-comment">#ssl_certificate_key/etc/letsencrypt/live/myapp.perqin.com/privkey.pem;</span><br><br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_set_header</span>X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span>X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><span class="hljs-attribute">proxy_set_header</span>X-NginX-Proxy <span class="hljs-literal">true</span>;<br><span class="hljs-attribute">proxy_pass</span>http://localhost:3000/;<br><span class="hljs-attribute">proxy_ssl_session_reuse</span><span class="hljs-literal">off</span>;<br><span class="hljs-attribute">proxy_set_header</span>Host <span class="hljs-variable">$http_host</span>;<br><span class="hljs-attribute">proxy_cache_bypass</span><span class="hljs-variable">$http_upgrade</span>;<br><span class="hljs-attribute">proxy_redirect</span><span class="hljs-literal">off</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>修改相关域名、端口号为你的域名、Node.js监听端口号</li><li>L21-L22需要暂时注释掉，因为此时你的证书还没有生成，不注释将无法使用</li></ul><p>接下来重启Nginx：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo systemctl restart nginx.service<br></code></pre></td></tr></table></figure><h2 id="配置certbot"><a href="#配置certbot" class="headerlink" title="配置certbot"></a>配置certbot</h2><p>certbot是Let’s Encrypt推荐的工具，他会自动完成证书验证、获取、存储和定时续签任务。</p><p>英文好的同学可以直接转乘<a href="https://certbot.eff.org/all-instructions/#debian-8-jessie-none-of-the-above">Certbot - All Instructions</a>阅读配置教程。</p><p>首先，我们需要为Debian添加backports仓库源，编辑<code>/etc/apt/source.list.d/jessie-backports.list</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//</span>ftp.debian.org/debian jessie-backports main<br></code></pre></td></tr></table></figure><p>保存之后运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> update<br>$ sudo apt-<span class="hljs-built_in">get</span> install certbot -t jessie-backports<br></code></pre></td></tr></table></figure><p>安装certbot之后，我们可以使用它的webroot插件获取证书：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo certbot certonly --webroot -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html -d myapp.perqin.com<br></code></pre></td></tr></table></figure><p>上述命令中<code>certonly</code>表示只获取证书，<code>--webroot</code>制定插件，<code>-w</code>后面是你的Nginx静态目录，<code>-d</code>后面就是域名了。注意这里<code>myapp.perqin.com</code>和<code>perqin.com</code>是不一样的，如果需要两个都上车，则需要连续两次<code>-d subdomain.domain.tld</code>。</p><p>另外，由于证书、日志都分别存储在了<code>/etc</code>和<code>/var/log</code>中，因此需要root权限。</p><p>等待片刻，就能看到提示消息，此时你的证书已经躺在他给出的位置（一般也是我前面Nginx配置文件中的位置），而且自动配置了crontab计划任务，每天两次判断是否有即将过期的证书并续签。</p><p>初次配置可能会要求输入邮箱，大可放心输入，它用于你的证书要GG的时候给你发提醒。</p><p>最后，再次编辑Nginx的配置文件，去除那两行的注释并保存，然后重启Nginx服务。</p><p>现在，在浏览器输入myapp.perqin.com，你会发现你被重定向到了<a href="https://myapp.perqin.com!/">https://myapp.perqin.com！</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，整个过程是非常简单的，Nginx的配置对每个网站都是大同小异的，可以直接复制粘贴修改前述模板。certbot的安装也很简单，配置参数也很自然。当然，当初第一次折腾的时候我也研究了半天才得出了前面的Nginx模板，保证既能通过HTTP请求<code>/.well-knwon/</code>，又能屏蔽其他的全部HTTP请求。看完本文，你应该也能快速发车，给你的网站系上HTTPS安全带了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>https</tag>
      
      <tag>debian</tag>
      
      <tag>certbot</tag>
      
      <tag>letsencrypt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tumoji开发记录 (1)</title>
    <link href="/2017/01/07/tumoji-develop-blogpost-1/"/>
    <url>/2017/01/07/tumoji-develop-blogpost-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 修改记录</p><ul><li>17&#x2F;01&#x2F;08：更正了RxJava的维护者。</li></ul></blockquote><p>这篇博客算是一个多月的Tumoji开发的总结报告（当然也的确被小修改之后作为了大作业的个人总结，毕竟我懒）。截止这篇博客撰写的时候，Tumoji仅仅是填上了课堂展示时挖的坑，虽然的确可以使用了，但是距离能够正式发布还有很多坑没有填上。</p><p>由于开发过程中对遇到的问题没有及时记录，所以本文是想到什么写什么……</p><p>本项目的客户端和服务器端源码托管在GitHub：</p><ul><li>客户端：<a href="https://github.com/zhengqi-big-god-take-me-fly/Tumoji-Android">zhengqi-big-god-take-me-fly&#x2F;Tumoji-Android: Android client for Tumoji.</a></li><li>服务器：<a href="https://github.com/zhengqi-big-god-take-me-fly/Tumoji-Server">zhengqi-big-god-take-me-fly&#x2F;Tumoji-Server: Server side for Tumoji.</a></li></ul><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>Tumoji是我这学期的Android开发课程的大作业，由我们这个开发组4个人，经过接近两个月的时间，共同完成。最开始的时候，我们本来想设计一个匿名聊天的应用，不过后来我对隐私性有所顾虑所以放弃了。后来突然想起来之前曾经用过一个叫<em>斗图神器</em>的app，因此萌生了这个想法。当然，发现<em>斗图神器</em>的时间已不可考，所以整个开发过程都是围绕我自己所确定的需求，应该不会有抄袭这回事吧，哈哈。</p><p>总之呢，Tumoji的定位是一款表情包共享应用，大家可以从上面下载表情包，也可以上传自己的表情包。</p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>说起来我也算是Android的老油条了，最开始接触Android开发应该是在高考毕业的暑假，不过当时对Android的开发毫无了解，所以是下载了几个G的视频，然后没日没夜地看，艰难地敲出了Hello World。我想大部分编程初学者都有过这种感觉，照着教程写出了Hello World，虽然成功运行，但是整个代码里只有<code>Hello World</code>是你知道用来干嘛的，其他部分就不知道目的了。再后来，由于没什么定力，一直没有继续认真学，导致直到现在，Android的开发水平还是渣渣……</p><p>卖完情怀，开始说MVP。很久以前无意之间了解到了MVP，但是由于自己水平有限，一直看不懂网上的MVP教程。直到这学期，无意间看到一篇博客，突然看懂了一些，然后又去看了一下Google的MVP示范（<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/">googlesamples&#x2F;android-architecture at todo-mvp</a>），然后直接在某一周的Android开发每周作业上用上了MVP。很庆幸在每周的作业中有几次MVP的尝试，终于慢慢了解了MVP的基本框架，再经过创新赛的时候的运用，终于熟悉起来了，于是在这次项目的开发中，我作为组长，一开始就确立了MVP的开发模式，到现在看来，这个模式在多人开发中绝对大有裨益。</p><p>在MVP之前，我们的代码往往全部堆积在Activity类中。即使打算抽离出逻辑，往往也仅仅是创建一些操作数据的类，但是UI的交互几乎全部都写在Activity中，再加上Activity本身的生命周期，这会导致Activity变成万能对象（God Object），想想在几百行代码里面找bug的感觉吧。在涉及多人写作开发的时候，问题就更加严重了。多人开发我所知道的模式大概是两种：分模块开发和分层开发，前者类似与我负责登录注册、你负责下载上传这样，而后者类似于我负责UI交互，你负责数据库存取这样。显然，在全部代码都堆积在Activity中的时候，是难以通过后面这种方式开发的，因为负责UI、数据、交互逻辑等部分的代码都混杂在一个文件里，多人同时修改的话冲突很严重。而我认为后面的开发方式是更加合理的，因为每个人的习惯、风格不同，如果按照模块开发的话，很容易出现好几个人分别各自造轮子的情况，而相对来说，每一层之间的耦合度都是比较低的，所以可以分别按照各自的习惯开发。</p><p>接下来的内容是我对MVP模式的理解了。在MVP模式中，V代表视图，M是模型，P是呈现者，这就把应用进行了分层。M一般指代的是数据层，包括数据库、文件读写、网络访问等等，他们往往是多个界面共享的（比如主界面和个人资料界面都会需要展示用户的信息）。V一般指的是一个视图单位，也就是指一个能够提供模块化的UI交互的界面，比如一个Activity、一个Fragment甚至一个Dialog。P即Presenter，我一开始的时候并不明白为什么要叫“Presenter”，后来终于明白了：一个View往往对应一个Presenter，而Presenter的作用就是控制View的变化。我们可以类比为PPT演讲，View就是PPT，而演讲者就是Presenter，Model当然就是计算机里的PPT数据啦，这样一来，就很容易理解：Presenter从Model获取数据，然后根据获取到的数据决定如何更改View的内容。我简单地画了一幅画：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                User<br>                                |<span class="hljs-string"> ^</span><br><span class="hljs-string">                                v </span>|<br>+-------------------+  +-------------------+  +-------------------+<br>|<span class="hljs-string">     Login View    </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     Posts View    </span>|<span class="hljs-string">  </span>|<span class="hljs-string"> Post Content View </span>|<br>+-------------------+  +-------------------+  +-------------------+<br>       a |<span class="hljs-string"> ^                    </span>|<span class="hljs-string"> ^                    </span>|<span class="hljs-string"> ^</span><br><span class="hljs-string">         v </span>|<span class="hljs-string"> d                  v </span>|<span class="hljs-string">                    v </span>|<br>+-------------------+  +-------------------+  +-------------------+<br>|<span class="hljs-string">       Login       </span>|<span class="hljs-string">  </span>|<span class="hljs-string">       Post        </span>|<span class="hljs-string">  </span>|<span class="hljs-string">    Post Content   </span>|<br>|<span class="hljs-string">     Presenter     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     Presenter     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">     Presenter     </span>|<br>+-------------------+  +-------------------+  +-------------------+<br>       b |<span class="hljs-string"> ^                    </span>|<span class="hljs-string"> ^                    </span>|<span class="hljs-string"> ^</span><br><span class="hljs-string">         v </span>|<span class="hljs-string"> c                  v </span>|<span class="hljs-string">                    v </span>|<br>+-----------------------------------------------------------------+<br>|<span class="hljs-string">      SQLite                  File                    API        </span>|<br>|<span class="hljs-string">     Database               Storage                 Service      </span>|<br>+-----------------------------------------------------------------+<br><br>a. Dispatch user&#x27;s input<br>b. Get data from Model layer<br>c. Send data to Presenter layer<br>d. Update view content<br></code></pre></td></tr></table></figure><p>从上图可以看出，用户的每一个操作都会被View传递给Presenter，Presenter从Model层获取对应的数据，并借此转交数据给View，View再将数据更新到UI上。</p><p>我们可以发现MVP的两个特点：数据层是共享的、Presenter将Model和View完全隔离。数据层的共享是理所当然的，因为从本质上来说，一个app只是一堆数据的部分的呈现而已，而这些数据本身是自洽的，即使没有View和Presenter，Model里的数据和数据间关系都是有意义的。而Presenter将Model和View完全隔离带来的好处就是保证数据的操作都来自于Presenter，View只负责分发动作和接受新内容。</p><p>在使用MVP的过程中，我还发现，Presenter和Model承载了不同种类的逻辑。何为不同种类的逻辑？举个例子来说，当我们创建一个Post的时候，下次获取PostCount时就应该比原来多1，这是数据层的逻辑，他们在Model中实现，这是为了保证不论外部（Presenter）发来怎样的调用，我都能保证我的数据在逻辑上是自洽的，不会出现诸如Post的作者id不存在、PostCount和真实Post数量不一致等问题；另一类逻辑则是UI上的逻辑，比如点击按钮A之后，如果没有登录就打开登录界面，否则打开编辑界面，这部分逻辑在Presenter中实现。</p><h3 id="如何搭建MVP框架"><a href="#如何搭建MVP框架" class="headerlink" title="如何搭建MVP框架"></a>如何搭建MVP框架</h3><p>当然，如果我不会MVP，我看到这里还是不知道MVP怎么写，因为前面说的都是MVP这个模式是怎么把一个app肢解的，但是具体要怎么写呢？按照Google的例子，我这样设计了我们的项目工程的包组织：</p><ul><li><code>com.tumoji.tumoji</code><ul><li><code>account</code>: 帐号模块，包括个人资料界面、登录注册界面<ul><li><code>activity</code>: Activity类</li><li><code>adapter</code>: 各种Adapter</li><li><code>contract</code>: MVP中定义接口的契约类</li><li><code>fragment</code>: 各种Fragment</li><li><code>presenter</code>: 各种Presenter的实现</li><li><code>view</code>: 各种View的实现</li></ul></li><li><code>common</code>: 通用的类、模块</li><li><code>data</code>: 数据层的表层实现，供Presenter使用，里面的每个子模块结构和<code>user</code>模块都是类似的<ul><li><code>auth</code>: 登录、注册、token存取</li><li><code>meme</code>: 表情</li><li><code>settings</code>: 设置项存取</li><li><code>tag</code>: 标签</li><li><code>user</code>: 用户<ul><li><code>model</code>: 存储各种数据对象的模型<ul><li><code>UserModel</code></li></ul></li><li><code>repository</code>: 用于user数据操作的单例类<ul><li><code>IUserRepository</code>: 暴露的接口</li><li><code>MockUserRepository</code>: 用来进行Presenter测试的<code>IUserRepository</code>实现</li><li><code>UserRepository</code>: 实现user数据操作的<code>IUserRepository</code>实现</li></ul></li><li><code>store</code></li></ul></li></ul></li><li><code>memes</code>: 表情模块，如表情列表、表情详细信息等，内部的结构和前面的<code>account</code>是类似的</li><li><code>network</code>: 网络模块，数据层中网络部分的定义和实现</li><li><code>storage</code>: 本地存储模块，数据层中SQLite数据库、SharedPreferences等的实现</li><li><code>utils</code>: 工具类</li><li><code>TumojiApp.java</code>: Application类</li></ul></li></ul><p>接下来我说说上面的目录结构是如何一步一步搭建起来的。</p><p>首先，对于某个模块里的某个界面，比如account模块的个人资料界面，我们需要分析：</p><ul><li>我们会提供给用户哪些操作——Presenter的接口</li><li>每个操作会在UI上产生哪些变化——View的接口</li></ul><p>有趣的是，用户的操作却是Presenter的接口，而操作的结果却是View的接口。事实上，由于Presenter和View成对出现，每个Presenter会持有自己的View的引用，每个View也持有自己的Presenter的引用。于是，用户的操作会被View获知，然后根据操作调用Presenter的对应方法；而Presenter得到数据之后，则需要根据数据来决定View如何更新，即调用View的哪个方法。</p><p>多说无益，我们以个人资料为例：</p><ul><li>用户的操作<ul><li>点击性别切换按钮（意图更改自己的性别……）</li></ul></li><li>UI的变化<ul><li>性别一栏切换至另一性别</li><li>提示切换失败（比如说没有网络连接导致）</li></ul></li></ul><p>上面的分析是自然而然的，一个操作可能导致两个结果，于是我们可以这样设计一个契约类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProfileContract</span> &#123;<br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Presenter</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeGender</span><span class="hljs-params">(bool isMale)</span>;<br>  &#125;<br>  <br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">View</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshGender</span><span class="hljs-params">(bool isMale)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNetworkError</span><span class="hljs-params">()</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>changeGender</code>的实现中，我们调用数据层的相关方法，向服务器发送请求更改个人性别资料，如果成功了，就调用<code>refreshGender</code>方法，否则调用<code>showNetworkError</code>。而对于View的实现而言，他只需要在<code>refreshGender</code>中设置某个RadioGroup的被选中项，在<code>showNetworkError</code>的实现中弹出一个Toast即可，而不需要考虑什么时候会被调用。</p><p>定义了契约类之后，我们就可以开始实现了。实现View的一般是Fragment或Activity。一般而言，用Fragment实现是官方推荐的方法，因为我前面说过，MVP中View代表的是一个视图单位，而一个Activity可能有多个视图单位，比如在平板上，可能左栏是一个列表，右栏是详情页。另一个好处是Activity可以成为一个总的管理者，负责Presenter和View的实例化（嗯，这回真的成为God了）。</p><p>而Presenter的实现，直接创建一个类实现对应Presenter接口即可，如前所述，在Activity中可以实例化一个Presenter对象。</p><p>由于View由Fragment实现，因为更新视图元素的任务就能轻松完成了。但是Presenter需要和数据层打交道，所以我们接下来需要考虑repository了。</p><p>repository顾名思义，就是数据仓库，在Google的例子中，每种数据都有各自的仓库（如Meme、User、Tag等等），并对外提供操作这类数据的方法。这里我并没有和Google用同样的设计，而是做了一些修改。Google的例子中，一个Repository对象内部持有两个DataSource的引用，这两个DataSource分别负责网络和本地数据的操作，然后由Repository进行判断什么时候从哪里拿数据，以及做一些缓存。事实上我也是这么做的，但是Google让Repository和DataSource这三个对象都实现IDataSource接口，我觉得这个有些过度设计了，因为有不少数据操作是仅限于网络或本地的，Google的抽象方法虽然合理，但是实际使用却会造成不方便。因此，我仅创建了IRepository接口让Repository去实现，而两个DataSource（在我的项目中叫做Store）是直接各自提供方法给Repository的。事实上，我特意让Repository去实现一个接口，和前面特意设计Presenter和View的接口的原因是一样的，方便增删接口和多人合作，这一点后面我会提到。</p><p>Repository内部的实现我就不再细说，我想从源码包组织中已经能看出不少了。</p><h3 id="MVP框架搭建中的坑、提示和MVP框架的演进"><a href="#MVP框架搭建中的坑、提示和MVP框架的演进" class="headerlink" title="MVP框架搭建中的坑、提示和MVP框架的演进"></a>MVP框架搭建中的坑、提示和MVP框架的演进</h3><p>设计契约类是个脑力活，这要求我一开始就想好这个界面的最终效果，还要考虑到很多方面，我在实际的设计中也遇到了一些问题。</p><p>首先就是Dialog、BottomSheetDialogFragment等的问题。在Tumoji中，主界面主体是一个ViewPager，可以左右滑动两个分页，每个分页各有一个表情列表，是不同的排序。而点击某个表情，会弹出一个BottomSheet，展示表情的详情。最开始的时候，我试图把这个BottomSheet也作为整个主界面的View，但是事实上，这是很蛋疼的一件事，因为本身主界面承担的用户操作就已经够多了，而表情详情又要承担很多操作（点赞、举报、刷新、下载），这样会有十几个接口，百行代码找bug的痛苦又要来了！不仅如此，Android的Fragment是个很恶心的玩意儿，现在你还要在一个Fragment里面操作另一个Fragment，从那里获知用户操作以及把新数据分发过去……简直痛不欲生！</p><p>于是，我做了一个英明的决定，把详情页独立为一个视图单位，为它设计契约。这样，代码终于被分拆开来，能看了许多，而展开这个详情页的时候，主界面这个Fragment就充当了原来Activity的角色：实例化Fragment和Presenter、互相绑定、显示Fragment。</p><p>在MVP框架设计中，还需要避免过度设计的问题。有些操作，其实是完全没有必要通过Presenter代理的，比如点击菜单按钮弹出侧滑抽屉，如果还特意搞一个<code>Presenter.wantToOpenDrawer</code>、<code>View.openDrawer</code>那就有点多余了。一般来说，不涉及数据操作的行为都可以直接在View中完成。</p><p>还有一个小提示是生命周期的管理，这个在网上也有一些争论，不过我还只是初学者，就没有考虑太深，我把Fragment的生命周期也理解成了用户操作，比如<code>onResume</code>可以理解成用户把app调回了前台，因此我们可以在Presenter中增加这样的接口，从而完成一些与UI的生命周期有关的逻辑（比如初始化UI等等）。</p><p>最后，我还想说说MVP框架的演进。这个说法比较中二，其实是因为在实际的开发过程中，契约并非一成不变。毕竟人非圣贤，一开始设计的东西后面很可能要改（你说我区区一个程序员，怎么就开始改需求了呢？）就拿Tumoji的开发来说，我们就先后发生了很多改动，多亏了MVP框架，使得这些改动对其他开发者的影响减到了最小。</p><p>首先，是接口的增删。我们的团队是使用Git进行项目版本控制的，每个人从dev分支开新分支完成某个feature然后合并回dev分支，因此为了不影响其他人，dev分支的代码是必须可以正确运行的。但是我们知道，增加一个接口之后，接口的实现类如果不去实现，是编译都过不了的，而实现类是其他开发者的代码，擅自更改很容易出事，怎么办呢？其实这就是使用接口的目的了。我在Android Studio的设置中，设置了自动生成的Implement Method内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TODO</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Method not implemented&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样，我对对方的代码修改就仅限于增加一些会抛异常、带TODO注释的方法，把代码冲突减到最小。</p><p>当然，删除接口就更加容易了，直接在interface中把对应的接口加上<code>@deprecated</code>的JavaDoc或者注解，然后告知对应的开发者不必实现即可，完全不需要更改其他开发者的代码。</p><p>使用接口带来的好处就是可以乱改需求- -一开始的时候，由于我不熟悉RxJava，所以所有Repository暴露的接口都是用Listener回调的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">(String id, GetUserListener callback)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是后来，我从数据层的队友那里（我负责Presenter层和框架搭建）学到了RxJava的用法，一下子觉得Listener太不优雅了，于是，我开始把所有的Listener的接口都deprecated了，然后增加了新的接口……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@deprecated</span> Use &#123;<span class="hljs-doctag">@link</span> #getUser(String)&#125; instead.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUser</span><span class="hljs-params">(String id, GetUserListener callback)</span>;<br>  <br>  Observable&lt;UserModel&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，我没被队友砍死，我挺感动的……</p><h3 id="MVP的其他缺点和解决方案"><a href="#MVP的其他缺点和解决方案" class="headerlink" title="MVP的其他缺点和解决方案"></a>MVP的其他缺点和解决方案</h3><p>MVP的优点，从前面就看的很清楚了：非常适合多人协作开发，而且使得项目的逻辑非常清晰，不容易出bug（很容易解决bug）。但是，MVP有一个缺点：测试不方便。</p><p>我们平时写代码的时候，写一点跑一下是很轻松的，但是MVP不行，因为三个层被分开来了，对于每个界面而言，只要有一层没有实现，就没法看到效果，甚至没法运行起来，比如你的Presenter和Model都写完了，可是View还没实现，那你运行起来连调用Presenter都做不到。这带来的问题就是自己写了之后没法测试。当然，单元测试可以解决这个问题，但是很遗憾我们都没有这方面的知识，所以我得出了另一个方案：mock实现。</p><p>拿Presenter来说，由于数据层的大佬比较忙，进度比我慢一些，导致我没有办法调用数据层，就没有办法测试了。此时，我可以实现一个Mock的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MockUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Observable&lt;UserModel&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-keyword">return</span> Observable.just(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserModel</span>().withId(id));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，在可用的UserRepository可用之前，我先使用这个我自己编写的MockUserRepository进行测试即可。同理，View也可以写MockPresenter进行测试，而Repository由于不面向任何一个View，所以只能使用单元测试了（嗯，所以我们项目没有测试Repository……）。</p><p>一开始我就是这么写的，但是后来发现，还有更好的写法。试想，Repository已经实现了一部分了，如何部分接入呢？可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br>  <span class="hljs-keyword">private</span> IUserRepository mDelegate;<br>  <br>  <span class="hljs-comment">// This is a Singleton</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">UserRepository</span><span class="hljs-params">(Context context)</span> &#123;<br>    mDelegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockUserRepository</span>(context);<br>    <span class="hljs-comment">// Other initialization....</span><br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Observable&lt;UserModel&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-comment">// Unimplemented method</span><br>    <span class="hljs-keyword">return</span> mDelegate.getUer(id);<br>  &#125;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Observable&lt;List&lt;UserModel&gt;&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Implemented method</span><br>    <span class="hljs-keyword">return</span> mRemote.getUsers();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上所示，我们把MockUserRepository作为一个代理，被真正的UserRepository实现类持有。这样，数据层开发者每完成一个方法，就可以去掉代理。而对Presenter而言，他还是使用UserRepository实例。</p><h2 id="第三方库与框架的使用"><a href="#第三方库与框架的使用" class="headerlink" title="第三方库与框架的使用"></a>第三方库与框架的使用</h2><p>终于说完了MVP。Tumoji的开发中使用了很多框架。由于Tumoji是我们的个人作品，所以可以自由使用很多也许还不够成熟的第三方框架，他们为我们的开发节约了大量的时间和精力。</p><h3 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h3><p>Retrofit这个神器我已经用得比较熟练了。当初写UWP应用的时候，我需要给每个API写一个函数，而他们都长得几乎一样：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">public SomeType someApiMethod(params...) &#123;<br>  <span class="hljs-regexp">//</span> Set URI<br>  <span class="hljs-regexp">//</span> Set HTTP method (GET, POST, ...)<br>  <span class="hljs-regexp">//</span> Set Query (access token, ...)<br>  <span class="hljs-regexp">//</span> Set Header (Content-Type, ...)<br>  <span class="hljs-regexp">//</span> Create request body<br>  <span class="hljs-regexp">//</span> Send request<br>  <span class="hljs-regexp">//</span> Check whether the response is successful<br>  <span class="hljs-regexp">//</span> Convert response body to String or other data type<br>&#125;<br></code></pre></td></tr></table></figure><p>可以想象十几个接口的情况下，这项工作有多么蛋疼。但是，使用Retrofit之后，我们只需要非常简单的定义接口即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GET(&quot;users/&#123;id&#125;&quot;)</span><br>Call&lt;UserModel&gt; <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Path(&quot;id&quot;)</span> String id, <span class="hljs-meta">@Query(&quot;access_token&quot;)</span> String token)</span>;<br></code></pre></td></tr></table></figure><p>大大简化了代码！</p><h3 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h3><p>RxJava是ReactiveX框架在Java语言上的实现，前面提到的Listener模式麻烦之处在于每个请求都需要定义Listener，而且有的时候还会出现回调地狱（Callback Hell），非常容易出bug，甚至想想，如果需要根据一个数组，每个元素发一个异步请求，那代码就更加难看了。</p><p>后来接触到了RxJava。在RxJava中，有一个被观察者和订阅者。被观察者一旦有人订阅，就会开始某些任务，这些任务可能会获取到一个或多个结果，这些结果作为数据由被观察者发出，再由订阅者接收。举个例子，手机充电，手机就是订阅者，插座就是被观察者，插上电源的过程就是订阅，此时插座源源不断地发出数据（电），手机的显示屏上就会得到这些数据，显示在电池电量数据上。</p><p>在Tumoji中，大量使用了RxJava简化代码，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemeRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMemeRepository</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Observable&lt;MemeModel&gt; <span class="hljs-title function_">getMeme</span><span class="hljs-params">(File parentDir, String memeId)</span> &#123;<br>    <span class="hljs-keyword">return</span> mRemote.getMemeById(memeId)<br>            .map(memeModel -&gt; mLocal.fulfillDownloaded(parentDir, memeModel));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法的目的是从服务器获取指定表情的元数据，然后根据ID查找本地数据库是否有该表情，由于已下载的表情的路径和ID会被保存到数据库中，因此可以通过<code>fulfillDownloaded</code>，在本地已有的情况下，把表情的Uri从下载地址改为文件路径Uri，从而节约一些流量。</p><p>在<code>mRemote.getMemeById</code>中，实现非常简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Observable&lt;MemeModel&gt; <span class="hljs-title function_">getMemeById</span><span class="hljs-params">(String memeId)</span> &#123;<br>  <span class="hljs-keyword">return</span> mMemeApi.getMemeById(memeId).compose(ApplySchedulers.network());<br>&#125;<br></code></pre></td></tr></table></figure><p>如上，通过Retrofit配合RxJava，发送请求并把结果作为数据发送，返回发送该数据的Observable。后面的<code>ApplySchedulres.network</code>即类似<code>.subcribeOn(Schedulres.io()).observeOn(AndroidSchedulers.mainThread())</code>。</p><p>而<code>mLocal.fulfillDownloaded</code>的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> MemeModel <span class="hljs-title function_">fulfillDownloaded</span><span class="hljs-params">(File parentDir, MemeModel memeModel)</span> &#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> mDb.getMemeFileNameById(memeModel.getMemeId());<br>  <span class="hljs-keyword">if</span> (filename == <span class="hljs-literal">null</span>) &#123;<br>    memeModel.setDownloaded(<span class="hljs-literal">false</span>);<br>    memeModel.setMemeUri(Uri.parse(memeModel.getImageUrl()));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    memeModel.setDownloaded(<span class="hljs-literal">true</span>);<br>    memeModel.setMemeUri(Uri.fromFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentDir, filename)));<br>  &#125;<br>  <span class="hljs-keyword">return</span> memeModel;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mDb</code>提供了从数据库中获取对应ID的本地路径的方法。</p><p>可以看到，虽然各自的实现有些复杂，但是在Repository暴露的接口上非常简洁，即使应对一系列请求也是如此，例如当我需要为每个tag发起一个添加标签的请求的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Observable&lt;Void&gt; <span class="hljs-title function_">addTagsForMeme</span><span class="hljs-params">(String token, String memeId, List&lt;TagModel&gt; tagModels)</span> &#123;<br>  ArrayList&lt;Observable&lt;TagModel&gt;&gt; observables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>  <span class="hljs-keyword">for</span> (TagModel tagModel : tagModels) &#123;<br>    observables.add(tagApi.relTagToMeme(memeId, tagModel.getTagName(), token).compose(ApplySchedulers.network()));<br>  &#125;<br>  <span class="hljs-keyword">return</span> Observable.merge(observables).toList().map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Func1</span>&lt;List&lt;TagModel&gt;, Void&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">call</span><span class="hljs-params">(List&lt;TagModel&gt; tagModels)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>代码的逻辑很明了。</p><h2 id="关于团队开发"><a href="#关于团队开发" class="headerlink" title="关于团队开发"></a>关于团队开发</h2><p>说起团队开发，我也算是半个老司机了吧，之前就和他们开发了<a href="https://github.com/zhengqi-big-god-take-me-fly/WoChat">WoChat</a>，一个UWP平台的IM应用和一个模仿泡泡堂的Cocos2d-x游戏<a href="https://github.com/zhengqi-big-god-take-me-fly/FancyBubbling">天天爱打泡</a>（手动滑稽），现在我们又开发了Tumoji。WoChat的开发我们使用了MVVM框架，不过由于对UWP平台不熟悉，所以基本上是依葫芦画瓢；天天爱打泡的开发则参考了MVC，但是由于Cocos2d平台本身是多语言的，所以不容易找到针对C++的MVC框架；而Android上的MVP算是很热门也比较成熟了，所以开发起来压力比前面都要小一些。</p><p>在团队开发的工程中，最大的感慨莫过于意识到扎实的基本功对架构设计的重要性。虽然学Android的时间很长，但是一直都只是皮毛，其实我个人认为我现在接触MVP还是有点早，有点霸王硬上弓了，在设计过程中就会发现，很多时候由于Android本身的机制所限，并不能单纯地划分MVP逻辑，而对Android开发的基本功不够扎实就导致框架设计中遇到了很多问题。</p><p>借助Git的分支管理策略和MVP的框架，我们得以非常轻松地进行团队合作。当然，团队合作也并非易事，最大的问题在于进度，四个人都有自己的事情，而且临近期末，所以大家的开发进度不一，如前所述，进度的不一致给各自的测试也带来了一些问题，但是总体来说，我们的团队在合作上还是很顺利的。身为组长我也就不邀功了，就做了三件事：</p><ul><li>把MVP的框架搭建了起来</li><li>完成了Presenter的任务</li><li>在另外几位大佬忙于复习的时候，帮忙填了一些View和Model的坑</li></ul><p>当然，Android客户端的顺利开发离不开<a href="https://github.com/Tidyzq">@Tidyzq</a>提供的健壮又接口丰富的服务器，虽然由于使用了Loopback而拒绝提供文档，对API使用者不太友好……不过程序员嘛……都不爱写文档的，哈哈哈。</p><p>当然，也因为时间的确有些赶，项目的进度并不算乐观，目前仅仅完成了最基础的功能，而且有大量bug没有处理，还有不少坑需要填啊！</p><h2 id="关于产品"><a href="#关于产品" class="headerlink" title="关于产品"></a>关于产品</h2><p>由于整个项目的起源来自我，所以在整个设计中，会发现很多关系到代码之外的事情，比如缓存数据的事情。一开始的时候，我计划每次都将列表最前的若干项缓存到数据库，以便下次打开应用的时候能立刻加载缓存数据。其实到后面我发现，这样的意义很小，因为这个数据不是递增的而是被频繁替换的，Tumoji是严重依赖网络的，因此离线缓存的重要性其实并不大，因为离线的时候缓存的东西都没有什么用。因此，导致了开发工程中一次很大的变动，对Model层的开发还是有不小的影响。同时，为了节约用户的流量，我们在Retrofit上配置了缓存。</p><p>开发Tumoji的过程让我体会到一些产品设计的困难，诸如缓存的权衡、对网络的请求应该如何限制、以及一些用户上的交互等等。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>坦率的讲，Tumoji应该是我（参与）开发的第一款能用的app（当然之前做过一次外包，但是主要是一个师兄带我），因此我也计划将它维护下去，相信能从中学到很多东西。另外，开发进度的延误和单元测试的缺漏还是这个项目中的一些遗憾。</p><p>那么，废话就说到这里，毕竟我接下来还有两科考试要挂……希望Tumoji早日在应用商店与大家见面，到时候我应该会再写一篇博客写写准备发布应用和在商店上架应用的事情。</p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>tumoji</tag>
      
      <tag>mvp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian Jessie基于PHP7安装Pydio</title>
    <link href="/2016/12/23/install-pydio-on-debian-jessie-with-php7/"/>
    <url>/2016/12/23/install-pydio-on-debian-jessie-with-php7/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Edit history</strong></p><p><em>2017&#x2F;01&#x2F;12</em></p><ul><li>更正一些错误</li><li>完善教程</li><li>增加MySQL的配置</li></ul></blockquote><p>之前我在树莓派上安装的是ownCloud，然而由于在校园网，外网无法访问，而ownCloud的安装实在有些麻烦，于是我在DigitalOcean新开了一个droplet，打算在上面安装Pydio。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>为了防止遇到不支持的参数，我决定直接从官方源安装。参照官方文档，添加key：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/keys/</span>nginx_signing.key<br>$ sudo apt-key add nginx_signing.key<br></code></pre></td></tr></table></figure><p>然后把以下内容放进<code>/etc/apt/sources.list.d/nginx.list</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/packages/m</span>ainline<span class="hljs-regexp">/debian/</span> jessie ngin<br>deb-src http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/packages/m</span>ainline<span class="hljs-regexp">/debian/</span> jessie nginx<br></code></pre></td></tr></table></figure><p>保存之后运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> update<br>$ sudo apt-<span class="hljs-built_in">get</span> install nginx<br></code></pre></td></tr></table></figure><h2 id="从DotDeb安装php7-0"><a href="#从DotDeb安装php7-0" class="headerlink" title="从DotDeb安装php7.0"></a>从DotDeb安装php7.0</h2><p>Debian Jessie的官方源并不提供php7.0，所幸我们可以通过DotDeb提供的源安装。DotDeb为Debian维护了几个常用服务器组件的官方最新源，其实他们也提供了Nginx，只不过我是后来才发现的……</p><p>添加以下内容到<code>/etc/apt/sources.list.d/dotdeb.list</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//</span>packages.dotdeb.org jessie all<br>deb-src http:<span class="hljs-regexp">//</span>packages.dotdeb.org jessie all<br></code></pre></td></tr></table></figure><p>然后同样添加key：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>wget <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/www.dotdeb.org/dotdeb</span>.gpg<br><span class="hljs-variable">$ </span>sudo apt-key add dotdeb.gpg<br></code></pre></td></tr></table></figure><p>最后：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-built_in">get</span> update<br>$ sudo apt-<span class="hljs-built_in">get</span> install php7.0-fpm<br></code></pre></td></tr></table></figure><p>安装完成之后，我们需要做一些配置。首先是<code>fix_pathinfo</code>的修改。DotDeb提供的php7.0的<code>php.ini</code>文件位置和默认的是不一样的……通过以下命令可以的出<code>php.ini</code>的位置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ php --ini<br>Configuration <span class="hljs-keyword">File</span> (php.ini) Path: <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<br>Loaded Configuration <span class="hljs-keyword">File</span>:         <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli/php.ini<br>Scan <span class="hljs-keyword">for</span> additional .ini files in: <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli/conf.d<br>Additional .ini files parsed:      <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">10</span>-opcache.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">10</span>-pdo.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-calendar.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-ctype.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-exif.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-fileinfo.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-ftp.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-<span class="hljs-keyword">gettext</span>.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-iconv.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-json.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-phar.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-posix.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-readline.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-shmop.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-sockets.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-sysvmsg.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-sysvsem.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-sysvshm.ini,<br><span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli<span class="hljs-regexp">/conf.d/</span><span class="hljs-number">20</span>-tokenizer.ini<br></code></pre></td></tr></table></figure><p><del>于是我们修改<code>/etc/php/7.0/cli/php.ini</code>，找到<code>cgi.fix_pathinfo=0</code>，把<code>1</code>改为<code>0</code>。</del><strong>由于我们的Pydio是通过fpm运行的，而fpm本身有<code>php.ini</code>，所以这里先不配置。</strong></p><p>接着，我们修改fpm的配置，它在<code>/etc/php/7.0/fpm/pool.d/www.conf</code>。确定如下两行内容：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span> <span class="hljs-title">= www-data</span><br><span class="hljs-keyword">group</span> <span class="hljs-title">= www-data</span><br></code></pre></td></tr></table></figure><p>最后别忘了重启php-fpm：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ sudo<span class="hljs-keyword"> system</span>ctl restart php7.0-fpm.service<br></code></pre></td></tr></table></figure><h2 id="下载Pydio"><a href="#下载Pydio" class="headerlink" title="下载Pydio"></a>下载Pydio</h2><p>这一部分就比较简单了，直接从官方的下载链接wget下来并解压到&#x2F;<code>var/www</code>即可。另外，官方源的Nginx默认的html目录并不在<code>/var/www</code>，需要手动创建目录。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo mkdir <span class="hljs-regexp">/var/</span>www<br>$ wget https:<span class="hljs-regexp">//</span>download.pydio.com<span class="hljs-regexp">/pub/</span>core<span class="hljs-regexp">/archives/</span>pydio-core-<span class="hljs-number">7.0</span>.<span class="hljs-number">3</span>.tar.gz<br>$ tar -xzf pydio-core-<span class="hljs-number">7.0</span>.<span class="hljs-number">3</span>.tar.gz<br>$ sudo mv pydio-core-<span class="hljs-number">7.0</span>.<span class="hljs-number">3</span> <span class="hljs-regexp">/var/</span>www/pydio<br>$ sudo chown -R www-data:www-data <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/pydio/</span>data<br>$ sudo chown www-data:www-data <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/pydio/</span>.htaccess<br></code></pre></td></tr></table></figure><p>注意我们的fpm和Nginx的worker都是以www-data用户运行的（Nginx的worker默认不是www-data运行，但我后面会更改），因此需要保证Pydio的data目录是www-data可读写的。*<code>.htaccess</code>文件后面也需要可写，所以这里一并修改了。*</p><h2 id="为Pydio配置Nginx和php-fpm"><a href="#为Pydio配置Nginx和php-fpm" class="headerlink" title="为Pydio配置Nginx和php-fpm"></a>为Pydio配置Nginx和php-fpm</h2><p>由于没有使用apache，php-fpm就成为了处理php请求的服务。注意Pydio的目录下提供了一个<code>nginx.conf.sample</code>，但是这个配置不能拿来就用，需要修改如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs glsl">server &#123;<br>        listen <span class="hljs-number">80</span>;<br>        server_name your-pydio.your-domain.tld;<br>        keepalive_requests    <span class="hljs-number">10</span>;<br>        keepalive_timeout     <span class="hljs-number">60</span> <span class="hljs-number">60</span>;<br><br>        client_max_body_size <span class="hljs-number">800</span>M;<br>        client_body_buffer_size <span class="hljs-number">128</span>k;<br><br>    <span class="hljs-meta"># Document Root</span><br>        root /var/www/pydio;<br>        <br>        <span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.php <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br><br>        <span class="hljs-keyword">if</span> (!-e $request_filename)&#123;<br>                rewrite ^(.*)$ /<span class="hljs-keyword">index</span>.php <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-meta"># nginx configuration</span><br>        <span class="hljs-keyword">location</span> ~ \.php$ &#123;<br>                <span class="hljs-meta">#include       snippets/fastcgi-php.conf;</span><br>                fastcgi_pass  unix:/run/php/php7<span class="hljs-number">.0</span>-fpm.sock;<br>                <span class="hljs-meta"># Below are from /etc/nginx/conf.d/default.conf</span><br>                fastcgi_index <span class="hljs-keyword">index</span>.php;<br>                fastcgi_param SCRIPT_FILENAME $request_filename;<br>                include       fastcgi_params;<br>        &#125;<br>        <br>        <span class="hljs-keyword">location</span> ~ ^/data/public/.*$ &#123;<br>                allow <span class="hljs-built_in">all</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">location</span> ~ ^/(conf|data) &#123;<br>                deny <span class="hljs-built_in">all</span>;<br>        &#125;<br>&#125;<br>types &#123;<br>        application/font-woff2                 woff2;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到主要的改动是php部分，首先他原来include的<code>snippets</code>在这个版本的Nginx里是木有的……所以我参照Nginx的默认设置做了改动。同时，通过<code>/etc/php/7.0/fpm/pool.d/www.conf</code>可以发现sock的路径也需要修改。<em>另外，我还对data目录做了访问控制，后面会提到。</em></p><p>修改完成，重启Nginx的服务之后，我在pydio的目录下新建了一个<code>php-test.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后访问，结果发现一直502。查看Nginx的log发现居然是Permission Denied，谷歌之后得知，运行fpm的进程用户是<code>www-data</code>，而其sock文件的权限是0660，悲剧的是Nginx的worker默认是用<code>nginx</code>用户运行的，因此无法把脚本传递给fpm……解决方法是修改<code>/etc/nginx/nginx.conf</code>：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span>  <span class="hljs-title">www-data</span>;<br></code></pre></td></tr></table></figure><p>然后重启Nginx：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo systemctl restart nginx.servive<br></code></pre></td></tr></table></figure><p>然后访问该php文件，你会看到你的php信息网页。</p><h2 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h2><p>我兴冲冲输入了域名，迎接我的是403。</p><p>差了log之后我才想起来我忘了装扩展。官方声明需要的扩展有：</p><blockquote><p> Basic PHP extensions required are intl, mbstring, gd and dom-xml. For cryptography, we require either open-ssl (recommended) or mcrypt (will be removed from PHP soon).</p></blockquote><p>通过<code>php -m</code>可以看到已经安装的模块。接下来我们安装缺少的模块：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ sudo apt-get install php7.0-mbstring php7.0-intl php7.0-gd php7.0-xml<br>$ sudo<span class="hljs-keyword"> system</span>ctl restart php7.0-fpm.service<br></code></pre></td></tr></table></figure><p>（其实安装完之后还是403,，因为index的原因，我重新修改了Nginx的配置，已经一并写到前面提供的了- -）</p><h2 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h2><p>现在输入域名，你会看到Pydio Disgnostic Tool列举出的所有有问题的地方。我遇到的问题是3个：</p><ul><li>Security Breach，主要是data目录权限配置错误</li><li>SSL Encryption，由于没有启用HTTPS所以是WARNING</li><li>PHP Output Buffer disabled，需要将这个设置为禁用以提高性能</li></ul><p>这里我遇到了悲剧……之前修改的<code>/etc/php/7.0/cli/php.ini</code>是全局的，但是fpm本身还需要一份php.ini的配置，位于<code>/etc/php/7.0/fpm/php.ini</code>，<strong>我们先参照之前的内容修改fix_pathinfo</strong>，然后找到并修改如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">; <span class="hljs-doctag">Note:</span> Output buffering can also be controlled via Output Buffering Control</span><br><span class="hljs-comment">;   functions.</span><br><span class="hljs-comment">; Possible Values:</span><br><span class="hljs-comment">;   On = Enabled and buffer is unlimited. (Use with caution)</span><br><span class="hljs-comment">;   Off = Disabled</span><br><span class="hljs-comment">;   Integer = Enables the buffer and sets its maximum size in bytes.</span><br><span class="hljs-comment">; <span class="hljs-doctag">Note:</span> This directive is hardcoded to Off for the CLI SAPI</span><br><span class="hljs-comment">; Default Value: Off</span><br><span class="hljs-comment">; Development Value: 4096</span><br><span class="hljs-comment">; Production Value: 4096</span><br><span class="hljs-comment">; http://php.net/output-buffering</span><br><span class="hljs-attr">output_buffering</span> = <span class="hljs-literal">Off</span><br></code></pre></td></tr></table></figure><p>注意我把<code>output_buffering</code>改为了<code>Off</code>。</p><p>重启fpm服务之后，刷新网页，解决！</p><p>data权限问题源于没有在nginx中屏蔽data目录的访问，<em>这个问题如果按照我提供的配置，那么将不会遇到。我之前不知道，才遇到这个问题。以下的修改我已经加到前面了。</em>，所以我们修改<code>/etc/nginx/conf.d/pydio.conf</code>，在<code>server</code>中增加如下内容（参考自<a href="http://martin-denizet.com/nginx-configuration-for-pydio-with-ssl/">http://martin-denizet.com/nginx-configuration-for-pydio-with-ssl/</a>）：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">server &#123;<br><span class="hljs-comment"># ...</span><br><br><span class="hljs-keyword">location</span> <span class="hljs-title">~ ^/data</span>/public/.*$ &#123;<br>allow all;<br>&#125;<br><br><span class="hljs-keyword">location</span> <span class="hljs-title">~ ^/(conf</span>|data) &#123;<br><span class="hljs-keyword">deny</span> all;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述内容会屏蔽除了<code>/data/public/*</code>以外的所有data内容。重启Nginx服务之后刷新页面，只剩下一个SSL的warning了，这个我们下次再说Orz</p><h2 id="配置SQLite"><a href="#配置SQLite" class="headerlink" title="配置SQLite"></a>配置SQLite</h2><p><strong>SQLite容易引发配置文件被锁定问题，因此建议使用MySQL（见下面）。</strong></p><p>开始安装向导之后，我才发现Pydio的配置数据（不包含用户文件）需要存储到数据库里，在Pydio支持的数据库中，由于MySQL和PostgreSQL都太大了，于是我决定使用SQLite 3。</p><p>安装php扩展：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ sudo apt-get install php7.0-sqlite3<br>$ sudo<span class="hljs-keyword"> system</span>ctl restart php7.0-fpm.service<br></code></pre></td></tr></table></figure><p>后面需要的缓存等我都暂时没启用。</p><h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><p>如果你想使用MySQL，参照官网，可以使用如下命令安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql-apt-config_0.<span class="hljs-number">8.1</span>-<span class="hljs-number">1</span>_all.deb<br>$ sudo dpkg -i mysql-apt-config_0.<span class="hljs-number">8.1</span>-<span class="hljs-number">1</span>_all.deb<br></code></pre></td></tr></table></figure><p>你可以选择需要安装的版本以及是否需要其他工具（Workbench等）。</p><p>然后就可以安装MySQL服务器和php的相关扩展了：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ sudo apt-<span class="hljs-keyword">get</span> install mysql-<span class="hljs-keyword">server</span> php7<span class="hljs-number">.0</span>-mysql<br>$ sudo systemctl <span class="hljs-keyword">restart</span> php7<span class="hljs-number">.0</span>-fpm<br></code></pre></td></tr></table></figure><p>中间需要设置root帐号的密码。安装完成之后，我们需要为Pydio创建数据库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mysql -p<br>...<br>mysql&gt; CREATE DATABASE pydio;<br>Query OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; USE pydio;<br>Database changed<br>mysql&gt; CREATE USER <span class="hljs-string">&#x27;pydio&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; GRANT ALL PRIVILEGES ON pydio.* TO <span class="hljs-string">&#x27;pydio&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>Query OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0.00</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>上面的命令会创建名为pydio的数据库，然后添加一个可以管理这个数据库的用户，用户名pydio密码password。接下来，只要在Pydio中选择MySQL并输入数据库名字、用户名、密码即可。</p><h2 id="修改htaccess文件"><a href="#修改htaccess文件" class="headerlink" title="修改htaccess文件"></a>修改htaccess文件</h2><p><em>这里的配置也在前面已经解决了。</em>安装过程中，他提示我无法写入该文件，直接改用户！</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ sudo chown www-<span class="hljs-class"><span class="hljs-keyword">data</span>:www-<span class="hljs-keyword">data</span> .htaccess</span><br></code></pre></td></tr></table></figure><p>刷新页面之后，就可以正常使用了！</p><h2 id="扩大上传限制"><a href="#扩大上传限制" class="headerlink" title="扩大上传限制"></a>扩大上传限制</h2><p>Pydio默认的上传大小限制在2M，显然是不够的，参考<a href="https://pydio.com/forum/f/topic/solved-how-to-change-upload-limit/">Topic: [solved] How to change Upload limit | Pydio</a>，可以改变上传大小限制：</p><p>首先编辑<code>/etc/php/7.0/fpm/php.ini</code>，修改两个地方：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">upload_max_filesize</span>=<span class="hljs-number">1024</span>M<br><span class="hljs-attr">post_max_size</span>=<span class="hljs-number">1280</span>M<br></code></pre></td></tr></table></figure><p>以上两个配置分别是上传文件的上限和POST数据的上限，所以后者比前者需要大一些。你还可以修改<code>max_file_uploads</code>来设置同时上传的文件数量上限。</p><p>重启fpm服务，然后进入到<code>Settings - Application Parameters - Application Core - Uploaders Options</code>，设置<code>Limitations - File Size</code>为<code>1024M</code>，然后点击右上角保存即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Pydio</tag>
      
      <tag>PHP</tag>
      
      <tag>Debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Intellij IDEA配置Tomcat JSP工程过程记录</title>
    <link href="/2016/12/22/configure-tomcat-jsp-project-with-idea/"/>
    <url>/2016/12/22/configure-tomcat-jsp-project-with-idea/</url>
    
    <content type="html"><![CDATA[<p>最近开始参与一个相关的大坑，第一次接触到了JSP服务器。原来的项目是基于一个收费的IDE，正版狗果断不能忍啊- -于是开始尝试使用Intellij IDEA配置项目，一次就配置成功了也是很好运- -遂记录如下。</p><p>这里我使用的是学生邮箱加持的Intellij IDEA Ultimate，<del>不过社区版应该也是没问题的</del><strong>社区版有很多功能被阉割掉了，所以本文仅适用于Intellij IDEA Ultimate</strong>。</p><p><em>出于保密目的，以下截图敏感信息（包括项目目录名等）均被遮盖- -</em></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>阅读本文之前，你需要了解并准备好项目所需的运行环境（jdk、Tomcat等），并对Jetbrains的IDE有初步了解。</p><h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>通过git从仓库拉取源码，源码的目录结构大概如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff">the-project-directory<br><span class="hljs-addition">+ resources</span><br><span class="hljs-addition">+ src</span><br><span class="hljs-addition">+ src_jar</span><br><span class="hljs-addition">+ test</span><br><span class="hljs-addition">+ WebContent</span><br><span class="hljs-deletion">- .gitignore</span><br><span class="hljs-deletion">- generatorConfig.xml</span><br></code></pre></td></tr></table></figure><p>其中我们感兴趣（知道）的是：src包含服务器后端的源码，WebContent包含了JSP服务器的配置和网站根目录内容。</p><p>使用IDE打开项目（而不是导入项目），如下图中的<code>Open</code>：</p><p><img src="/open.png"></p><p>初次打开项目之后，IDEA会检测到项目中的<code>web.xml</code>配置文件，并询问是否根据该文件配置该项目为Web应用，这里我们点击同意。也可以在<code>Event Log</code>面板找到该消息。</p><h2 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h2><p>要运行服务器，需要配置JDK和Tomcat服务器。Tomcat的配置我会放到后面说明。</p><p>在IDEA中，进入菜单<code>File - Project Structure...</code>，在左边选择<code>SDKs</code>，点击加号，选择<code>JDK</code>，选择jdk安装目录<code>jdk1.7.0_79</code>，这个目录的内容应该如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff">jdk1.7.0_79<br><span class="hljs-addition">+ bin</span><br><span class="hljs-addition">+ db</span><br><span class="hljs-addition">+ include</span><br><span class="hljs-addition">+ jre</span><br><span class="hljs-addition">+ lib</span><br><span class="hljs-addition">+ man</span><br><span class="hljs-addition">+ ...</span><br></code></pre></td></tr></table></figure><p>添加之后结果如下：</p><p><img src="/jdk.png"></p><p>接下来，切换到<code>Project</code>，在右侧选择项目SDK为刚刚设置的jdk，同时把项目语言等级改为7，把项目编译输出目录改为repo源码以外的目录，否则编译和构建生成的内容会被IDE索引而影响使用。</p><p><img src="/project.png"></p><p>接下来切换到<code>Modules</code>，会发现模块内已经包含了一个Web子模块，他就是IDE检测到<code>web.xml</code>之后自动生成的。如果没有，你可以选中模块，然后点击模块列表上面的加号选择<code>Web</code>，然后在右侧的<code>Deployment Descriptors</code>点击右边的加号选择你的<code>web.xml</code>文件。</p><p><img src="/modules-web.png"></p><p>我们需要为这个module配置源码目录和依赖。在module列表中选中模块（而不是<code>Web</code>条目），然后在右边的<code>Sources</code>标签下，选中src目录，右键标记为<code>Sources</code>，此时这个目录就会变成蓝色。</p><p><img src="/modules-sources.png"></p><p>再切换到<code>Dependencies</code>标签，点击右边的加号把所需的jar文件和目录（如某些包含jar文件的lib目录）添加进来。</p><p><img src="/modules-dependencies.png"></p><p>最后，我们前往左边的<code>Artifacts</code>，配置最后的制品。</p><p>点击制品列表顶部的加号，选择<code>Web Application: Explored - From Modules...</code>，在列表中选择刚才配置的module，会发现IDE自动帮你配置好了生成目录的内容：Web模块的网站根目录、模块的编译输出（class文件）、所需的jar依赖等。</p><p><img src="/artifacts.png"></p><p>到此为止，我们已经配置好用于部署的项目输出了。</p><h2 id="配置Tomcat自动部署"><a href="#配置Tomcat自动部署" class="headerlink" title="配置Tomcat自动部署"></a>配置Tomcat自动部署</h2><p>接下来我们配置Tomcat。我们需要保证IDEA安装了Tomcat and TomEE Integration插件并启用，前往<code>File - Settings</code>并在左侧选择Plugins，在右侧找到该插件并打勾确保被启用。如果没有找到，可以点击下面的<code>Install jetbrains plugins...</code>安装。</p><p>插件启用之后，我们打开菜单<code>Run - Edit Configurations...</code>，然后点击左上角的加号：<code>Tomcat Server - Local</code>，在右侧可以进行配置。下图是我事后截取的，在你的IDE中，大部分配置可能还未完成。</p><p><img src="/run-tomcat-server-before-conf.png"></p><p>首先点击<code>Application server</code>选项右侧的<code>Configure...</code>按钮添加Tomcat服务器，在对话框中，同样点击左上角的加号，在又一个新的对话框中的Tomcat Home中选择Tomcat的根目录<code>apache-tomcat-7.0.73</code>，这个目录的内容应该如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">tomcat-7.0.73<br><span class="hljs-bullet">+</span> bin<br><span class="hljs-bullet">+</span> conf<br><span class="hljs-bullet">+</span> lib<br><span class="hljs-bullet">+</span> logs<br><span class="hljs-bullet">+</span> temp<br><span class="hljs-bullet">+</span> webapps<br><span class="hljs-bullet">+</span> work<br></code></pre></td></tr></table></figure><p>选择之后，IDE会自动检测出Tomcat的版本和基目录，点击确定。</p><p><img src="/tomcat-home.png"></p><p>回到刚刚的<code>Application Servers</code>对话框，此时Tomcat的服务器的路径已经配置好，直接点击确定即可。</p><p>最终回到运行配置对话框，在<code>Application server</code>选项可以选择刚刚配置的Tomcat了。接下来需要做以下配置：</p><ul><li>在<code>Open browser</code>中可以设置运行之后自动用浏览器打开指定URL，我们的项目将运行在<code>http://localhost:8080</code>中，因此我们默认即可。</li><li>VM Options可以设置一些虚拟机的参数，如<code>-XX:PermSize=256M -XX:MaxPermSize=512m -Xms256m -Xmx1024m</code></li><li>JRE中选择之前配置的JDK版本</li></ul><p>此时，你的<code>Run/Debug Configurations</code>对话框的内容就会和我前面提供的截图相似了。最后，我们切换到<code>Deployment</code>标签，点击中间的加号，选择<code>Artifacts</code>，你之前配置的artifact会被自动添加，在右边设置上下文为<code>/</code>，这样我们就可以在<code>localhost:8080</code>中访问你的制品了。</p><p><img src="/run-deployment.png"></p><p>到此为止，我们已经可以让服务器启动了，我们点击确定保存。</p><h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><p>到此为止，我们已经配置完成了，点击工具栏中运行按钮（绿色播放按钮）左边的列表选择刚刚的运行配置，然后点击右边的运行，<code>Run</code>面板会打开，等待若干分钟，随着日志不停输出，你的artifact的部署状态最终变成绿色的OK，然后就会自动打开浏览器进入主页了。</p><p><img src="/run.png"></p><p>当你修改了代码之后，点击<code>Run</code>面板左侧的蓝色旋转箭头，在弹出的对话框中选择<code>Restart Server</code>即可重新编译并部署。当然，你也可以只选择<code>Redeploy</code>重新部署而不重启Tomcat，此时IDE将尝试热替换classes，如果这个选项并未令你的修改生效，就使用<code>Restart Server</code>吧！</p>]]></content>
    
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>Tomcat</tag>
      
      <tag>JSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记singleInstance的一个坑</title>
    <link href="/2016/11/05/confusion-in-single-instance-launch-mode/"/>
    <url>/2016/11/05/confusion-in-single-instance-launch-mode/</url>
    
    <content type="html"><![CDATA[<p>之前曾经写过一个Demo，遇到了一个奇怪的行为，今晚查找launchMode相关资料的时候竟然以外得到了原因，急忙记录下来。</p><p>先说说行为。这个Demo有3个Activity：Main、A、B。Main的launchMode设置为<code>singleInstance</code>，上有两个按钮可以分别启动A和B。</p><p>除此以外，还有一个Widget，点击之后会进入Main。</p><p>接下来我的操作：打开Main，点击进入A，按Home，点击Widget回到Main，点击进入B，按Home，点击Widget回到Main，点击试图进入A，谁知打开来竟然是B！</p><p>今晚无意中找到这样一个帖子：<a href="http://stackoverflow.com/questions/5804966/how-to-start-an-activity-from-a-singleinstance-activity">android - How to start an activity from a singleInstance activity? - Stack Overflow</a>，发现了他摘录的官方文档，终于明白：</p><p>原来，singleInstance的Activity是它所在的唯一一个Activity，因此从这里打开的Activity会在新的Task中打开，<strong>就像使用了FLAG_ACTIVITY_NEW_TASK一样</strong>。如果去翻翻这个flag就会发现，它会查找是否被启动的已经存在，如果存在，它会切换到这个task但是并不会自动pop上层的activity！</p><p>继续翻阅就会发现，想要无条件创建task的话，需要增加<code>FLAG_ACTIVITY_MULTIPLE_TASK</code>标记，经过测试，的确可以了。</p><p>但是后来想想，这样似乎也有问题，按照文档：</p><blockquote><p> Used in conjunction with <code>FLAG_ACTIVITY_NEW_TASK</code> to disable the behavior of bringing an existing task to the foreground. When set, a new task is <em>always</em> started to host the Activity for the Intent, regardless of whether there is already an existing task running the same thing.</p></blockquote><p>也就是说，使用这个会不停地创建新的task。</p><p>我循环进入Main - 点击进入A - Home - 点击Widget进入Main，这样几次之后，用<code>dumpsys</code>查看了app的所有activity，果然已经有五六个A的task了……</p><p>最后该思考一下，对于一个需要返回Main的Widget或Notification，应该如何设计跳转呢？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Windows与Ubuntu双系统需要反复重新配对蓝牙鼠标的问题</title>
    <link href="/2016/08/21/solve-repairing-problem-on-dual-boot-windows-and-ubuntu-pc/"/>
    <url>/2016/08/21/solve-repairing-problem-on-dual-boot-windows-and-ubuntu-pc/</url>
    
    <content type="html"><![CDATA[<h2 id="废话几句"><a href="#废话几句" class="headerlink" title="废话几句"></a>废话几句</h2><p>post模板在8&#x2F;21创建，现在终于（逼自己）回来填坑了Orz</p><p>之前买了个蓝牙鼠标，但是我装了Windows 10+Ubuntu 16.04的双系统，每一次切换系统都需要重新配对，麻烦至极，于是谷歌了一番，找到了一点解决方案。</p><p>首先给出我的不负责任猜想：蓝牙鼠标有一个MAC地址MB，计算机有一个MAC地址MP（蓝牙适配器的），每一次配对的时候，鼠标或者计算机随机（也许也是其他算法）产生一个key记为K，然后将它发送给对方。配对成功之后，双方应该都会保存这个key。下一次配对的时候，只要双方的MAC、key三者一致，就能重新配对。</p><p>基于上面的想法，由于MAC在两个系统里面都是一样的，所以只要依次在两个系统里配对，然后将后配对的系统保存的key覆盖到先配对的系统保存的key，就可以实现两个系统均能配对。</p><p>考虑到Linux相对来说比较自由，有了root什么都能干，于是基本的想法就是先在Ubuntu中配对，再在Windows中配对，然后从Windows中读取key。</p><h2 id="获取Windows中保存的蓝牙密钥"><a href="#获取Windows中保存的蓝牙密钥" class="headerlink" title="获取Windows中保存的蓝牙密钥"></a>获取Windows中保存的蓝牙密钥</h2><p>Windows将密钥保存在了注册表中，而即时使用系统管理员打开，也无法查看，因此需要使用特殊的工具PsExec，放心，这是微软官方提供的工具。</p><p>到这里下载：<a href="http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx"></a>，然后解压，里面有一个PsExec.exe程序。</p><p>接下来，在开始按钮点击右键，选择“命令控制台（管理员）”，然后进入到PsExec.exe所在目录，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PsExec.exe -s -i regedit<br></code></pre></td></tr></table></figure><p>此时会打开一个注册表窗口，导航到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\BTHPORT\Parameters\Keys</code>，然后你就会看到你的PC的蓝牙适配器MAC：</p><p><img src="/regedit.png" alt="regedit"></p><p>如上图，<code>00********bc</code>就是我的蓝牙适配器MAC，而我的蓝牙鼠标的MAC则是<code>c03*******60</code>，后面的就是密钥！复制出来备用。</p><h2 id="修改Ubuntu中的密钥"><a href="#修改Ubuntu中的密钥" class="headerlink" title="修改Ubuntu中的密钥"></a>修改Ubuntu中的密钥</h2><p>接下来，我们回到Ubuntu，通过以下命令更改密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入root用户模式</span><br>sudo su<br>cd /var/lib/bluetooth<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入对应的PC蓝牙适配器MAC目录</span><br>cd 00:**:**:**:**:BC<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入对应的蓝牙鼠标MAC目录</span><br>cd C0:3*:**:**:**:60<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改info文件</span><br>vi info<br></code></pre></td></tr></table></figure><p>在info文件中，可以看到<code>[LinkKey]</code>字段，其中的<code>Key</code>键保存的正是密钥，我们把它修改为Windows下的密钥，如果不放心可以先把这个文件备份。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Key=77F9<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>3450<br></code></pre></td></tr></table></figure><p>保存文件，重启，大功告成！</p><h2 id="Bonus-Ubuntu让蓝牙鼠标配对的时候关闭触摸板"><a href="#Bonus-Ubuntu让蓝牙鼠标配对的时候关闭触摸板" class="headerlink" title="Bonus - Ubuntu让蓝牙鼠标配对的时候关闭触摸板"></a>Bonus - Ubuntu让蓝牙鼠标配对的时候关闭触摸板</h2><p>这个功能Windows 10已经自带，而我非常不习惯触摸板，用久了手指疼- -于是再谷歌了一番。大概方法是添加一条udev规则，让鼠标是否插入的变动会触发一个脚本。</p><p>我们首先需要获取触摸板的设备ID，由于不同的系统对触摸板的命名不同，所以没有办法写通用脚本。打开终端输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xinput<br></code></pre></td></tr></table></figure><p>然后我们从中找到带有Touchpad字样的设备，记下它的ID：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">⎜   ↳ SYN1B7E:01 06CB:2970 Touchpad           <span class="hljs-attribute">id</span>=14[slave  pointer  (2)]<br></code></pre></td></tr></table></figure><p>然后准备一个脚本<code>touchpad_switcher.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>enabled=$1<br>if $enabled<br>then<br>  xinput set-prop &lt;touchpad_id&gt; &quot;Device Enabled&quot; 1 | notify-send &quot;The touchpad is now enabled.&quot; &quot;&quot;<br>else<br>  xinput set-prop &lt;touchpad_id&gt; &quot;Device Enabled&quot; 0 | notify-send &quot;Disabling the touchpad...&quot; &quot;&quot;<br>fi<br></code></pre></td></tr></table></figure><p>注意，<code>&lt;touchpad_id&gt;</code>需要替换为你获取到的ID。别忘了提供可执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod a+x touchpad_switcher.sh<br></code></pre></td></tr></table></figure><p>接下来，创建文件<code>/etc/udev/rules.d/10-local.rules</code>，输入：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ACTION==<span class="hljs-string">&quot;add&quot;</span>, SUBSYSTEM==<span class="hljs-string">&quot;input&quot;</span>, KERNEL==<span class="hljs-string">&quot;mouse[0-9]&quot;</span>, <span class="hljs-keyword">ENV</span>&#123;DISPLAY&#125;=<span class="hljs-string">&quot;:0&quot;</span>,<span class="hljs-keyword">ENV</span>&#123;XAUTHORITY&#125;=<span class="hljs-string">&quot;/home/$USER/.Xauthority&quot;</span>, <span class="hljs-keyword">ENV</span>&#123;ID_CLASS&#125;=<span class="hljs-string">&quot;mouse&quot;</span>, <span class="hljs-keyword">RUN</span><span class="language-bash">+=<span class="hljs-string">&quot;/home/<span class="hljs-variable">$USER</span>/scripts/touchpad_switcher.sh false&quot;</span></span><br>ACTION==<span class="hljs-string">&quot;remove&quot;</span>, SUBSYSTEM==<span class="hljs-string">&quot;input&quot;</span>, KERNEL==<span class="hljs-string">&quot;mouse[0-9]&quot;</span>, <span class="hljs-keyword">ENV</span>&#123;DISPLAY&#125;=<span class="hljs-string">&quot;:0&quot;</span>,<span class="hljs-keyword">ENV</span>&#123;XAUTHORITY&#125;=<span class="hljs-string">&quot;/home/$USER/.Xauthority&quot;</span>, <span class="hljs-keyword">ENV</span>&#123;ID_CLASS&#125;=<span class="hljs-string">&quot;mouse&quot;</span>, <span class="hljs-keyword">RUN</span><span class="language-bash">+=<span class="hljs-string">&quot;/home/<span class="hljs-variable">$USER</span>/scripts/touchpad_switcher.sh true&quot;</span></span><br></code></pre></td></tr></table></figure><p>注意<code>$USER</code>替换成你的用户名，对应的脚本路径要修改。</p><p>重启电脑，大功告成！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://superuser.com/questions/229930/finding-bluetooth-link-key-in-windows-7-to-double-pair-a-device-on-dualboot-com">Finding Bluetooth link key in Windows 7, to double pair a device on dualboot computer - Super User</a></li><li><a href="http://askubuntu.com/questions/533266/how-to-disable-notebooks-touchpad-on-usb-mouse-connect-and-slower-the-last">14.04 - How to disable notebook’s touchpad on USB mouse connect (and slower the last)? - Ask Ubuntu</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Bluetooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加快墙内网速提升Ubuntu使用效率的TIPS</title>
    <link href="/2016/08/08/tips-to-save-your-time-on-ubuntu/"/>
    <url>/2016/08/08/tips-to-save-your-time-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<p>众所周知（？），在国内想要访问某些网站是很慢的，然而也许是误伤的缘故，很多不在此列表的网站访问速度也很慢，shadowsocks的配置方法我已经在<a href="/2016/04/18/ubuntu-reinstallation-series-shadowsocks-configurations/">重装Ubuntu系列：Shadowsocks配置</a>里面提到过，这里再对Ubuntu做一些简单的配置，充分利用已有的资源。</p><h1 id="使用npm镜像"><a href="#使用npm镜像" class="headerlink" title="使用npm镜像"></a>使用npm镜像</h1><p>之前从学校回家之后，网络莫名抽风，<code>npm install</code>死活卡着不动，万般无奈之下去谷歌了一下npm的镜像，发现过内有两个镜像，淘宝提供的和cnpm提供的。后者似乎进行了负载均衡，国内用户会通过淘宝的镜像下载（不是很清楚，详见<a href="https://cnpmjs.org/">官网</a>），因此选择了它。<br>配置方法还是很简单的，直接在Home目录下新建一个<code>.npmrc</code>的文件，并写入如下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">registry=http:<span class="hljs-regexp">//</span>r.cnpmjs.org/<br></code></pre></td></tr></table></figure><p>然后重新打开命令行即可。<br>值得一提的是，cnpm还提供了一个<code>cnpm</code>包，用于自动从cnpm镜像下载，不过好像和npm的表现不太一样，所以最终没有用它。</p><h1 id="使用教育网apt-get镜像"><a href="#使用教育网apt-get镜像" class="headerlink" title="使用教育网apt-get镜像"></a>使用教育网apt-get镜像</h1><p>这个就不多解释了，直接发车。打开Dash面板搜索<code>Software and Updates</code>，然后打开<code>Ubuntu Software</code>标签页下的<code>Download from:</code>列表，选择<code>&#39;Other...</code>，从弹出的对话框中列表里的China里选择一个即可。</p><h1 id="使用国内云服务器和HA-Proxy做Shadowsocks中继"><a href="#使用国内云服务器和HA-Proxy做Shadowsocks中继" class="headerlink" title="使用国内云服务器和HA-Proxy做Shadowsocks中继"></a>使用国内云服务器和HA-Proxy做Shadowsocks中继</h1><p>校园网的环境真是尿崩啊……ping我US的Shadowsocks服务器居然丢包达到了25%，谷歌一番之后，发现了神器HA-Proxy，它可以作为TCP和HTTP的中继，于是我尝试在我的国内云服务器ping我的Shadowsocks服务器，发现延迟在200ms左右，不丢包。从我本地ping国内云服务器，延迟10ms以内，不丢包。可以，很强势！于是，方案浮出水面：在国内云服务器上安装HA-Proxy，将A端口转发到Shadowsocks服务器的B端口，然后将本地的Shadowsocks服务器IP改为国内云服务器IP，端口改为A。</p><ul><li><p>在国内云服务器安装HA-Proxy</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install haproxy<br></code></pre></td></tr></table></figure></li><li><p>修改国内云服务器上的<code>/etc/haproxy/haproxy.cfg</code>，将<code>defaults</code>内的<code>mode</code>改为<code>tcp</code>，并在后面添加前后端配置</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">frontend <span class="hljs-built_in">ss</span>-<span class="hljs-keyword">in</span><br>bind *:A<br>default_backend <span class="hljs-built_in">ss</span>-<span class="hljs-keyword">out</span><br><br>backend <span class="hljs-built_in">ss</span>-<span class="hljs-keyword">out</span><br>server server1 <span class="hljs-number">1.2</span><span class="hljs-number">.3</span><span class="hljs-number">.4</span>:B maxconn <span class="hljs-number">20480</span><br></code></pre></td></tr></table></figure><p>其中1.2.3.4就是你的Shadowsocks服务器IP。</p></li><li><p>保存编辑，重启服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service haproxy restart</span><br></code></pre></td></tr></table></figure></li></ul><p>客户端的配置略去，需要注意如果有多个端口的话，上述配置文件可以省略端口B。另外，HA-Proxy不支持UDP中继，这可能会造成一些影响，因为Shadowsocks默认开启UDP代理，这可能导致UDP包被丢弃，等我遇到坑了再来田- -</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Shadowsocks</tag>
      
      <tag>npm</tag>
      
      <tag>HA-Proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重装Ubuntu系列：Shadowsocks配置</title>
    <link href="/2016/04/17/ubuntu-reinstallation-series-shadowsocks-configurations/"/>
    <url>/2016/04/17/ubuntu-reinstallation-series-shadowsocks-configurations/</url>
    
    <content type="html"><![CDATA[<p>说实话Ubuntu（版本<code>14.04 LTS</code>）的重装成本比Windows高太多了，一方面是自己不熟悉，另一方面也不如Windows只要exe和msi就能搞定，然而搞崩Ubuntu或者改动分区之后又不得不重装（妈蛋重装系统和重搭博客是我干得最多的事！！），往往有些配置有没有记下来，于是有了写这个系列的想法。<br>作为本系列的第一蛋，自然要先把科学上网的问题解决，因为已经有了VPS，所以只需要搞定客户端的问题。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://www.ihunter.me/Ubuntu%2014.04%20VPS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEShadowsocks%E7%9A%84%E6%96%B9%E6%B3%95.html">Ubuntu 14.04 VPS安装配置Shadowsocks的方法</a></li><li><a href="https://github.com/snachx/gfwlist2privoxy">snachx&#x2F;gfwlist2privoxy</a></li><li><a href="https://github.com/gfwlist/gfwlist">gfwlist&#x2F;gfwlist</a></li><li><a href="http://askubuntu.com/questions/18802/how-to-correctly-add-a-custom-daemon-to-init-d">10.04 - How to correctly add a custom daemon to init.d? - Ask Ubuntu</a></li></ul><h1 id="安装Shadowsocks-python客户端"><a href="#安装Shadowsocks-python客户端" class="headerlink" title="安装Shadowsocks-python客户端"></a>安装Shadowsocks-python客户端</h1><p>事实上编译<code>libev</code>版本的也是可行的，但是实在麻烦，这里图方便就用了python版本的实现。<br>在终端输入以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">python</span>-gevent <span class="hljs-keyword">python</span>-pip <span class="hljs-keyword">python</span>-m2crypto<br>sudo pip install shadowsocks<br></code></pre></td></tr></table></figure><p>至此Shadowsocks就安装好了。</p><h1 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h1><p>Shadowsocks的python版本同时安装了客户端和服务器端，分别是<code>sslocal</code>和<code>ssserver</code>。<br>在<code>/etc/shadowsocks/</code>新建一个文件<code>sslocal.json</code>（其实放哪里无所谓，但是配置文件一般放在<code>/etc</code>里面），输入以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1.2.3.4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">5678</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;local_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1080</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;passfoobar&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">600</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aes-256-cfb&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其中<code>server</code>是服务器地址，<code>server_port</code>是服务器端口，<code>local_port</code>是本地端口，一般默认就是<code>1080</code>，<code>password</code>是密码，<code>timeout</code>是超时时间（并不知道有什么用- -），<code>method</code>是加密方式，默认就是<code>aes-256-cfb</code>。</p><h1 id="运行Shadowsocks"><a href="#运行Shadowsocks" class="headerlink" title="运行Shadowsocks"></a>运行Shadowsocks</h1><p>在命令行输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo sslocal -c <span class="hljs-regexp">/etc/</span>shadowsocks/sslocal.json -d start<br></code></pre></td></tr></table></figure><p>之后Shadowsocks就作为守护进程在后台运行了，参数c指定了配置文件，d参数要求运行守护（后台）进程。这里需要注意的是必须用sudo运行，否则会无法读取配置文件。</p><h1 id="安装与配置Privoxy"><a href="#安装与配置Privoxy" class="headerlink" title="安装与配置Privoxy"></a>安装与配置Privoxy</h1><p>运行了Shadowsocks之后你会发现即使给浏览器设置了代理端口，依然无法翻墙，这是因为Ubuntu 14.04本身不支持<code>socks5</code>协议，而python实现的Shadowsocks本身只有这个协议，因此在看了Windows上C#版本的Shadowsocks实现的源码之后想到了解决方法：使用Privoxy在<code>localhost:8123</code>运行一个HTTP代理，然后转发到1080端口上去，然后将浏览器的代理设置到8123端口就行啦！<br>事实上使用Privoxy还有一个好处，那就是可以依托Privoxy强大的action文件进行局部代理，Windows上是通过pac文件实现的，但是Privoxy不支持pac文件，怎么办呢？<br>庆幸的是，GitHub上有一个项目<code>gfwlist2privoxy</code>可以把GFWList文件转换成Privoxy的action文件，而GFWList是一个开源项目，收集更新被墙的域名列表。于是解决方法也出来了：从gfwlist下载最新的gfwlist文件，然后用gfwlist2privoxy转换成action文件即可！<br>废话说完，开始配置，首先下载Privoxy：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install privoxy<br></code></pre></td></tr></table></figure><p>完成之后在这里下载<a href="https://github.com/gfwlist/gfwlist/raw/master/gfwlist.txt">最新的gfwlist.txt</a>，放到个人目录里，然后安装<code>gfwlist2privoxy</code>并生成action文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo pip install gfwlist2privoxy<br>sudo gfwlist2privoxy -i ~<span class="hljs-regexp">/gfwlist.txt -f /</span>etc<span class="hljs-regexp">/privoxy/g</span>fwlist.action -p <span class="hljs-string">&quot;127.0.0.1:1080&quot;</span> -t socks5<br></code></pre></td></tr></table></figure><p>接下来修改Privoxy的配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vi <span class="hljs-regexp">/etc/</span>privoxy/config<br></code></pre></td></tr></table></figure><p>首先指定监听地址：<br><img src="/set-privoxy-listen-address.png" alt="Set Privoxy listen address"><br>然后增加action文件：<br><img src="/add-privoxy-action-file.png" alt="Add Privoxy action file"><br>最后重启Privoxy服务，只要没有报错就大功告成！</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service privoxy restart</span><br></code></pre></td></tr></table></figure><h1 id="给浏览器配置代理"><a href="#给浏览器配置代理" class="headerlink" title="给浏览器配置代理"></a>给浏览器配置代理</h1><p>火狐浏览器的设置里就可以配置，直接修改即可：<br><img src="/set-proxy-for-firefox.png" alt="Set proxy for Firefox"><br>至于Chromium浏览器，是直接使用系统设置的，这里可以直接在Ubuntu的网络设置里修改，进入<code>System Settings</code> - <code>Network</code> - <code>Network proxy</code>，设置完成后点击<code>Apply to system wide</code>即可。<br><img src="/set-system-proxy.png" alt="Set system proxy"><br>另一种方法是在.bashrc文件末尾加上</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=http://localhost:8123<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=http://localhost:8123<br></code></pre></td></tr></table></figure><p>之后输入</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">. </span>~/.bashrc<br></code></pre></td></tr></table></figure><p>更新环境即可。</p><h1 id="让Shadowsocks开机自启动"><a href="#让Shadowsocks开机自启动" class="headerlink" title="让Shadowsocks开机自启动"></a>让Shadowsocks开机自启动</h1><p>这里一切都接近完美，但是仍然有个问题：每次开机需要手动启动Shadowsocks，能不能把Shadowsocks也变成service呢？当然可以，只需要在<code>/etc/init.d/</code>里面增加一个脚本即可。这个目录里有个<code>skeleton</code>文件，是模板文件，我已经进行了修改，虽然没有输出，但是能够正常启动，从<a href="https://gist.github.com/perqin/2867f8fac6dbbf2514b7471095233668/raw/84207cb3a4fbf702df828504b643c5b65a77c7ab/sslocal">这里</a>下载这个文件到个人目录，然后更新服务列表启动服务：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo cp ~<span class="hljs-regexp">/sslocal /</span>etc<span class="hljs-regexp">/init.d/</span>sslocal<br>sudo chmod a+x <span class="hljs-regexp">/etc/i</span>nit.d/sslocal<br>sudo update-rc.d sslocal defaults <span class="hljs-number">97</span> <span class="hljs-number">03</span><br>sudo service sslocal start<br></code></pre></td></tr></table></figure><h1 id="还不够完美"><a href="#还不够完美" class="headerlink" title="还不够完美"></a>还不够完美</h1><p>到这里我们已经能够无痛翻墙，但是还有两个问题：</p><ul><li>服务自启动脚本没有输出，不能确定运行状态；</li><li>无法自动更新gfwlist和更新用户规则</li></ul><p>这两个以后我会解决后另行发文记录，嘿嘿！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Shadowsocks</tag>
      
      <tag>Privoxy</tag>
      
      <tag>GFW</tag>
      
      <tag>gfwlist</tag>
      
      <tag>翻墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魅族魅蓝2解锁bootloader并刷入AOSP ROM</title>
    <link href="/2016/04/13/unlock-bootloader-and-flash-aosp-for-meizu-m2-mini/"/>
    <url>/2016/04/13/unlock-bootloader-and-flash-aosp-for-meizu-m2-mini/</url>
    
    <content type="html"><![CDATA[<p>俄罗斯论坛<a href="http://4pda.ru/forum/index.php">4pda</a>的一些大神成功的解锁了bootloader，我把教程翻译成了英文并完成了刷机，记录如下。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol><li>本教程需要一定计算机操作基础知识。</li><li>文章中提供的资源均来自Google Drive文件分享。</li></ol><h1 id="原出处"><a href="#原出处" class="headerlink" title="原出处"></a>原出处</h1><ol><li>解锁bootloader：<a href="http://4pda.ru/forum/index.php?showtopic=683361&st=5300#entry45261414">http://4pda.ru/forum/index.php?showtopic=683361&amp;st=5300#entry45261414</a></li><li>第三方recovery.img下载：<a href="http://4pda.ru/forum/index.php?showtopic=683361&st=5280#entry45259035">http://4pda.ru/forum/index.php?showtopic=683361&amp;st=5280#entry45259035</a></li></ol><h1 id="0-前提"><a href="#0-前提" class="headerlink" title="0. 前提"></a>0. 前提</h1><ol><li>手机已经获取root权限。</li><li>数据必须备份。</li></ol><h1 id="1-解锁bootloader"><a href="#1-解锁bootloader" class="headerlink" title="1. 解锁bootloader"></a>1. 解锁bootloader</h1><ol><li>安装手机的驱动（在Windows10下直接插入手机就会自动安装），下载adb工具，将adb.exe加入到环境变量。</li><li>下载脚本unlock_bootloader.sh并拷贝到手机里（如内置存储的根目录）。</li><li>下载<a href="">Terminal 1.0.70</a>和<a href="">BusyBox + Free.ver.33.build.183</a>并安装。</li><li>运行BusyBox并授权root权限，点击“Install System”。</li><li>安装完成并重启手机之后，打开Terminal，输入<code>su</code>提权，授权root权限后进入到保存unlock_bootloader.sh的目录，输入<code>sh unlock_bootloader.sh</code>运行脚本。</li><li>运行成功之后，打开Windows的命令行工具，将手机连接电脑并打开USB调试，在命令行中输入<code>adb reboot bootloader</code>。</li><li>手机重启进入bootloader模式之后在命令行中输入<code>fastboot oem unlock</code>进行解锁，手机会提示你继续操作将失去保修，按<code>音量+</code>键确定。<br><img src="/fastboot-oem-unlock.png" alt="fastboot oem unlock"></li><li>完成后手机会卡死而命令行中有成功信息，此时长按手机电源键强制重启，一旦显示出MEIZU的字样时立刻同时按住<code>电源</code>键和<code>音量+</code>键直到进入魅族原生Recovery。</li><li>进入之后勾选“清除数据”之后选择“执行”，数据清除后选择“重启”，这个操作相当于重置系统，手机会重启并显示魅族小气球，这个动画将会持续10-20分钟，请耐心等待。</li></ol><h1 id="2-刷入第三方Recovery"><a href="#2-刷入第三方Recovery" class="headerlink" title="2. 刷入第三方Recovery"></a>2. 刷入第三方Recovery</h1><ol><li>进入系统之后确认root权限并重新启用USB调试，Windows中重新打开命令行并输入<code>adb reboot bootloader</code>，手机重启并再次进入bootloader模式。</li><li>俄罗斯论坛大神提供了多个Recovery，我在这里选的是英文版的Materialised主题的Recovery。</li><li>下载Recovery到计算机上后命令行进入到该位置并输入“fastboot flash recovery recovery.img”，其中recovery.img即为你下载的Recovery文件的名字。<br><img src="/flash-recovery.png" alt="fastboot flash recovery recovery.img"></li><li>刷写完成后长按电源键重启即可。</li></ol><h1 id="3-刷入AOSP-ROM"><a href="#3-刷入AOSP-ROM" class="headerlink" title="3. 刷入AOSP ROM"></a>3. 刷入AOSP ROM</h1><ol><li>下载<a href="">AOSP.zip</a>并放入手机内置存储中。</li><li>手机重启，一旦显示出MEIZU的字样时立刻同时按住<code>电源</code>键和<code>音量+</code>键直到进入第三方Recovery。</li><li>使用第三方Recovery选择刷机包刷入并清除相关数据（Darvik、cache等）。</li><li>重启手机，享受原生Android吧！</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>bootloader</tag>
      
      <tag>AOSP</tag>
      
      <tag>ROM</tag>
      
      <tag>魅族</tag>
      
      <tag>魅蓝2</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
